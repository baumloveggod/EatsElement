Path: ./http/Views/templates/zutaten_post.php
Content:
<?php
// Fehlerberichterstattung einschalten
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once '../../Utils/db_connect.php';

include 'einheiten_post.php';

// Überprüfen, ob das Formular gesendet wurde
function insert_into_Zutaten() {
    // Überprüfen, ob das Formular gesendet wurde und die Aktion "Zutat Unter Anderem Namen Hinzufügen" ist
    if (isset($_POST['aktion_name']) && $_POST['aktion_name'] === "Zutat Unter Anderem Namen Hinzufügen") {
 // Daten aus dem Formular holen
 $alternativerName = $_POST['alternativerName'];

 // Suche nach einer Zutat mit dem alternativen Namen
 $stmt = $conn->prepare("SELECT zutat_id FROM zutaten_namen WHERE name = ?");
 $stmt->bind_param("s", $alternativerName);
 $stmt->execute();
 $result = $stmt->get_result();

 if ($result->num_rows > 0) {
     // Zutat existiert, also füge den neuen Namen hinzu
     $row = $result->fetch_assoc();
     $zutatId = $row['zutat_id'];

     // Neuen Namen zur zutaten_namen Tabelle hinzufügen
     $zutaten_name = $_POST['zutaten_name']; // Der "neue" Name der Zutat
     $stmt = $conn->prepare("INSERT INTO zutaten_namen (name, zutat_id) VALUES (?, ?)");
     $stmt->bind_param("si", $zutaten_name, $zutatId);
     if ($stmt->execute()) {
  echo "<p>Neuer Name erfolgreich hinzugefügt.</p>";
     } else {
  echo "<p>Fehler beim Hinzufügen des neuen Namens: " . $stmt->error . "</p>";
     }
 } else {
     // Zutat nicht gefunden
     echo "<p>Die Zutat unter dem Namen '$alternativerName' wurde nicht gefunden. Bitte überprüfen Sie den Namen und versuchen Sie es erneut.</p>";
 }
    
 $stmt->close();
    }else{
 //zutaten_name : alternativerName : haltbarkeit : kategorie_id : phd_kategorie_id : einheit_id : name : einheit_umrechnungsfaktor : basisEinheit : umrechnungsfaktor : volumen
 foreach ($_POST as $a => $value) {
     echo $a . " : ";
 }
 
 if ($_POST['einheit_id'] === 'neuHinzufuegen') {
  
     // Führe die Funktion zum Hinzufügen der neuen Einheit aus und erhalte die neue Einheits-ID
     $einheit_id = insert_into_Eineheiten();
 }
 else{
     $einheit_id = $_POST['einheit_id'];
 }
 $hatSpezifischenUmrechnungsfaktor = $_POST['basisEinheit'] === 'speziell';
 $haltbarkeit = $_POST['haltbarkeit'] ?? null;
 $volumen = $_POST['volumen'] ?? null;
 $kategorie_id = $_POST['kategorie_id'] ?? null;
 $phd_kategorie_id = $_POST['phd_kategorie_id'] ?? null;
 $spezifischer_umrechnungsfaktor = ($hatSpezifischenUmrechnungsfaktor) ? $_POST['einheit_id'] === 'neuHinzufuegen' ? $_POST['einheit_umrechnungsfaktor']:$_POST['umrechnungsfaktor'] : null;

 // Prepared Statement zum Hinzufügen der Zutat vorbereiten
 $stmt = $conn->prepare("INSERT INTO zutaten (uebliche_haltbarkeit, volumen, kategorie_id, phd_kategorie_id, einheit_id, spezifischer_umrechnungsfaktor) VALUES (?, ?, ?, ?, ?, ?)");
 echo $haltbarkeit . " : " .  $volumen . " : " . $kategorie_id . " : " . $phd_kategorie_id . " : " . $einheit_id . " : " . $spezifischer_umrechnungsfaktor;
 // Parameter binden
 $stmt->bind_param("idiiid", $haltbarkeit, $volumen, $kategorie_id, $phd_kategorie_id, $einheit_id, $spezifischer_umrechnungsfaktor);

     // Versuchen, die Prepared Statement auszuführen
     if ($stmt->execute()) {
  if (empty($_POST['zutaten_name'])) {
      echo "<p>Name is required.</p>";
      // Handle the error appropriately - perhaps by not proceeding with the DB insert
  }
  $zutaten_name = $_POST['zutaten_name'];

  // Assuming $stmt->execute() was successful and $name is the name of the ingredient
  $zutatId = $conn->insert_id; // Retrieves the ID of the last inserted row
  $stmt = $conn->prepare("INSERT INTO zutaten_namen (name, zutat_id) VALUES (?, ?)");
  $stmt->bind_param("si", $zutaten_name, $zutatId);
  if (!$stmt->execute()) {
      echo "<p>Fehler beim Hinzufügen des Namens der Zutat: " . $stmt->error . "</p>";
  }

  echo "<p>Zutat erfolgreich hinzugefügt!</p>";
     } else {
  echo "<p>Fehler beim Hinzufügen der Zutat: " . $stmt->error . "</p>";
     }

     // Prepared Statement schließen
     $stmt->close();
 }
    }
?>

Path: ./http/Views/templates/zutatenFormular.php
Content:
<?php
// Fehlerberichterstattung einschalten
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once '../../Utils/db_connect.php';

include 'einheitenFormular.php';

// Funktion, um Optionen für ein Dropdown-Menü zu generieren, erweitert um den speziellen Umrechnungsfaktor-Status
function generateOptions($tableName, $idColumn, $nameColumn, $isEinheiten = false) {
    global $conn;
    $options = '';
    $sql = $isEinheiten ? "SELECT $idColumn, $nameColumn, basis_einheit_id, hat_spezifischen_umrechnungsfaktor FROM $tableName ORDER BY $nameColumn ASC" : "SELECT $idColumn, $nameColumn FROM $tableName ORDER BY $nameColumn ASC";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
 while($row = $result->fetch_assoc()) {
     if ($isEinheiten) {
  $options .= "<option value='" . $row[$idColumn] . "' data-basis='" . $row['basis_einheit_id'] . "' data-spezifischer-umrechnungsfaktor='" . $row['hat_spezifischen_umrechnungsfaktor'] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
     } else {
  $options .= "<option value='" . $row[$idColumn] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
     }
 }
    }
    return $options;
}
?>
     <form action= $action method="post">
     <label for="zutaten_name">Name:</label>
     <input type="text" id="zutaten_name" name="zutaten_name" ><br><br>
     
     <script>
  function toggleForm(checkbox) {
      var isChecked = checkbox.checked;
      var alternativerNameContainer = document.getElementById('alternativerNameContainer');
      var restDesFormulars = document.getElementById('restDesFormulars');
      
      // Sichtbarkeit umschalten
      alternativerNameContainer.style.display = isChecked ? 'block' : 'none';
      restDesFormulars.style.display = isChecked ? 'none' : 'block';

      // Setze oder entferne das 'required' Attribut basierend auf dem Zustand des Kontrollkästchens
      var inputsAlternative = alternativerNameContainer.getElementsByTagName('input');
      for (var i = 0; i < inputsAlternative.length; i++) {
   inputsAlternative[i].required = isChecked; // Diese Felder sind nur erforderlich, wenn der Container sichtbar ist
      }

      var inputsRest = restDesFormulars.getElementsByTagName('input');
      for (var i = 0; i < inputsRest.length; i++) {
   // Überprüfe, ob das Eingabefeld sichtbar ist, bevor du es als required markierst
   if (inputsRest[i].type !== 'submit' && inputsRest[i].id !== 'volumen') { // 'volumen' wird separat behandelt
       inputsRest[i].required = !isChecked; // Diese Felder sind nur erforderlich, wenn der Container sichtbar ist
   }
      }

      // Spezialfall für 'volumen', das nur erforderlich ist, wenn es sichtbar ist
      var volumenInput = document.getElementById('volumen');
      if (volumenInput.style.display !== 'none') {
   volumenInput.required = true;
      } else {
   volumenInput.required = false;
      }
      if (!checkbox){
   checkNeueEinheit(document.getElementById('einheit_id').value);
      }
  }
  window.onload = function() {
      toggleForm(document.getElementById('existiertUnterAnderemNamen'));
  }

     </script>
     
     <label for="existiertUnterAnderemNamen">Existiert ide zutat unter einem anderem Namen?</label>
     <input type="checkbox" id="existiertUnterAnderemNamen" name="existiertUnterAnderemNamen" onchange="toggleForm(this)" checked>
     
     <div id="alternativerNameContainer" style="display:block;">
  <label for="alternativerName">Anderer Name:</label>
  <input type="text" id="alternativerName" name="alternativerName"><br><br>
  <input type="submit" name="aktion_name" value="Zutat Unter Anderem Namen Hinzufügen">
     </div>

     <div id="restDesFormulars" style="display:none;">

  <label for="haltbarkeit">Haltbarkeit (in Tagen):</label>
  <input class="restDesFormulars" type="number" id="haltbarkeit" name="haltbarkeit" ><br><br>
  
  
  <label for="kategorie_id">Kategorie:</label>
  <select class="restDesFormulars" id="kategorie_id" name="kategorie_id" >
      <option value="">Bitte wählen</option>    
      <?php echo generateOptions('kategorien', 'id', 'name'); ?>
  </select><br><br>
  
  <label for="phd_kategorie_id">Planetary Health Diet Category:</label>
  <select class="restDesFormulars" id="phd_kategorie_id" name="phd_kategorie_id" >
      <option value="">Bitte wählen</option> 
      <?php echo generateOptions('Planetary_Health_Diet_Categories', 'ID', 'Kategorie'); ?>
  </select><br><br>
  <label for="einheit_id">einheit:</label>
  <select id="einheit_id" name="einheit_id">
      <option value="">Bitte wählen</option>
      <?php echo generateOptions('einheiten', 'id', 'name', true); ?>

      <option value="neuHinzufuegen">Neu hinzufügen...</option>
  </select><br><br>
  <div id="neueEinheitFormular" style="display:none;"> 
    <?php include '../templates/einheitenFormular.html';?>
  </div>
  <div id="umrechnungsfaktorFeld" style="display: none;">
      <label for="umrechnungsfaktor">Umrechnungsfaktor:</label>
      <input type="number" id="umrechnungsfaktor" name="umrechnungsfaktor" step="0.01" required>
      <div> bei "spezieler Bassis ist die referenc immer Gramm</div><br><br>
  </div>

  <div id="volumen_block" style="display:none;">
  <label for="volumen">Volumen:</label>
  <input class="restDesFormulars" type="text" id="volumen" name="volumen">
  wichtig für PHD da die berenung mit gramm arbeitet<br><br>
  </div>
      <script>
      document.addEventListener("DOMContentLoaded", function() {
            // Bind change event listener to the units dropdown
            var einheitDropdown = document.getElementById('einheit_id');
            if (einheitDropdown) {
                einheitDropdown.addEventListener('change', handleEinheitChange);
            }

    // Initial check to set the correct state when the page loads
            if (einheitDropdown) {
                handleEinheitChange({target: einheitDropdown});
            }
            
            var basisEinheitDropdown = document.getElementById('basisEinheit');
            if (basisEinheitDropdown) {
                basisEinheitDropdown.addEventListener('change', handleBasisEinheitChange);
            }
    
        // Initial check for basisEinheitDropdown
            if (basisEinheitDropdown) {
                handleBasisEinheitChange({target: basisEinheitDropdown});
            }
        });

        function handleEinheitChange(event) {
            var selectedOption = event.target.options[event.target.selectedIndex];
            var umrechnungsfaktorField = document.getElementById('umrechnungsfaktorFeld');
            var umrechnungsfaktorInput = document.getElementById('umrechnungsfaktor');
            
            // Check if the selected unit requires a conversion factor
            if (selectedOption.dataset.spezifischerUmrechnungsfaktor === '1') {
        umrechnungsfaktorField.style.display = 'block';
        umrechnungsfaktorInput.required = true;
            } else {
        umrechnungsfaktorField.style.display = 'none';
        umrechnungsfaktorInput.required = false;
        umrechnungsfaktorInput.value = ''; // Clear the input if it's not required
            }
        }

        function handleBasisEinheitChange(event) {
            var selectedValue = event.target.value;
            var volumenBlock = document.getElementById('volumen_block');
            var volumenInput = document.getElementById('volumen');
            
            // Adjust visibility and required attribute for the volume input
            if (selectedValue === 'Liter') {
        volumenBlock.style.display = 'block';
        volumenInput.required = true;
            } else {
        volumenBlock.style.display = 'none';
        volumenInput.required = false;
        volumenInput.value = ''; // Clear the input if it's hidden
            }
        }// This function toggles the visibility of the new unit form and its inputs' required status
        function checkNeueEinheit(value) {
            var isNewUnitSelected = value === "neuHinzufuegen";
            var neueEinheitFormular = document.getElementById('neueEinheitFormular');
            var volumenBlock = document.getElementById('volumen_block');
            var volumenInput = document.getElementById('volumen');

            // Toggle the new unit form visibility
            neueEinheitFormular.style.display = isNewUnitSelected ? 'block' : 'none';

            // Set the required attribute for inputs in the new unit form based on its visibility
            var inputs = neueEinheitFormular.getElementsByTagName('input');
            for (var i = 0; i < inputs.length; i++) {
                inputs[i].required = isNewUnitSelected;
            }      

            // Adjust visibility and required attribute for the volumen input
            var selectedOption = document.querySelector('#einheit_id option:checked')
            var displayVolumen = 'none';
            if (value === '2' || 
                (isNewUnitSelected && document.getElementById('basisEinheit').value === 'Liter')|| 
                (selectedOption.getAttribute('data-basis') === '2')) {
                    displayVolumen = 'block';
            }
    
            volumenBlock.style.display = displayVolumen;
            volumenInput.required = displayVolumen === 'block';

            if (isNewUnitSelected)
            checkBasisEinheit(document.getElementById('basisEinheit').value);

            // Neuer Teil: Überprüfen, ob die ausgewählte Einheit einen speziellen Umrechnungsfaktor benötigt
            var selectedOption = document.querySelector('#einheit_id option:checked');
            if (selectedOption !== null) { // Check if selectedOption is not null
                var hatSpezifischenUmrechnungsfaktor = selectedOption.getAttribute('data-spezifischer-umrechnungsfaktor') === '1'; // Annahme: '1' bedeutet wahr
                // Sichtbarkeit und Required-Status für das Umrechnungsfaktor-Feld anpassen
                var umrechnungsfaktorFeld = document.getElementById('umrechnungsfaktorFeld'); // Stellen Sie sicher, dass Sie ein entsprechendes Feld im HTML-Markup haben
                umrechnungsfaktorFeld.style.display = hatSpezifischenUmrechnungsfaktor ? 'block' : 'none';
                umrechnungsfaktorFeld.required = hatSpezifischenUmrechnungsfaktor;
            } else {
                // Handle the case where no option is selected or exists
                document.getElementById('umrechnungsfaktorFeld').style.display = 'none';
                document.getElementById('umrechnungsfaktorFeld').required = false;
                }
        }
        // Event-Listener für die Auswahländerung hinzufügen
        document.getElementById('einheit_id').addEventListener('change', function() {
            checkNeueEinheit(this.value);
        });
        // Initialen Check ausführen
        checkNeueEinheit(document.getElementById('einheit_id').value);
        // This function updates the visibility of the volumen input based on the selected base unit
        
        function checkBasisEinheit(value) {
            var volumenBlock = document.getElementById('volumen_block');
            var volumenInput = document.getElementById('volumen');

            var displayVolumen = value === 'Liter' ? 'block' : 'none';
            volumenBlock.style.display = displayVolumen;
            volumenInput.required = displayVolumen === 'block';
   
            var info_speziel = document.getElementById('info_speziel');
            info_speziel.style.display = value === 'speziell' ?  "block" : 'none';            
            }
         </script>
        <input type="submit" value="Zutat Hinzufügen">         
    </div>
</form>

Path: ./http/Views/templates/einheitenFormular.php
Content:
<label for="name">Name:</label>
    <input type="text" id="name" name="name" ><br><br>
    
    <label for="einheit_umrechnungsfaktor">Umrechnungsfaktor:</label>
    <input type="number" id="einheit_umrechnungsfaktor" name="einheit_umrechnungsfaktor" step="0.01" >
    <div id="info_speziel"> bei "spezieler Bassis ist die referenc immer Gramm</div><br><br>
    
    <label for="basisEinheit">Basis Einheit:</label>
    <select id="basisEinheit" name="basisEinheit">
        <option value="">Bitte wählen</option>     
        <option value="Liter">Liter</option>
        <option value="Gramm">Gramm</option>
        <option value="speziell">speziell</option>
    </select><br><br>

Path: ./http/Views/pages/einheiten.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();


include '../templates/einheiten_post.php';
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['name'], $_POST['umrechnungsfaktor'], $_POST['basisEinheit'])) {
    insert_into_Eineheiten();
}

// Berechne die Anzahl der notwendigen Durchläufe für die paginierte Anzeige
$countSql = "SELECT COUNT(id) AS total FROM einheiten";
$countResult = $conn->query($countSql);
$countRow = $countResult->fetch_assoc();
$totalUnits = $countRow['total'];

$batchSize = 5; // Festlegung der Anzahl der Einheiten pro Batch
$loops = ceil($totalUnits / $batchSize); // Berechnung der Anzahl der Durchläufe
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Einheiten Verwaltung</title>
</head>
<body>
    <?php include '../templates/navigation.php'; ?>
    
    <main>
        <h2>Einheiten Verwaltung</h2>
        
        <h3>Einheit hinzufügen</h3>
        
            <form action="" method="post">
                <?php include '../templates/einheitenFormular.html';?>
                <input type="submit" value="Einheit Hinzufügen" id="einheitHinzufuegenButton">
            </form>

        <h3>Vorhandene Einheiten</h3>
        <table>
            <thead>
                    <tr>
                        <th>Name</th>
                        <th>Umrechnungsfaktor</th>
                        <th>Basis Einheit ID</th>
                        <th>hat_spezifischen_umrechnungsfaktor</th>
                    </tr>
                </thead>
            <tbody>
                <?php 
                for ($i = 0; $i < $loops; $i++) {
                    $offset = $i * $batchSize;
                    $sql = "SELECT id, name, umrechnungsfaktor_zu_basis, basis_einheit_id, hat_spezifischen_umrechnungsfaktor FROM einheiten ORDER BY name ASC LIMIT $offset, $batchSize";
                    $result = $conn->query($sql);

                    while ($row = $result->fetch_assoc()) {
                        // Ausgabe jedes Datensatzes
                        echo "<tr>";
                        echo "<td>" . htmlspecialchars($row['name']) . "</td>";
                        echo "<td>" . htmlspecialchars($row['umrechnungsfaktor_zu_basis']) . "</td>";
                        echo "<td>" . (is_null($row['basis_einheit_id']) ? 'NULL' : htmlspecialchars($row['basis_einheit_id'])) . "</td>";
                        echo "<td>" . (htmlspecialchars($row['hat_spezifischen_umrechnungsfaktor']) ? 'ja' : 'Nein') . "</td>";
                        echo "</tr>";
                    }
                }
                ?>
            </tbody>
        </table>

    </main>
    
    <?php include '../templates/footer.php'; ?>
</body>
</html>


Path: ./http/Views/pages/zutaten.php
Content:
<?php
    // Fehlerberichterstattung einschalten
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);

    // Verbindung zur Datenbank herstellen
    require_once '../../Utils/db_connect.php';

    include '../templates/zutaten_post.php';
    // Überprüfen, ob das Formular gesendet wurde
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        insert_into_Zutaten();
    }
    ?>

    <!DOCTYPE html>
    <html lang="de">
    <head>
        <meta charset="UTF-8">
        <title>Zutat Hinzufügen</title>
    </head>
    <body>
        <h2>Zutat Hinzufügen</h2>
        
        <form action=<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?> method="post">
        <?php include '../templates/zutatenFormular.php';?>
        <h2>Vorhandene Zutaten</h2>
        <?php
// Vorhandene Zutaten auflisten mit Anpassungen
$sql = "SELECT zutaten.id, 
               GROUP_CONCAT(zutaten_namen.name SEPARATOR ', ') AS names, 
               zutaten.uebliche_haltbarkeit, 
               zutaten.volumen, 
               kategorien.name AS kategorie_name, 
               Planetary_Health_Diet_Categories.Kategorie AS phd_kategorie_name, 
               einheiten.name AS einheit_name
        FROM zutaten 
        JOIN zutaten_namen ON zutaten.id = zutaten_namen.zutat_id
        JOIN kategorien ON zutaten.kategorie_id = kategorien.id
        JOIN Planetary_Health_Diet_Categories ON zutaten.phd_kategorie_id = Planetary_Health_Diet_Categories.ID
        JOIN einheiten ON zutaten.einheit_id = einheiten.id
        GROUP BY zutaten.id
        ORDER BY names ASC";

$result = $conn->query($sql);

if ($result->num_rows > 0) {
    echo "<table border='1'>";
    echo "<tr><th>Namen</th><th>Haltbarkeit (Tage)</th><th>Volumen</th><th>Kategorie</th><th>PHD Kategorie</th><th>Einheit</th></tr>";
    while ($row = $result->fetch_assoc()) {
        echo "<tr><td>" . htmlspecialchars($row['names']) . "</td><td>" . htmlspecialchars($row['uebliche_haltbarkeit']) . "</td><td>" . htmlspecialchars($row['volumen']) . "</td><td>" . htmlspecialchars($row['kategorie_name']) . "</td><td>" . htmlspecialchars($row['phd_kategorie_name']) . "</td><td>" . htmlspecialchars($row['einheit_name']) . "</td></tr>";
    }
    echo "</table>";
} else {
    echo "Keine Zutaten gefunden.";
}
?>
 </body>
 </html>


Path: sql_create
Content:
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL, -- Speichern Sie hier Hashes, nicht die tatsächlichen Passwörter
    cookie_auth_token VARCHAR(255), -- Ein langes, zufälliges Token für die Authentifizierung via Cookie
    freundes_token VARCHAR(255) UNIQUE,
    einkaufsoption VARCHAR(255) DEFAULT 'ueblicheVerpackungsgroesse',
    is_temporary BOOLEAN NOT NULL DEFAULT 0,
    anzahl_personen_einstellung INT DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    current_editing_recipe_id INT DEFAULT NULL;
);

CREATE TABLE essenplan (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    datum DATE NOT NULL,
    anzahl_personen INT NOT NULL,
    rezept_id INT, 
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (rezept_id) REFERENCES rezepte(id)
);


CREATE TABLE zutaten (
    id INT AUTO_INCREMENT PRIMARY KEY,
    uebliche_haltbarkeit INT DEFAULT 7 COMMENT 'Haltbarkeit in Tagen',
    kategorie_id INT DEFAULT NULL,
    phd_kategorie_id INT,
    volumen DECIMAL(10, 2),
    einheit_id INT,   
    spezifischer_umrechnungsfaktor DECIMAL(10, 2),
    FOREIGN KEY (phd_kategorie_id) REFERENCES Planetary_Health_Diet_Categories(ID),
    FOREIGN KEY (kategorie_id) REFERENCES kategorien(id),
    FOREIGN KEY (einheit_id) REFERENCES einheiten(id)
);

CREATE TABLE kategorien (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    sortierreihenfolge INT NOT NULL
);



CREATE TABLE rezepte (
    id INT AUTO_INCREMENT PRIMARY KEY,
    titel VARCHAR(255) NOT NULL,
    beschreibung TEXT,
    zubereitungszeit INT,
    basis_personenanzahl INT DEFAULT 4

);


CREATE TABLE rezept_zutaten (
    rezept_id INT,
    zutat_id INT,
    menge DECIMAL(10, 2),
    einheit_id INT NOT NULL,
    FOREIGN KEY (einheit_id) REFERENCES einheiten(id),
    PRIMARY KEY (rezept_id, zutat_id),
    FOREIGN KEY (rezept_id) REFERENCES rezepte(id),
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);
CREATE TABLE einkaufsliste (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    zutat_id INT,
    menge VARCHAR(255),
    gekauft BOOLEAN DEFAULT FALSE,
    verbrauchsdatum DATE, -- Hinzugefügtes Feld für das Verbrauchsdatum
    gefaess_id INT DEFAULT NULL,
    FOREIGN KEY (gefaess_id) REFERENCES unverpackte_gefaesse(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE vorratsschrank (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    zutat_id INT,
    menge VARCHAR(255),
    verbrauchsdatum DATE, -- Hinzugefügtes Feld für das Verbrauchsdatum
    gefaess_id INT DEFAULT NULL,
    FOREIGN KEY (gefaess_id) REFERENCES unverpackte_gefaesse(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE zutaten_namen (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    zutat_id INT NOT NULL,
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE konventionen (
    id INT AUTO_INCREMENT PRIMARY KEY,
    single_name_id INT NOT NULL,
    plural_name_id INT,
    zutat_id INT NOT NULL,
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE freundschaftsanfragen (
    id INT AUTO_INCREMENT PRIMARY KEY,
    sender_id INT NOT NULL,
    empfaenger_id INT NOT NULL,
    status ENUM('pending', 'accepted', 'declined') NOT NULL,
    FOREIGN KEY (sender_id) REFERENCES users(id),
    FOREIGN KEY (empfaenger_id) REFERENCES users(id)
);

CREATE TABLE freunde (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id_1 INT NOT NULL,
    user_id_2 INT NOT NULL,
    FOREIGN KEY (user_id_1) REFERENCES users(id),
    FOREIGN KEY (user_id_2) REFERENCES users(id)
);

CREATE TABLE unverpackte_gefaesse (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    volumen DECIMAL(10,2) NOT NULL COMMENT 'Volumen in Litern oder Kilogramm',
    beschreibung TEXT,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE TABLE einheiten (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    umrechnungsfaktor_zu_basis DECIMAL(10, 2),
    basis_einheit_id INT NULL,
    volumen DECIMAL(10, 2),
    hat_spezifischen_umrechnungsfaktor BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (basis_einheit_id) REFERENCES einheiten(id)
);
-- Basiseinheiten einfügen
INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis) VALUES ('Gramm', 1), ('Liter', 1);
INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis, basis_einheit_id) VALUES ('Kilogramm', 1000, 1), ('Pfund', 453.59, 1), ('Unze', 28.35, 1);
INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis, basis_einheit_id) VALUES ('Milliliter', 0.001, 2), ('Teelöffel', 0.005, 2), ('Esslöffel', 0.015, 2), ('Tasse', 0.24, 2);

CREATE TABLE zutaten_saisonalitaet (
    id INT AUTO_INCREMENT PRIMARY KEY,
    zutat_id INT NOT NULL,
    saison_start DATE NOT NULL,
    saison_ende DATE NOT NULL,
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE Planetary_Health_Diet_Categories (
    ID INT PRIMARY KEY,
    Kategorie VARCHAR(255),
    Taegliche_Menge_g INT,
    Beispiele TEXT
);
INSERT INTO Planetary_Health_Diet_Categories (ID, Kategorie, Taegliche_Menge_g, Beispiele) VALUES
(1, 'Getreide (Vollkorn)', 232, 'Vollkornprodukte, unverarbeitete Mais-, Weizen-, Reis- oder Haferprodukte'),
(2, 'Hülsenfrüchte', 50, 'Linsen, Bohnen, Erbsen, Kichererbsen'),
(3, 'Gemüse', 300, 'Ein Mix aus verschiedenen Gemüsesorten'),
(4, 'Obst', 200, 'Äpfel, Bananen, Orangen, Beeren'),
(5, 'Nüsse und Samen', 50, ''),
(6, 'Fleisch (Rot und verarbeitet)', 14, 'Begrenzen auf rotes und verarbeitetes Fleisch'),
(7, 'Geflügel', 29, ''),
(8, 'Fisch', 28, ''),
(9, 'Milchprodukte', 250, 'Milch, Joghurt, Käse'),
(10, 'Eier', 13, 'Entspricht etwa 1,5 Eiern pro Woche'),
(11, 'Pflanzliche Öle', 40, 'Olivenöl, Rapsöl, Sonnenblumenöl'),
(12, 'Zucker', 31, ''),
(13, 'Stärkehaltiges Gemüse', 50, 'Kartoffeln, Süßkartoffeln');


