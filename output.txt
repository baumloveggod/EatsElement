Path: ./http/Views\hidden\editRecipe.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
checkAccess();
require_once '../../Utils/db_connect.php';

$userId = $_SESSION['id'];
$recipeId = isset($_GET['recipeId']) ? intval($_GET['recipeId']) : null;

// Wenn recipeId vorhanden ist, überprüfe, ob sie mit der des Benutzers übereinstimmt
if ($recipeId !== null) {
    $stmt = $conn->prepare("SELECT current_editing_recipe_id FROM users WHERE id = ?");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $result = $stmt->get_result();
    $user = $result->fetch_assoc();

    if ($recipeId != $user['current_editing_recipe_id']) {
        deleteRecipe($recipeId, $conn);
    
        // Kopiere das neue Rezept und erstelle eine neue ID
        $newRecipeId = copyRecipe($recipeId, $conn);
    
        // Aktualisiere die current_editing_recipe_id des Benutzers
        $updateStmt = $conn->prepare("UPDATE users SET current_editing_recipe_id = ? WHERE id = ?");
        $updateStmt->bind_param("ii", $newRecipeId, $userId);
        $updateStmt->execute();
    
        // Setze die neue recipeId für die weitere Verarbeitung
        $recipeId = $newRecipeId;
    }
    $zutatenStmt = $conn->prepare("
            SELECT z.name, rz.menge 
            FROM rezept_zutaten AS rz 
            JOIN zutaten AS z ON rz.zutat_id = z.id 
            WHERE rz.rezept_id = ?
        ");
    $zutatenStmt->bind_param("i", $recipeId);
    $zutatenStmt->execute();
        
    $zutatenResult = $zutatenStmt->get_result();
        
    while ($row = $zutatenResult->fetch_assoc()) {
        $zutaten[] = $row; // Füge jede Zutat zum Array hinzu
    }
}
        
// Funktion zum Kopieren eines Rezepts
function copyRecipe($recipeId, $conn) {
    // Schritt 1: Auslesen des originalen Rezepts
    $stmt = $conn->prepare("SELECT titel, beschreibung, zubereitungszeit FROM rezepte WHERE id = ?");
    $stmt->bind_param("i", $recipeId);
    $stmt->execute();
    $result = $stmt->get_result();
    if ($row = $result->fetch_assoc()) {
        // Schritt 2: Kopieren des Rezepts
        $insertStmt = $conn->prepare("INSERT INTO rezepte (titel, beschreibung, zubereitungszeit) VALUES (?, ?, ?)");
        $insertStmt->bind_param("ssi", $row['titel'], $row['beschreibung'], $row['zubereitungszeit']);
        $insertStmt->execute();

        // Schritt 3: Rückgabe der neuen recipeId
        $newRecipeId = $conn->insert_id;
        return $newRecipeId;
    } else {
        // Fehlerbehandlung, falls das Originalrezept nicht gefunden wurde
        echo "Originalrezept nicht gefunden.";
        exit;
    }
}

function deleteRecipe($recipeId, $conn) {
    // Lösche das Rezept aus der rezepte-Tabelle
    $deleteStmt = $conn->prepare("DELETE FROM rezepte WHERE id = ?");
    $deleteStmt->bind_param("i", $recipeId);

    if ($deleteStmt->execute()) {
        echo "Rezept erfolgreich gelöscht.";
    } else {
        echo "Fehler beim Löschen des Rezepts: " . $conn->error;
    }

    // Zusätzliche Schritte, um alle verknüpften Daten zu bereinigen
    // Beispiel: Löschen von Einträgen aus der rezept_zutaten-Tabelle
    $deleteIngredientsStmt = $conn->prepare("DELETE FROM rezept_zutaten WHERE rezept_id = ?");
    $deleteIngredientsStmt->bind_param("i", $recipeId);
    $deleteIngredientsStmt->execute();

    // Hier können weitere Bereinigungen für andere verknüpfte Tabellen hinzugefügt werden
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Rezept Bearbeiten</title>
    <link rel="stylesheet" href="../../css/styles.css">
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Rezept Bearbeiten</h2>
        <form action="../../Controllers/UpdateRecipe.php" method="post">
            <input type="hidden" name="recipeId" value="<?= $recipeId ?>">
            <label for="titel">Titel:</label>
            <input type="text" id="titel" name="titel" value="<?= htmlspecialchars($rezept['titel']) ?>" required>

            <label for="beschreibung">Beschreibung:</label>
            <textarea id="beschreibung" name="beschreibung" required><?= htmlspecialchars($rezept['beschreibung']) ?></textarea>

            <label for="zeit">Zubereitungszeit (in Minuten):</label>
            <input type="number" id="zeit" name="zeit" value="<?= $rezept['zubereitungszeit'] ?>" required>

            <h3>Zutaten:</h3>
            <table id="zutatenTable">
                <tr>
                    <th>Name</th>
                    <th>Menge</th>
                    <th>Aktion</th>
                </tr>
                <?php 
                $zutaten = []; // Initialize as an empty array
                foreach ($zutaten as $zutat): 
                ?>
                <tr>
                    <td><input type="text" name="zutatenName[]" value="<?= htmlspecialchars($zutat['name']) ?>"></td>
                    <td><input type="text" name="zutatenMenge[]" value="<?= htmlspecialchars($zutat['menge']) ?>"></td>
                    <td><button type="button" class="removeRow">Entfernen</button></td>
                </tr>
                <?php endforeach; ?>
                <tr>
                    <td><input type="text" name="zutatenName[]"></td>
                    <td><input type="text" name="zutatenMenge[]"></td>
                    <td><button type="button" class="removeRow">Entfernen</button></td>
                </tr>
            </table>
            <button type="button" id="addRow">Zutat hinzufügen</button>

            <button type="submit" name="save">Speichern</button>
            <button type="button" name="discard" onclick="window.location.href='heutiges-gericht.php'">Verwerfen</button>
        </form>
    </main>
    <footer>
        <p>&copy; 2024 Transforamtions-Design</p>
    </footer>

    <script>
        document.getElementById('addRow').addEventListener('click', function() {
            var table = document.getElementById('zutatenTable');
            var newRow = table.insertRow();
            var cell1 = newRow.insertCell(0);
            var cell2 = newRow.insertCell(1);
            var cell3 = newRow.insertCell(2);
            cell1.innerHTML = '<input type="text" name="zutatenName[]">';
            cell2.innerHTML = '<input type="text" name="zutatenMenge[]">';
            cell3.innerHTML = '<button type="button" class="removeRow">Entfernen</button>';
        });

        document.getElementById('zutatenTable').addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('removeRow')) {
                var row = e.target.closest('tr');
                row.parentNode.removeChild(row);
            }
        });
    </script>
</body>
</html>


Path: ./http/Views\pages\einheiten.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();


include '../templates/einheitenFormular.php';
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['name'], $_POST['umrechnungsfaktor'], $_POST['basisEinheit'])) {
    insert_into_Eineheiten();
}

// Berechne die Anzahl der notwendigen Durchläufe für die paginierte Anzeige
$countSql = "SELECT COUNT(id) AS total FROM einheiten";
$countResult = $conn->query($countSql);
$countRow = $countResult->fetch_assoc();
$totalUnits = $countRow['total'];

$batchSize = 5; // Festlegung der Anzahl der Einheiten pro Batch
$loops = ceil($totalUnits / $batchSize); // Berechnung der Anzahl der Durchläufe
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Einheiten Verwaltung</title>
</head>
<body>
    <?php include '../templates/navigation.php'; ?>
    
    <main>
        <h2>Einheiten Verwaltung</h2>
        
        <h3>Einheit hinzufügen</h3>
        
            <form action="" method="post">
                <?php echo einheitsForm(); ?>
                <input type="submit" value="Einheit Hinzufügen" id="einheitHinzufuegenButton">
            </form>

        <h3>Vorhandene Einheiten</h3>
        <table>
            <thead>
                    <tr>
                        <th>Name</th>
                        <th>Umrechnungsfaktor</th>
                        <th>Basis Einheit ID</th>
                        <th>hat_spezifischen_umrechnungsfaktor</th>
                    </tr>
                </thead>
            <tbody>
                <?php 
                for ($i = 0; $i < $loops; $i++) {
                    $offset = $i * $batchSize;
                    $sql = "SELECT id, name, umrechnungsfaktor_zu_basis, basis_einheit_id, hat_spezifischen_umrechnungsfaktor FROM einheiten ORDER BY name ASC LIMIT $offset, $batchSize";
                    $result = $conn->query($sql);

                    while ($row = $result->fetch_assoc()) {
                        // Ausgabe jedes Datensatzes
                        echo "<tr>";
                        echo "<td>" . htmlspecialchars($row['name']) . "</td>";
                        echo "<td>" . htmlspecialchars($row['umrechnungsfaktor_zu_basis']) . "</td>";
                        echo "<td>" . (is_null($row['basis_einheit_id']) ? 'NULL' : htmlspecialchars($row['basis_einheit_id'])) . "</td>";
                        echo "<td>" . (htmlspecialchars($row['hat_spezifischen_umrechnungsfaktor']) ? 'ja' : 'Nein') . "</td>";
                        echo "</tr>";
                    }
                }
                ?>
            </tbody>
        </table>

    </main>
    
    <?php include '../templates/footer.php'; ?>
</body>
</html>


Path: ./http/Views\pages\einkaufsliste.php
Content:
<?php 
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];

$heute = date("Y-m-d");
$sql = "SELECT e.id, zn.name, e.menge, e.verbrauchsdatum, k.name AS kategorie, k.id AS kategorie_id
        FROM einkaufsliste e
        JOIN zutaten z ON e.zutat_id = z.id
        JOIN zutaten_namen zn ON z.id = zn.zutat_id
        JOIN kategorien k ON z.kategorie_id = k.id
        WHERE e.user_id = ? AND (e.verbrauchsdatum IS NULL OR e.verbrauchsdatum <= DATE_ADD(CURDATE(), INTERVAL z.uebliche_haltbarkeit DAY))
        ORDER BY e.verbrauchsdatum ASC, k.id ASC;";


$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();

$einkaufsliste = [];
while ($row = $result->fetch_assoc()) {
    $einkaufsliste[] = [
        'name' => $row['name'],
        'menge' => $row['menge'],
        'verbrauchsdatum' => $row['verbrauchsdatum'],
        'kategorie' => $row['kategorie'],
        'id' => $row['id']
    ];
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Einkaufsliste</title>
</head>
<body>
    <header>
        <h1>main navigator page</h1>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Einkaufsliste</h2>
        <table>
            <tr>
                <th>Name</th>
                <th>Menge</th>
                <th>Geplantes Datum</th>
                <th>kategorie</th>
                <th>Aktion</th>
            </tr>
            <?php foreach ($einkaufsliste as $item): ?>
            <tr>
                <td><?= htmlspecialchars($item['name']) ?></td>
                <td><?= htmlspecialchars($item['menge']) ?></td>
                <td>
                    <?php if ($item['verbrauchsdatum']): ?>
                        <a href="rezept_detail.php?datum=<?= urlencode($item['verbrauchsdatum']) ?>">
                            <?= htmlspecialchars($item['verbrauchsdatum']) ?>
                        </a>
                    <?php else: ?>
                        <form method="post" action="/Controllers/RemoveFromEinkaufsliste.php">
                            <input type="hidden" name="id" value="<?= $item['id'] ?>">
                            <button type="submit">Entfernen</button>
                        </form>
                    <?php endif; ?>
                </td>
                
                <td><?= htmlspecialchars($item['kategorie']) ?></td>
                <td>
                    <form method="post" action="/Controllers/MoveToPantry.php">
                        <input type="hidden" name="id" value="<?= $item['id'] ?>">
                        <button type="submit">In Vorratsschrank verschieben</button>
                    </form>
                </td>
            </tr>
            <?php endforeach; ?>
        </table>

        <h3>Neuen Eintrag hinzufügen</h3>
        <form method="post" action="/Controllers/AddToEinkaufsliste.php">
            <input type="text" name="zutatenName" placeholder="Zutatenname" required>
            <input type="text" name="menge" placeholder="Menge" required>
            <button type="submit">Zutat hinzufügen</button>
        </form>

    </main>
    <footer>
        <p>&copy; 2024 Transforamtions-Design</p>
    </footer>
</body>
</html>


Path: ./http/Views\pages\essensplan.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];
$today = date("Y-m-d");
$twoWeeksLater = date("Y-m-d", strtotime("+14 days"));

// Modified SQL query to include recipe title
$sql = "SELECT e.datum, e.anzahl_personen, COALESCE(r.titel, 'Nicht geplant') AS titel
        FROM essenplan e
        LEFT JOIN rezepte r ON e.rezept_id = r.id
        WHERE e.user_id = ? AND e.datum BETWEEN ? AND ?
        ORDER BY e.datum ASC";

$stmt = $conn->prepare($sql);
$stmt->bind_param("iss", $userId, $today, $twoWeeksLater);
$stmt->execute();
$result = $stmt->get_result();

$essenspläne = [];  
while ($row = $result->fetch_assoc()) {
    $essenspläne[$row['datum']] = [
        'anzahl_personen' => $row['anzahl_personen'],
        'rezept' => $row['titel']
    ];
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Essensplan</title>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Essensplan für die nächsten 14 Tage</h2>
        <ul>
            <?php
            $startDate = new DateTime($today);
            $endDate = new DateTime($twoWeeksLater);
            $endDate = $endDate->modify('+1 day'); // Inkludiert das Enddatum

            $datumRange = new DatePeriod($startDate, new DateInterval('P1D'), $endDate);

            foreach ($datumRange as $datum) {
                $formattedDatum = $datum->format("Y-m-d");
                if (array_key_exists($formattedDatum, $essenspläne)) {
                    $plan = $essenspläne[$formattedDatum];
                    $anzahlPersonen = $plan['anzahl_personen'];
                    $rezeptTitel = $plan['rezept'];
                } else {
                    $anzahlPersonen = "Unbekannt";
                    $rezeptTitel = "Nicht geplant";
                }
                $link = "rezept_detail.php?datum=" . urlencode($formattedDatum);
                echo "<li><a href='" . htmlspecialchars($link) . "'>" . htmlspecialchars($formattedDatum) . ": " . htmlspecialchars($anzahlPersonen) . " Personen - " . htmlspecialchars($rezeptTitel) . "</a></li>";
            }
            ?>
        </ul>
    </main>
    <footer>
        <p>&copy; 2024 Transforamtions-Design</p>
    </footer>
</body>
</html>


Path: ./http/Views\pages\freunde.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];

if (isset($_SESSION['is_temp_user'])) {
    echo "Die Freunde-Seite ist für temporäre Profile nicht verfügbar.";
    exit; // Stoppt die Ausführung weiteren Codes
}
$eigenerToken = "";

// Hole den eigenen Freundes-Token
$sqlEigen = "SELECT freundes_token FROM users WHERE id = ?";
$stmtEigen = $conn->prepare($sqlEigen);
$stmtEigen->bind_param("i", $userId);
$stmtEigen->execute();
$resultEigen = $stmtEigen->get_result();
if ($eigenRow = $resultEigen->fetch_assoc()) {
    $eigenerToken = $eigenRow['freundes_token'];
}

// Generiere den Einladungslink und den QR-Code mit dem eigenen Token
$einladungsLink = "https://noadscollective.de/Views/pages/freunde.php?token=" . $eigenerToken;

// Überprüfe, ob ein Token-Parameter gesetzt und nicht der eigene Token ist
if (isset($_GET['token']) && $_GET['token'] !== $eigenerToken) {
    $freundesToken = $_GET['token'];

    // Finde den Benutzer mit dem gegebenen Freundes-Token
    $userSql = "SELECT id FROM users WHERE freundes_token = ?";
    $userStmt = $conn->prepare($userSql);
    $userStmt->bind_param("s", $freundesToken);
    $userStmt->execute();
    $userResult = $userStmt->get_result();

    if ($userResult->num_rows === 1) {
        $freund = $userResult->fetch_assoc();
        $freundId = $freund['id'];

        // Füge den Freund hinzu, wenn noch keine Beziehung besteht
        $checkSql = "SELECT id FROM freunde WHERE (user_id_1 = ? AND user_id_2 = ?) OR (user_id_1 = ? AND user_id_2 = ?)";
        $checkStmt = $conn->prepare($checkSql);
        $checkStmt->bind_param("iiii", $userId, $freundId, $freundId, $userId);
        $checkStmt->execute();
        $checkResult = $checkStmt->get_result();

        if ($checkResult->num_rows === 0) {
            $insertFreundeSql = "INSERT INTO freunde (user_id_1, user_id_2) VALUES (?, ?), (?, ?)";
            $insertFreundeStmt = $conn->prepare($insertFreundeSql);
            $insertFreundeStmt->bind_param("iiii", $userId, $freundId, $freundId, $userId);
            $insertFreundeStmt->execute();
            echo "Freundschaft erfolgreich hinzugefügt.";
        } else {
            echo "Ihr seid bereits Freunde.";
        }
    } else {
        echo "Ungültiger Freundes-Token.";
    }
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Freunde einladen</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script> <!-- QR Code JS Bibliothek -->
    <script>
        // Funktion zum Kopieren des Einladungslinks in die Zwischenablage
        function kopiereLink() {
            // Erstelle ein temporäres Input-Element
            var tempInput = document.createElement("input");
            tempInput.value = "Melde dich auf der Webseite an, dann können wir zusammen kochen  " + "<?= $einladungsLink; ?>"; // Setze den Einladungslink als Wert
            document.body.appendChild(tempInput); // Füge das Input-Element zum DOM hinzu
            tempInput.select(); // Wähle den Text im Input-Element aus
            document.execCommand("copy"); // Kopiere den ausgewählten Text in die Zwischenablage
            document.body.removeChild(tempInput); // Entferne das temporäre Input-Element
        }
    </script>
</head>
<body>
    
    <?php include '../templates/navigation.php'; ?>
    <h2>Freunde einladen</h2>
    <p>Teile diesen Link, um einen Freund einzuladen:</p>
    <button onclick="kopiereLink()">link kopieren</button>
    <div id="qrcode" style="margin-top: 20px;"></div>
    <script>
        new QRCode(document.getElementById("qrcode"), "<?= $einladungsLink; ?>");
    </script>
</body>
</html>


Path: ./http/Views\pages\gefaessVerwaltung.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];

// Hier kann Logik zur Verwaltung der Gefäße implementiert werden

?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Gefäßverwaltung</title>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Gefäßverwaltung</h2>
            <form id="gefaessForm" method="post">
                <label for="gefaessName">Name:</label>
                <input type="text" id="gefaessName" name="gefaessName" required>
                
                <label for="volumen">Volumen (in Litern oder Kilogramm):</label>
                <input type="number" id="volumen" name="volumen" step="0.01" required>
                
                <label for="beschreibung">Beschreibung (optional):</label>
                <textarea id="beschreibung" name="beschreibung"></textarea>
                
                <input type="hidden" id="gefaessId" name="gefaessId">
                <button type="submit">Speichern</button>
            </form>
            <div id="gefaessListe"></div>
    </main>
</body>
</html>


Path: ./http/Views\pages\heutiges-gericht.php
Content:
<?php
$today = date("Y-m-d");
header("Location: rezept_detail.php?datum=" . urlencode($today));
?>

Path: ./http/Views\pages\passwort_aendern.php
Content:
<?php
require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

// Passwort-Änderungslogik wird hier behandelt

?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Passwort ändern</title>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Passwort ändern</h2>
        <form action="/Controllers/passwort_aendern_handler.php" method="post">
            <label for="currentPassword">Aktuelles Passwort:</label>
            <input type="password" id="currentPassword" name="currentPassword" required>
            <label for="newPassword">Neues Passwort:</label>
            <input type="password" id="newPassword" name="newPassword" required>
            <button type="submit">Ändern</button>
        </form>
    </main>
    <footer>
        <p>&copy; 2024 Transforamtions-Design</p>
    </footer>
</body>
</html>


Path: ./http/Views\pages\profil.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Profil</title>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Profil</h2>
        <div>
            <?php if (isset($_SESSION['is_temp_user'])): ?>
                <p>Dies ist ein temporäres Profil. <a href="register.html">Registrieren</a> Sie sich, um Ihre Daten zu speichern und auf alle Funktionen zugreifen zu können.</p>
            <?php endif; ?>
            <button onclick="location.href='passwort_aendern.php'">Passwort ändern</button>
            <button onclick="location.href='/http/Controllers/logout.php'">Ausloggen</button>
            <!-- Weitere Profilaktionen hier hinzufügen -->
        </div>
    </main>
    <footer>
        <p>&copy; 2024 Transforamtions-Design</p>
    </footer>
</body>
</html>


Path: ./http/Views\pages\rezeptsuche.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];

if ($_SERVER['REQUEST_METHOD'] == 'GET') {
    $searchCriteria = prepareSearchCriteria($_GET);
    $sqlQuery = buildSqlQuery($searchCriteria, $userId);
    $recipes = executeSearch($sqlQuery, $userId);
    displayRecipes($recipes);
} else{
    displaySearchForm();
}
function prepareSearchCriteria($getData) {
    return [
        'saisonalitaet' => isset($getData['saisonalitaet']),
        'unverplanteLebensmittel' => isset($getData['unverplanteLebensmittel']),
        'allergien' => $getData['allergien'] ?? '',
        'planetaryHealthDiet' => isset($getData['planetaryHealthDiet']),
        'suchbegriff' => $getData['suchbegriff'] ?? '',
        'sollEnthalten' => $getData['sollEnthalten'] ?? '',
    ];
}

function buildSqlQuery($criteria, $userId) {
    global $conn;
    $sqlBase = "SELECT r.*,";
    $sqlRelevanzFelder = ", (0"; // Start der gesamtrelevanz Berechnung
    $sqlEnd = " FROM rezepte r WHERE 1=1";
    $params = [];

    // Saisonalitätskriterium
    $sql_saisonalitaet = "";
    if ($criteria['saisonalitaet']) {
        $sqlRelevanzFelder .= " + CASE WHEN EXISTS (
            SELECT 1 FROM zutaten_saisonalitaet zs
            JOIN rezept_zutaten rz ON zs.zutat_id = rz.zutat_id
            WHERE rz.rezept_id = r.id
            AND CURRENT_DATE BETWEEN zs.saison_start AND zs.saison_ende
          ) THEN 1 ELSE 0 END";
        $sql_saisonalitaet = ", CASE WHEN EXISTS (
            SELECT 1 FROM zutaten_saisonalitaet zs
            JOIN rezept_zutaten rz ON zs.zutat_id = rz.zutat_id
            WHERE rz.rezept_id = r.id
            AND CURRENT_DATE BETWEEN zs.saison_start AND zs.saison_ende
          ) THEN 1 ELSE 0 END AS relevanz_saisonalitaet";
    }
    $sql_unverplanteLebensmittel = "";
    if ($criteria['unverplanteLebensmittel']) {
        echo "debug: 1"; // Debug-Statement 1
        // Schritt 1: Ermittle alle Lebensmittel im Vorratsschrank des Benutzers, die noch nicht in einem geplanten Essen verwendet werden.
        $vorratsQuery = "SELECT vs.zutat_id FROM vorratsschrank vs
                        WHERE vs.user_id = ?
                        AND vs.zutat_id NOT IN (
                            SELECT rz.zutat_id FROM essenplan e
                            JOIN rezept_zutaten rz ON e.rezept_id = rz.rezept_id
                            WHERE e.user_id = ? AND e.datum BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY)
                        )";
        $vorratsStmt = $conn->prepare($vorratsQuery);
        $vorratsStmt->bind_param("ii", $userId, $userId);
        
        $vorratsStmt->execute();
        $vorratsResult = $vorratsStmt->get_result();
        $unverplanteZutaten = [];
        while ($row = $vorratsResult->fetch_assoc()) {
            $unverplanteZutaten[] = $row['zutat_id'];
        }
        echo "debug: Unverplante Zutaten: "; // Debug-Statement 2
        print_r($unverplanteZutaten);

        if (!empty($unverplanteZutaten)) {
            $placeholders = implode(',', array_fill(0, count($unverplanteZutaten), '?')); // Erstellt eine kommagetrennte Liste von Platzhaltern
            // Bereite das dynamische SQL-Teil vor
            $sql_unverplanteLebensmittel = " + CASE WHEN r.id IN (
                        SELECT DISTINCT rz.rezept_id FROM rezept_zutaten rz
                        WHERE rz.zutat_id IN ($placeholders)
                    ) THEN 1 ELSE 0 END";
            // Füge die IDs der unverplanten Zutaten den Parametern für das Prepared Statement hinzu
            foreach ($unverplanteZutaten as $zutatId) {
                $params[] = $zutatId;
            }
        }
    }

    $sql_phdPriorisierung = "";
    if ($criteria['planetaryHealthDiet']){
        // Pseudo-Code, um die Logik darzustellen
        $phdDifferenz = berechnePhdDifferenz($userId); // Funktion, die Differenzen für jede Kategorie berechnet

        foreach ($phdDifferenz as $kategorieId => $differenz) {
            if ($differenz < 0) { // Zu wenig konsumiert
                $sql_phdPriorisierung .= " + CASE WHEN EXISTS (
                    SELECT 1 FROM rezept_zutaten rz
                    JOIN zutaten z ON rz.zutat_id = z.id
                    WHERE rz.rezept_id = r.id AND z.phd_kategorie_id = $kategorieId
                ) THEN ".abs($differenz)." ELSE 0 END";
            }
        }
    }         
    /*if (!empty($suchbegriff)) {
    }

    if (!empty($sollEnthalten)) {
        // Logik zur Berücksichtigung spezifischer Zutaten (benötigt spezifische Implementierung)
    }*/
    $sqlRelevanzFelder .= ") AS gesamtrelevanz"; // Ende der gesamtrelevanz Berechnung

    // Zusammenbau des finalen SQL-Queries
    $sql = $sqlBase . $sql_saisonalitaet . $sql_unverplanteLebensmittel . $sqlRelevanzFelder . $sqlEnd . " ORDER BY gesamtrelevanz DESC";
    echo $sql; // Debug: Print the final SQL query

    return ['query' => $sql, 'params' => $params];
}
function berechnePhdDifferenz($userId) {
    global $conn;
     // Ermittle die Anzahl der Tage in den letzten 30 Tagen, an denen der Benutzer Essen konsumiert hat
    $sqlTageMitKonsum = "SELECT COUNT(DISTINCT datum) AS tage_mit_konsum
                         FROM essenplan
                         WHERE user_id = ? AND datum BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE()";
    $stmtTageMitKonsum = $conn->prepare($sqlTageMitKonsum);
    $stmtTageMitKonsum->bind_param("i", $userId);
    $stmtTageMitKonsum->execute();
    $resultTageMitKonsum = $stmtTageMitKonsum->get_result();
    $rowTageMitKonsum = $resultTageMitKonsum->fetch_assoc();
    $tageMitKonsum = $rowTageMitKonsum['tage_mit_konsum'];

    // Berechne die Anzahl der Tage ohne Konsum
    $tageOhneKonsum = 30 - $tageMitKonsum;
    // SQL-Abfrage, um die Gesamtaufnahme pro PHD-Kategorie in den letzten 30 Tagen zu ermitteln
    $sql = "SELECT z.phd_kategorie_id, SUM(rz.menge) AS gesamt_menge
            FROM essenplan e
            JOIN rezept_zutaten rz ON e.rezept_id = rz.rezept_id
            JOIN zutaten z ON rz.zutat_id = z.id
            WHERE e.user_id = ? AND e.datum BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE()
            GROUP BY z.phd_kategorie_id";

    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $result = $stmt->get_result();

    $tatsaechlicheAufnahme = [];
    while ($row = $result->fetch_assoc()) {
        $tatsaechlicheAufnahme[$row['phd_kategorie_id']] = $row['gesamt_menge'];
    }

    // Hole die idealen Mengen für jede PHD-Kategorie
    $idealeMengen = getIdealePhdMengen(); // Diese Funktion müsste die idealen Mengen aus der Datenbank oder einem Array zurückgeben

    $differenzen = [];
    foreach ($idealeMengen as $kategorieId => $idealeMenge) {
        $tatsaechlich = $tatsaechlicheAufnahme[$kategorieId] ?? 0;
        // Berücksichtige die ideale Menge für Tage ohne Konsum
        $tatsaechlich += $tageOhneKonsum * $idealeMenge;
        $differenz = $tatsaechlich - ($idealeMenge * 30); // Umwandlung der Tagesmenge in eine 30-Tage-Menge
        $differenzen[$kategorieId] = $differenz;
    }

    return $differenzen;
}
function getIdealePhdMengen() {
    global $conn;
    $sql = "SELECT ID, Taegliche_Menge_g FROM Planetary_Health_Diet_Categories";
    $result = $conn->query($sql);

    $idealeMengen = [];
    while ($row = $result->fetch_assoc()) {
        $idealeMengen[$row['ID']] = $row['Taegliche_Menge_g'];
    }

    return $idealeMengen;
}
function executeSearch($sqlQueryDetails, $userId) {
    global $conn;
    $stmt = $conn->prepare($sqlQueryDetails['query']);
    // Assuming all parameters are integers, adjust as necessary
    if (!empty($sqlQueryDetails['params'])) {
        echo $sqlQueryDetails['query']; // To see the final query
        print_r($sqlQueryDetails['params']); // To verify parameters
        $types = str_repeat("i", count($sqlQueryDetails['params']));
        $stmt->bind_param($types, ...$sqlQueryDetails['params']);
    }
    $stmt->execute();
    $result = $stmt->get_result();
    $recipes = [];
    while ($row = $result->fetch_assoc()) {
        $recipes[] = $row;
    }
    return $recipes;
}
function displayRecipes($rezepte) {
?>
    <!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Rezeptsuche</title>
</head>
<body>
    <?php include '../templates/navigation.php'; ?>

    <main>
        <h2>Rezeptsuche</h2>
        <form action="rezeptsuche.php" method="get">
            <label for="saisonalitaet">Berücksichtige Saisonalität (noch keine Saisonalität tabelle):</label>
            <input type="checkbox" id="saisonalitaet" name="saisonalitaet" <?php echo (isset($_GET['saisonalitaet']) ? 'checked' : ''); ?>><br>

            <label for="unverplanteLebensmittel">Berücksichtige unverplante Lebensmittel(working):</label>
            <input type="checkbox" id="unverplanteLebensmittel" name="unverplanteLebensmittel" <?php echo (isset($_GET['unverplanteLebensmittel']) ? 'checked' : ''); ?>><br>

            <label for="allergien">Berücksichtige Allergien(Not implemntet jet):</label>
            <input type="text" id="allergien" name="allergien" placeholder="z.B. Nüsse, Gluten" value="<?php echo htmlspecialchars($_GET['allergien'] ?? ''); ?>"><br>

            <label for="planetaryHealthDiet">Berücksichtige Planetary Health Diet(Not implemntet jet):</label>
            <input type="checkbox" id="planetaryHealthDiet" name="planetaryHealthDiet" <?php echo (isset($_GET['planetaryHealthDiet']) ? 'checked' : ''); ?>><br>

            <label for="suchbegriff">Suchbegriff(mehr schelcht asl recht, aber es läuft):</label>
            <input type="text" id="suchbegriff" name="suchbegriff" placeholder="Suchbegriff eingeben" value="<?php echo htmlspecialchars($_GET['suchbegriff'] ?? ''); ?>"><br>

            <label for="sollEnthalten">Soll enthalten(Not implemntet jet):</label>
            <input type="text" id="sollEnthalten" name="sollEnthalten" placeholder="Zutat" value="<?php echo htmlspecialchars($_GET['sollEnthalten'] ?? ''); ?>"><br>

            <button type="submit">Suchen</button>
        </form>

    </main>
    <main>
        <h2>Suchergebnisse</h2>
        <?php if (!empty($rezepte)): ?>
            <ul>
                <?php foreach ($rezepte as $rezept): ?>
                    <li>
                        <h3><?= htmlspecialchars($rezept['titel']) ?></h3>
                        <p><?= htmlspecialchars($rezept['beschreibung']) ?></p>
                        <p>Relevanz: <?= htmlspecialchars($rezept['gesamtrelevanz']) ?></p>
                        <ul>
                            <li>Saisonalität: <?= isset($rezept['relevanz_saisonalitaet']) ? htmlspecialchars($rezept['relevanz_saisonalitaet']) : '0' ?></li>
                            <!-- Weitere Relevanzkriterien hier anzeigen -->
                        </ul>
                    </li>
                <?php endforeach; ?>
            </ul>
        <?php else: ?>
            <p>Keine Rezepte gefunden.</p>
        <?php endif; ?>
    </main>
</body>
</html>
<?php
}
function displaySearchForm() {
?>
    <!DOCTYPE html>
    <html lang="de">
    <head>
        <?php include '../templates/header.php'; ?>
        <title>Rezeptsuche</title>
    </head>
    <body>
        <?php include '../templates/navigation.php'; ?>

        <main>
            <h2>Rezeptsuche</h2>
            <form action="rezeptsuche.php" method="get">
            <label for="saisonalitaet">Berücksichtige Saisonalität (noch keine Saisonalität tabelle):</label>
            <input type="checkbox" id="saisonalitaet" name="saisonalitaet"><br>

            <label for="unverplanteLebensmittel">Berücksichtige unverplante Lebensmittel(working):</label>
            <input type="checkbox" id="unverplanteLebensmittel" name="unverplanteLebensmittel"><br>

            <label for="allergien">Berücksichtige Allergien(Not implemntet jet):</label>
            <input type="text" id="allergien" name="allergien" placeholder="z.B. Nüsse, Gluten"><br>

            <label for="planetaryHealthDiet">Berücksichtige Planetary Health Diet(Not implemntet jet):</label>
            <input type="checkbox" id="planetaryHealthDiet" name="planetaryHealthDiet"><br>

            <label for="suchbegriff">Suchbegriff(mehr schelcht asl recht, aber es läuft):</label>
            <input type="text" id="suchbegriff" name="suchbegriff" placeholder="Suchbegriff eingeben"><br>

            <label for="sollEnthalten">Soll enthalten(Not implemntet jet):</label>
            <input type="text" id="sollEnthalten" name="sollEnthalten" placeholder="Zutat"><br>

            <button type="submit">Suchen</button>
        </form>
        </main>

        <?php include '../templates/footer.php'; ?>
    </body>
    </html>
<?php
}
?>

Path: ./http/Views\pages\rezept_detail.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];
$datum = $_GET['datum'] ?? date("Y-m-d");
$rezept = null;
$zufallsRezepte = [];

// Versuche, ein Rezept für das gewählte Datum zu finden
$sql = "SELECT r.titel, r.beschreibung, e.rezept_id FROM essenplan e JOIN rezepte r ON e.rezept_id = r.id WHERE e.user_id = ? AND e.datum = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("is", $userId, $datum);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows > 0) {
    $rezept = $result->fetch_assoc();
} else {
    // Kein Rezept gefunden, hole drei zufällige Rezepte
    $zufallsRezepteSql = "SELECT id, titel FROM rezepte ORDER BY RAND() LIMIT 3";
    $resultZufallsRezepte = $conn->query($zufallsRezepteSql);
    while ($rezeptZufall = $resultZufallsRezepte->fetch_assoc()) {
        $zufallsRezepte[] = $rezeptZufall;
    }
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Rezept Details</title>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <?php if ($rezept): ?>
            <h2><?= htmlspecialchars($rezept['titel']); ?></h2>
            <!-- Vor dem Kochen -->
            <section>
                <h3>Vor dem Kochen</h3>
                <?php
                    $sqlAnzahlPersonen = "SELECT anzahl_personen FROM essenplan WHERE user_id = $userId AND datum = '$datum'";
                    $resultAnzahlPersonen = $conn->query($sqlAnzahlPersonen);
                    $rowAnzahlPersonen = $resultAnzahlPersonen->fetch_assoc();
                    $anzahlPersonen = $rowAnzahlPersonen['anzahl_personen'];

                    // Prepare the SQL statement with placeholders
                    $sqlZutaten = "SELECT zn.name, rz.menge, e.name AS einheit, 
                                        CASE 
                                            WHEN vs.id IS NULL THEN 'Einkaufen'
                                            WHEN DATE_ADD(vs.verbrauchsdatum, INTERVAL z.uebliche_haltbarkeit DAY) < CURDATE() THEN 'Abgelaufen'
                                            WHEN DATE_ADD(vs.verbrauchsdatum, INTERVAL z.uebliche_haltbarkeit DAY) >= CURDATE() THEN 'Im Vorratsschrank'
                                            ELSE 'Nichts'
                                        END AS status 
                                    FROM rezept_zutaten rz 
                                    JOIN zutaten_namen zn ON rz.zutat_id = zn.zutat_id 
                                    JOIN zutaten z ON zn.zutat_id = z.id
                                    LEFT JOIN einheiten e ON z.einkaufseinheit_id = e.id 
                                    LEFT JOIN vorratsschrank vs ON zn.zutat_id = vs.zutat_id AND vs.user_id = ? 
                                    WHERE rz.rezept_id = ?";

                    // Prepare the statement
                    $stmt = $conn->prepare($sqlZutaten);

                    // Bind parameters to the prepared statement
                    $stmt->bind_param("ii", $userId, $rezept['rezept_id']); // "ii" means both parameters are integers

                    // Execute the prepared statement
                    $stmt->execute();

                    // Get the result of the query
                    $resultZutaten = $stmt->get_result();

                    // Check if there are results
                    if ($resultZutaten->num_rows > 0) {
                    echo "<p>Zutatenliste und Verfügbarkeit:</p>";
                    echo "<ul>";
                    while ($zutat = $resultZutaten->fetch_assoc()) {
                    // Correctly concatenate and escape output to prevent XSS
                    echo "<li>" . htmlspecialchars($zutat['name']) . " - " . htmlspecialchars($zutat['menge']) . " " . htmlspecialchars($zutat['einheit']) . " (" . htmlspecialchars($zutat['status']) . ")</li>";
                    }
                    echo "</ul>";
                    } else {
                    echo "Keine Zutaten gefunden.";
                    }

                    // Close the statement
                    $stmt->close();
                ?>
                <form action="updatePersonenanzahl.php" method="post">
                    <input type="hidden" name="datum" value="<?= htmlspecialchars($datum); ?>">
                    <label for="anzahlPersonen">Anzahl Personen:</label>
                    <input type="number" id="anzahlPersonen" name="anzahlPersonen" value="<?= $anzahlPersonen; ?>" min="1">
                    <button type="submit">Aktualisieren</button>
                </form>

            </section>

            <!-- Während des Kochens -->
            <section>
                <h3>Während des Kochens</h3>
                <p>... Kochanweisungen und Details ...</p>
            </section>

            <!-- Nach dem Essen -->
            <section>
                <h3>Nach dem Essen</h3>
                <p>Reflektion und Planung:</p>
                <ul>
                    <li><a href="#">Wie hat es geschmeckt?(noch nicht implementiert)</a></li>
                    <li><a href="#">Noch Hunger?(noch nicht implementiert)</a></li>
                    <li><a href="#">Gibt es Reste?(noch nicht implementiert)</a>
                        <ul>
                            <li><a href="#">Für morgen aufheben(noch nicht implementiert)</a></li>
                            <li><a href="#">Dem Nachbarn geben(noch nicht implementiert)</a></li>
                        </ul>
                    </li>
                </ul>
            </section>
        <?php else: ?>
            <h2>Kein Rezept für das gewählte Datum gefunden</h2>
            <?php if (!empty($zufallsRezepte)): ?>
                <h3>Vielleicht interessieren Sie sich für:</h3>
                <ul>
                    <?php foreach ($zufallsRezepte as $rezeptZufall): ?>
                        <li><a href='rezept_detail.php?rezeptId=<?= $rezeptZufall['id'] ?>'><?= htmlspecialchars($rezeptZufall['titel']) ?></a></li>
                        <form action="/Controllers/PlanRecipe.php" method="post">
                            <input type="hidden" name="rezept_id" value="<?= $rezeptZufall['id'] ?>">
                            <input type="hidden" name="datum" value="<?= $datum ?>">
                            <button type="submit"> asuwahl</button>
                        </form>
                    <?php endforeach; ?>
                </ul>
            <?php endif; ?>
            <div>
                <a href='rezeptsuche.php'>Rezept suchen</a> | <a href='rezept_hinzufuegen.php'>Rezept hinzufügen</a>
            </div>
        <?php endif; ?>
    </main>
    <footer>
        <p>&copy; 2024 Transformations-Design</p>
    </footer>
</body>
</html>


Path: ./http/Views\pages\rezept_hinzufuegen.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];
$datum = $_GET['datum'] ?? date("Y-m-d");
$rezept = null;
$zufallsRezepte = [];

// Versuche, ein Rezept für das gewählte Datum zu finden
$sql = "SELECT r.titel, r.beschreibung, e.rezept_id FROM essenplan e JOIN rezepte r ON e.rezept_id = r.id WHERE e.user_id = ? AND e.datum = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("is", $userId, $datum);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows > 0) {
    $rezept = $result->fetch_assoc();
} else {
    // Kein Rezept gefunden, lege ein leeres Rezept an
    $leeresRezeptSql = "INSERT INTO rezepte (titel, beschreibung) VALUES ('Neues Rezept', '')";
    if ($conn->query($leeresRezeptSql) === TRUE) {
        $neueRezeptId = $conn->insert_id;
        
        // Füge das leere Rezept in den Essenplan ein
        $essenplanSql = "INSERT INTO essenplan (user_id, rezept_id, datum) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($essenplanSql);
        $stmt->bind_param("iis", $userId, $neueRezeptId, $datum);
        $stmt->execute();
        
        // Setze $rezept auf das neue, leere Rezept
        $rezept = ['titel' => 'Neues Rezept', 'beschreibung' => '', 'rezept_id' => $neueRezeptId];
    } else {
        echo "Fehler: " . $conn->error;
    }
}

// Update des Titels
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['titel'], $_POST['rezeptId'])) {
    $neuerTitel = trim($_POST['titel']);
    $rezeptId = $_POST['rezeptId'];
    $updateSql = "UPDATE rezepte SET titel = ? WHERE id = ?";
    $updateStmt = $conn->prepare($updateSql);
    $updateStmt->bind_param("si", $neuerTitel, $rezeptId);
    $updateStmt->execute();
    // Umleitung, um die Seite zu aktualisieren und den neuen Titel anzuzeigen
    header("Location: ".$_SERVER['PHP_SELF']."?datum=".$datum);
    exit;
}

?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Rezept Details</title>
    <script>
        // JavaScript-Funktion zum Bearbeiten des Titels
        function bearbeiteTitel(element) {
            var aktuellerText = element.innerHTML;
            element.innerHTML = '<input type="text" onblur="speichereTitel(this)" value="' + aktuellerText + '">';
            element.firstChild.focus();
        }

        function speichereTitel(inputElement) {
            var neuerTitel = inputElement.value;
            var form = document.createElement('form');
            form.method = 'POST';
            form.style.display = 'none';

            var titelInput = document.createElement('input');
            titelInput.type = 'hidden';
            titelInput.name = 'titel';
            titelInput.value = neuerTitel;

            var rezeptIdInput = document.createElement('input');
            rezeptIdInput.type = 'hidden';
            rezeptIdInput.name = 'rezeptId';
            rezeptIdInput.value = '<?= $rezept ? $rezept['rezept_id'] : ''; ?>';

            form.appendChild(titelInput);
            form.appendChild(rezeptIdInput);

            document.body.appendChild(form);
            form.submit();
        }
    </script>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <?php if ($rezept): ?>
            <h2><?= htmlspecialchars($rezept['titel']); ?></h2>
            <!-- Vor dem Kochen -->
            <section>   
                <h3>Vor dem Kochen</h3>
                <?php
                    $sqlAnzahlPersonen = "SELECT anzahl_personen FROM essenplan WHERE user_id = $userId AND datum = '$datum'";
                    $resultAnzahlPersonen = $conn->query($sqlAnzahlPersonen);
                    $rowAnzahlPersonen = $resultAnzahlPersonen->fetch_assoc();
                    $anzahlPersonen = $rowAnzahlPersonen['anzahl_personen'];

                    // Prepare the SQL statement with placeholders
                    $sqlZutaten = "SELECT zn.name, rz.menge, e.name AS einheit, 
                                        CASE 
                                            WHEN vs.id IS NULL THEN 'Einkaufen'
                                            WHEN DATE_ADD(vs.verbrauchsdatum, INTERVAL z.uebliche_haltbarkeit DAY) < CURDATE() THEN 'Abgelaufen'
                                            WHEN DATE_ADD(vs.verbrauchsdatum, INTERVAL z.uebliche_haltbarkeit DAY) >= CURDATE() THEN 'Im Vorratsschrank'
                                            ELSE 'Nichts'
                                        END AS status 
                                    FROM rezept_zutaten rz 
                                    JOIN zutaten_namen zn ON rz.zutat_id = zn.zutat_id 
                                    JOIN zutaten z ON zn.zutat_id = z.id
                                    LEFT JOIN einheiten e ON z.einkaufseinheit_id = e.id 
                                    LEFT JOIN vorratsschrank vs ON zn.zutat_id = vs.zutat_id AND vs.user_id = ? 
                                    WHERE rz.rezept_id = ?";


                    // Prepare the statement
                    $stmt = $conn->prepare($sqlZutaten);

                    // Bind parameters to the prepared statement
                    $stmt->bind_param("ii", $userId, $rezept['rezept_id']); // "ii" means both parameters are integers

                    // Execute the prepared statement
                    $stmt->execute();

                    // Get the result of the query
                    $resultZutaten = $stmt->get_result();

                    // Check if there are results
                    if ($resultZutaten->num_rows > 0) {
                    echo "<p>Zutatenliste und Verfügbarkeit:</p>";
                    echo "<ul>";
                    while ($zutat = $resultZutaten->fetch_assoc()) {
                    // Correctly concatenate and escape output to prevent XSS
                    echo "<li>" . htmlspecialchars($zutat['name']) . " - " . htmlspecialchars($zutat['menge']) . " " . htmlspecialchars($zutat['einheit']) . " (" . htmlspecialchars($zutat['status']) . ")</li>";
                    }
                    echo "</ul>";
                    } else {
                    echo "Keine Zutaten gefunden.";
                    }

                    // Close the statement
                    $stmt->close();
                ?>
                <form action="updatePersonenanzahl.php" method="post">
                    <input type="hidden" name="datum" value="<?= htmlspecialchars($datum); ?>">
                    <label for="anzahlPersonen">Anzahl Personen:</label>
                    <input type="number" id="anzahlPersonen" name="anzahlPersonen" value="<?= $anzahlPersonen; ?>" min="1">
                    <button type="submit">Aktualisieren</button>
                </form>

            </section>

            <!-- Während des Kochens -->
            <section>
                <h3>Während des Kochens</h3>
                <p>... Kochanweisungen und Details ...</p>
            </section>

            <!-- Nach dem Essen -->
            <section>
                <h3>Nach dem Essen</h3>
                <p>Reflektion und Planung:</p>
                <ul>
                    <li><a href="#">Wie hat es geschmeckt?(noch nicht implementiert)</a></li>
                    <li><a href="#">Noch Hunger?(noch nicht implementiert)</a></li>
                    <li><a href="#">Gibt es Reste?(noch nicht implementiert)</a>
                        <ul>
                            <li><a href="#">Für morgen aufheben(noch nicht implementiert)</a></li>
                            <li><a href="#">Dem Nachbarn geben(noch nicht implementiert)</a></li>
                        </ul>
                    </li>
                </ul>
            </section>
        <?php endif; ?>
    </main>
    <footer>
        <p>&copy; 2024 Transformations-Design</p>
    </footer>
</body>
</html>


Path: ./http/Views\pages\settings.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];
$aktuelleEinkaufsoption = '';

// Abfrage der aktuellen Einkaufsoption
$sql = "SELECT einkaufsoption FROM users WHERE id = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();
if ($row = $result->fetch_assoc()) {
    $aktuelleEinkaufsoption = $row['einkaufsoption'];
}

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['einkaufsOption'])) {
    $auswahl = $_POST['einkaufsOption'];

    // SQL-Anweisung zum Aktualisieren der Einkaufsoption des Benutzers
    $sql = "UPDATE users SET einkaufsoption = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("si", $auswahl, $userId);
    if ($stmt->execute()) {
        echo "<p>Ihre Auswahl wurde erfolgreich gespeichert.</p>";
    } else {
        echo "<p>Fehler beim Speichern Ihrer Auswahl.</p>";
    }
}
// Überprüfen, ob das Formular abgesendet wurde
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['anzahlPersonen'])) {
    $anzahlPersonen = intval($_POST['anzahlPersonen']);
    $userId = $_SESSION['userId']; // Stellen Sie sicher, dass der Benutzer eingeloggt ist und Sie die Benutzer-ID haben

    // Aktualisieren der Anzahl der Personen in der Datenbank
    // Hinweis: Sie müssen eine neue Spalte in der Tabelle `users` oder eine neue Einstellungstabelle erstellen, um diese Einstellung zu speichern, wenn Sie dies noch nicht getan haben
    $sql = "UPDATE users SET anzahl_personen_einstellung = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    if ($stmt->bind_param("ii", $anzahlPersonen, $userId)) {
        if (!$stmt->execute()) {
            echo "Fehler beim Aktualisieren der Anzahl der Personen.";
        }
    }
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Einstellungen</title>
</head>
<body>
    <?php include '../templates/navigation.php'; ?>

    <main>
        <h2>Einstellungen</h2>
        <h3>Anzahl der Personen für Rezepte</h3>
            <form action="settings.php" method="post">
                <label for="anzahlPersonen">Anzahl Personen:</label>
                <input type="number" id="anzahlPersonen" name="anzahlPersonen" min="1" value="2" required> <!-- Angenommener Standardwert -->
                <button type="submit">Speichern</button>
            </form>
        <h2>Einstlungen, die noch nichts tun :)</h2>
        <form action="settings.php" method="post">
            <label>Wählen Sie Ihre bevorzugte Einkaufsmethode:</label>
            <div>
                <input type="radio" id="perfekteMenge" name="einkaufsOption" value="perfekteMenge" <?php echo ($aktuelleEinkaufsoption == 'perfekteMenge') ? 'checked' : ''; ?>>
                <label for="perfekteMenge">Perfekte Menge verwenden</label>
            </div>
            <div>
                <input type="radio" id="ueblicheVerpackungsgroesse" name="einkaufsOption" value="ueblicheVerpackungsgroesse" <?php echo ($aktuelleEinkaufsoption == 'ueblicheVerpackungsgroesse') ? 'checked' : ''; ?>>
                <label for="ueblicheVerpackungsgroesse">Übliche Verpackungsgröße verwenden</label>
            </div>
            <div>
                <input type="radio" id="unverpackt" name="einkaufsOption" value="unverpackt" <?php echo ($aktuelleEinkaufsoption == 'unverpackt') ? 'checked' : ''; ?>>
                <label for="unverpackt">Unverpackt - Größe von Gefäßen berücksichtigen</label>
            </div>
            <button type="submit">Auswahl speichern</button>
        </form>
    </main>

    <?php include '../templates/footer.php'; ?>
</body>
</html>



Path: ./http/Views\pages\updatePersonenanzahl.php
Content:
<?php
require_once '.-/../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['anzahlPersonen'], $_POST['datum'])) {
    $anzahlPersonen = $_POST['anzahlPersonen'];
    $datum = $_POST['datum'];
    $userId = $_SESSION['userId'];

    $sql = "UPDATE essenplan SET anzahl_personen = ? WHERE user_id = ? AND datum = ?";
    $stmt = $conn->prepare($sql);
    if ($stmt->bind_param("iis", $anzahlPersonen, $userId, $datum) && $stmt->execute()) {
        // Erfolg
        header("Location: rezept_detail.php?datum=" . urlencode($datum));
    } else {
        // Fehler
        echo "Fehler beim Aktualisieren der Anzahl der Personen.";
    }
    $stmt->close();
    $conn->close();
}
?>


Path: ./http/Views\pages\vorratsschrank.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];

$sql = "SELECT vs.id, zn.name, vs.menge, vs.verbrauchsdatum 
        FROM vorratsschrank vs
        JOIN zutaten_namen zn ON vs.zutat_id = zn.zutat_id
        WHERE vs.user_id = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();

$Voratschrank = [];
while ($row = $result->fetch_assoc()) {
    $Voratschrank[] = [
        'name' => $row['name'],
        'menge' => $row['menge'],
        'verbrauchsdatum' => $row['verbrauchsdatum'],
        'id' => $row['id']
    ];
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Vorratsschrank</title>
</head>
<body>
    <?php include '../templates/navigation.php'; ?>
    <main>
        <h2>Vorratsschrank</h2>
        <table>
            <tr>
                <th>Zutat</th>
                <th>Menge</th>
                <th>geplantes Verbauchs datum</th>
                <th>Aktion</th>
            </tr>
            <?php foreach ( $Voratschrank as $item): ?>
            <tr>
                <td><?= htmlspecialchars($item['name']) ?></td>
                <td><?= htmlspecialchars($item['menge']) ?></td>
                <td>
                    <?php if ($item['verbrauchsdatum']): ?>
                        <a href="rezept_detail.php?datum=<?= urlencode($item['verbrauchsdatum']) ?>">
                            <?= htmlspecialchars($item['verbrauchsdatum']) ?>
                        </a>
                    <?php else: ?>
                        <form method="post" action="Controllers/Inteligent_verplanen.php">
                            <input type="hidden" name="id" value="<?= $item['id'] ?>">
                            <button type="submit">Inteligent verplanen</button>
                        </form>
                    <?php endif; ?>
                </td>
            </tr>
            <?php endforeach; ?>
        </table>
    </main>
    <footer>
        <!-- Footer-Inhalt -->
    </footer>
</body>
</html>

Path: ./http/Views\pages\zutaten.php
Content:
    <?php
    // Fehlerberichterstattung einschalten
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);

    // Verbindung zur Datenbank herstellen
    require_once '../../Utils/db_connect.php';

    include '../templates/einheitenFormular.php';

    // Funktion, um Optionen für ein Dropdown-Menü zu generieren
    function generateOptions($conn, $tableName, $idColumn, $nameColumn, $isEinheiten = false) {
        $options = '';
        $sql = $isEinheiten ? "SELECT $idColumn, $nameColumn, basis_einheit_id FROM $tableName ORDER BY $nameColumn ASC" : "SELECT $idColumn, $nameColumn FROM $tableName ORDER BY $nameColumn ASC";
        $result = $conn->query($sql);
        if ($result->num_rows > 0) {
            while($row = $result->fetch_assoc()) {
                if ($isEinheiten) {
                    $options .= "<option value='" . $row[$idColumn] . "' data-basis='" . $row['basis_einheit_id'] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
                } else {
                    $options .= "<option value='" . $row[$idColumn] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
                }
            }
        }
        return $options;
    }
    

    // Überprüfen, ob das Formular gesendet wurde
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        // Überprüfen, ob das Formular gesendet wurde und die Aktion "Zutat Unter Anderem Namen Hinzufügen" ist
        if (isset($_POST['aktion_name']) && $_POST['aktion_name'] === "Zutat Unter Anderem Namen Hinzufügen") {
            // Daten aus dem Formular holen
            $alternativerName = $_POST['alternativerName'];

            // Suche nach einer Zutat mit dem alternativen Namen
            $stmt = $conn->prepare("SELECT zutat_id FROM zutaten_namen WHERE name = ?");
            $stmt->bind_param("s", $alternativerName);
            $stmt->execute();
            $result = $stmt->get_result();

            if ($result->num_rows > 0) {
                // Zutat existiert, also füge den neuen Namen hinzu
                $row = $result->fetch_assoc();
                $zutatId = $row['zutat_id'];

                // Neuen Namen zur zutaten_namen Tabelle hinzufügen
                $neuerName = $_POST['zutaten_name']; // Der "neue" Name der Zutat
                $stmt = $conn->prepare("INSERT INTO zutaten_namen (name, zutat_id) VALUES (?, ?)");
                $stmt->bind_param("si", $neuerName, $zutatId);
                if ($stmt->execute()) {
                    echo "<p>Neuer Name erfolgreich hinzugefügt.</p>";
                } else {
                    echo "<p>Fehler beim Hinzufügen des neuen Namens: " . $stmt->error . "</p>";
                }
            } else {
                // Zutat nicht gefunden
                echo "<p>Die Zutat unter dem Namen '$alternativerName' wurde nicht gefunden. Bitte überprüfen Sie den Namen und versuchen Sie es erneut.</p>";
            }
        
            $stmt->close();
        }else{
                if ($_POST['einheit_id'] === 'neuHinzufuegen') {
                    // Führe die Funktion zum Hinzufügen der neuen Einheit aus und erhalte die neue Einheits-ID
                    $einheit_id = insert_into_Eineheiten();
                }
                else{
                $einheit_id = $_POST['einheit_id'];
                }
                // Daten aus dem Formular holen und bereinigen
                $name = $_POST['zutaten_name'];
                $haltbarkeit = $_POST['haltbarkeit'];
                $volumen = $_POST['volumen'];
                $kategorie_id = $_POST['kategorie_id'];
                $phd_kategorie_id = $_POST['phd_kategorie_id'];
                $umrechnungsfaktor = !empty($_POST['umrechnungsfaktor']) ? $_POST['umrechnungsfaktor'] : NULL;

                // Prepared Statement vorbereiten
                $stmt = $conn->prepare("INSERT INTO zutaten (uebliche_haltbarkeit, volumen, kategorie_id, phd_kategorie_id, einheit_id   , spezifischer_umrechnungsfaktor) VALUES (?, ?, ?, ?, ?, ?)");

                // Parameter binden
                $stmt->bind_param("idiiid", $haltbarkeit, $volumen, $kategorie_id, $phd_kategorie_id, $einheit_id, $umrechnungsfaktor);

                // Versuchen, die Prepared Statement auszuführen
                if ($stmt->execute()) {
                    // Assuming $stmt->execute() was successful and $name is the name of the ingredient
                    $zutatId = $conn->insert_id; // Retrieves the ID of the last inserted row
                    $stmt = $conn->prepare("INSERT INTO zutaten_namen (name, zutat_id) VALUES (?, ?)");
                    $stmt->bind_param("si", $name, $zutatId);
                    if (!$stmt->execute()) {
                        echo "<p>Fehler beim Hinzufügen des Namens der Zutat: " . $stmt->error . "</p>";
                    }

                    echo "<p>Zutat erfolgreich hinzugefügt!</p>";
                } else {
                    echo "<p>Fehler beim Hinzufügen der Zutat: " . $stmt->error . "</p>";
                }

                // Prepared Statement schließen
                $stmt->close();
            }
        }

    ?>

    <!DOCTYPE html>
    <html lang="de">
    <head>
        <meta charset="UTF-8">
        <title>Zutat Hinzufügen</title>
    </head>
    <body>
        <h2>Zutat Hinzufügen</h2>
        <form action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?>" method="post">
            <label for="zutaten_name">Name:</label>
            <input type="text" id="zutaten_name" name="zutaten_name" ><br><br>
            
            <script>
                function toggleForm(checkbox) {
                    var isChecked = checkbox.checked;
                    var alternativerNameContainer = document.getElementById('alternativerNameContainer');
                    var restDesFormulars = document.getElementById('restDesFormulars');
                    
                    // Sichtbarkeit umschalten
                    alternativerNameContainer.style.display = isChecked ? 'block' : 'none';
                    restDesFormulars.style.display = isChecked ? 'none' : 'block';

                    // Setze oder entferne das 'required' Attribut basierend auf dem Zustand des Kontrollkästchens
                    var inputsAlternative = alternativerNameContainer.getElementsByTagName('input');
                    for (var i = 0; i < inputsAlternative.length; i++) {
                        inputsAlternative[i].required = isChecked; // Diese Felder sind nur erforderlich, wenn der Container sichtbar ist
                    }

                    var inputsRest = restDesFormulars.getElementsByTagName('input');
                    for (var i = 0; i < inputsRest.length; i++) {
                        // Überprüfe, ob das Eingabefeld sichtbar ist, bevor du es als required markierst
                        if (inputsRest[i].type !== 'submit' && inputsRest[i].id !== 'volumen') { // 'volumen' wird separat behandelt
                            inputsRest[i].required = !isChecked; // Diese Felder sind nur erforderlich, wenn der Container sichtbar ist
                        }
                    }

                    // Spezialfall für 'volumen', das nur erforderlich ist, wenn es sichtbar ist
                    var volumenInput = document.getElementById('volumen');
                    if (volumenInput.style.display !== 'none') {
                        volumenInput.required = true;
                    } else {
                        volumenInput.required = false;
                    }
                    if (!checkbox){
                        checkNeueEinheit(document.getElementById('einheit_id').value);
                    }
                }
                window.onload = function() {
                    toggleForm(document.getElementById('existiertUnterAnderemNamen'));
                }

            </script>
            
            <label for="existiertUnterAnderemNamen">Existiert ide zutat unter einem anderem Namen?</label>
            <input type="checkbox" id="existiertUnterAnderemNamen" name="existiertUnterAnderemNamen" onchange="toggleForm(this)" checked>
            
            <div id="alternativerNameContainer" style="display:block;">
                <label for="alternativerName">Anderer Name:</label>
                <input type="text" id="alternativerName" name="alternativerName"><br><br>
                <input type="submit" name="aktion_name" value="Zutat Unter Anderem Namen Hinzufügen">
            </div>

            <div id="restDesFormulars" style="display:none;">

                <label for="haltbarkeit">Haltbarkeit (in Tagen):</label>
                <input class="restDesFormulars" type="number" id="haltbarkeit" name="haltbarkeit" ><br><br>
                
                
                <label for="kategorie_id">Kategorie:</label>
                <select class="restDesFormulars" id="kategorie_id" name="kategorie_id" >
                    <option value="">Bitte wählen</option>    
                    <?php echo generateOptions($conn, 'kategorien', 'id', 'name'); ?>
                </select><br><br>
                
                <label for="phd_kategorie_id">Planetary Health Diet Category:</label>
                <select class="restDesFormulars" id="phd_kategorie_id" name="phd_kategorie_id" >
                    <?php echo generateOptions($conn, 'Planetary_Health_Diet_Categories', 'ID', 'Kategorie'); ?>
                </select><br><br>
                <label for="einheit_id">einheit:</label>
                <select id="einheit_id" name="einheit_id"  onchange=checkNeueEinheit(this.value)>
                    <option value="">Bitte wählen</option>
                    <?php echo generateOptions($conn, 'einheiten', 'id', 'name', true); ?>

                    <option value="neuHinzufuegen">Neu hinzufügen...</option>
                </select><br><br>
                <div id="neueEinheitFormular" style="display:none;">
                    <?php echo einheitsForm(); ?>
                </div>
                <div id="volumen_block" style="display:none;">
                <label for="volumen">Volumen:</label>
                <input class="restDesFormulars" type="text" id="volumen" name="volumen" style="display:none;" >
                wichtig für PHD da die berenung mit gramm arbeitet<br><br>
                </div>
                <script>
                    // This function toggles the visibility of the new unit form and its inputs' required status
                    function checkNeueEinheit(value) {
                        var isNewUnitSelected = value === "neuHinzufuegen";
                        var neueEinheitFormular = document.getElementById('neueEinheitFormular');
                        var volumenBlock = document.getElementById('volumen_block');
                        var volumenInput = document.getElementById('volumen');

                        // Toggle the new unit form visibility
                        neueEinheitFormular.style.display = isNewUnitSelected ? 'block' : 'none';

                        // Set the required attribute for inputs in the new unit form based on its visibility
                        var inputs = neueEinheitFormular.getElementsByTagName('input');
                        for (var i = 0; i < inputs.length; i++) {
                            inputs[i].required = isNewUnitSelected;
                        }

                        // Adjust visibility and required attribute for the volumen input
                        // Assume the basis unit is linked to whether the volumen should be shown or not
                        var displayVolumen = 'none';
                        if (value === '2' || (isNewUnitSelected && document.getElementById('basisEinheit').value === 'Liter')) {
                            displayVolumen = 'block';
                        }
                        
                        volumenBlock.style.display = displayVolumen;
                        volumenInput.style.display = displayVolumen;
                        volumenInput.required = displayVolumen === 'block';

                        if (isNewUnitSelected)
                        checkBasisEinheit((document.getElementById('basisEinheit').value));
                    }

                    // This function updates the visibility of the volumen input based on the selected base unit
                    function checkBasisEinheit(value) {
                        var volumenBlock = document.getElementById('volumen_block');
                        var volumenInput = document.getElementById('volumen');

                        var displayVolumen = value === 'Liter' ? 'block' : 'none';
                        volumenBlock.style.display = displayVolumen;
                        volumenInput.style.display = displayVolumen;
                        volumenInput.required = displayVolumen === 'block';
                    }
                </script>



                <input type="submit" value="Zutat Hinzufügen">
            
            </div>
        </form>
        <h2>Vorhandene Zutaten</h2>
        <?php
// Vorhandene Zutaten auflisten mit Anpassungen
$sql = "SELECT zutaten.id, 
               GROUP_CONCAT(zutaten_namen.name SEPARATOR ', ') AS names, 
               zutaten.uebliche_haltbarkeit, 
               zutaten.volumen, 
               kategorien.name AS kategorie_name, 
               Planetary_Health_Diet_Categories.Kategorie AS phd_kategorie_name, 
               einheiten.name AS einheit_name
        FROM zutaten 
        JOIN zutaten_namen ON zutaten.id = zutaten_namen.zutat_id
        JOIN kategorien ON zutaten.kategorie_id = kategorien.id
        JOIN Planetary_Health_Diet_Categories ON zutaten.phd_kategorie_id = Planetary_Health_Diet_Categories.ID
        JOIN einheiten ON zutaten.einheit_id = einheiten.id
        GROUP BY zutaten.id
        ORDER BY names ASC";

$result = $conn->query($sql);

if ($result->num_rows > 0) {
    echo "<table border='1'>";
    echo "<tr><th>Namen</th><th>Haltbarkeit (Tage)</th><th>Volumen</th><th>Kategorie</th><th>PHD Kategorie</th><th>Einheit</th></tr>";
    while ($row = $result->fetch_assoc()) {
        echo "<tr><td>" . htmlspecialchars($row['names']) . "</td><td>" . htmlspecialchars($row['uebliche_haltbarkeit']) . "</td><td>" . htmlspecialchars($row['volumen']) . "</td><td>" . htmlspecialchars($row['kategorie_name']) . "</td><td>" . htmlspecialchars($row['phd_kategorie_name']) . "</td><td>" . htmlspecialchars($row['einheit_name']) . "</td></tr>";
    }
    echo "</table>";
} else {
    echo "Keine Zutaten gefunden.";
}
?>
    </body>
    </html>


Path: ./http/Views\templates\einheitenFormular.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

// Add new unit
function insert_into_Eineheiten(){
    global $conn;

    $name = $_POST['name'];
    $umrechnungsfaktor = $_POST['umrechnungsfaktor'];
    $basisEinheit = $_POST['basisEinheit'];
    
    $basisEinheitId = null;
    $hatSpezifischenUmrechnungsfaktor = false;

    // Determine basisEinheitId and hatSpezifischenUmrechnungsfaktor based on basisEinheit selection
    if ($basisEinheit == 'Gramm') {
        $basisEinheitId = 1; // Ensure this ID exists in your database
    } elseif ($basisEinheit == 'Liter') {
        $basisEinheitId = 2; // Ensure this ID exists in your database
    } elseif ($basisEinheit == 'speziell') {
        $hatSpezifischenUmrechnungsfaktor = true;
        $basisEinheitId = NULL;
        $umrechnungsfaktor = NULL;
    }
    
    $insertSql = "INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis, basis_einheit_id, hat_spezifischen_umrechnungsfaktor) VALUES (?, ?, ?,?)";
    $stmt = $conn->prepare($insertSql);
    $stmt->bind_param("sdii", $name, $umrechnungsfaktor, $basisEinheitId, $hatSpezifischenUmrechnungsfaktor);

    if ($stmt->execute()) {
        echo "<p>Einheit erfolgreich hinzugefügt!</p>";
        // Gib die ID der neu eingefügten Einheit zurück
        return $conn->insert_id;
    } else {
        echo "<p>Fehler beim Hinzufügen der Einheit: " . $stmt->error . "</p>";
        return null; // Rückgabe von null im Fehlerfall
}
}
function einheitsForm(){
    return '<label for="name">Name:</label>
    <input type="text" id="name" name="name" ><br><br>
    
    <label for="umrechnungsfaktor">Umrechnungsfaktor:</label>
    <input type="number" id="umrechnungsfaktor" name="umrechnungsfaktor" step="0.01" >
    bei "spezieler Bassis ist die referenc immer Gramm<br><br>
    
    <label for="basisEinheit">Basis Einheit:</label>
    <select id="basisEinheit" name="basisEinheit"  onchange="checkBasisEinheit(this.value)">
        <option value="">Bitte wählen</option>     
        <option value="Liter">Liter</option>
        <option value="Gramm">Gramm</option>
        <option value="speziell">speziell</option>
    </select><br><br>';
}
?>

Path: ./http/Views\templates\footer.php
Content:


Path: ./http/Views\templates\header.php
Content:
<meta charset='UTF-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<link rel='stylesheet' href='../../style.css'>

Path: ./http/Views\templates\navigation.php
Content:
<?php
// Füge die erforderlichen Includes ein, um auf die Benutzerdaten zugreifen zu können
require_once '../../Utils/db_connect.php';
require_once '../../Utils/SessionManager.php';

global $conn;

$einkaufsoption = ''; // Initialisiere die Variable

// Überprüfe, ob der Benutzer eingeloggt ist, und hole die Einkaufsoption

$userId = $_SESSION['userId'];
$sql = "SELECT einkaufsoption FROM users WHERE id = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();
if ($row = $result->fetch_assoc()) {
    $einkaufsoption = $row['einkaufsoption'];
}
?>

<nav>
    <ul>
        <li><a href="heutiges-gericht.php">Heutiges Gericht</a></li>
        <li><a href="essensplan.php">Essensplan</a></li>
        <li><a href="einkaufsliste.php">Einkaufsliste</a></li>
        <li><a href="vorratsschrank.php">Vorratsschrank</a></li>
        <?php if (!isset($_SESSION['is_temporary'])): ?>
            <li><a href="freunde.php">Freunde</a></li>
        <?php endif; ?>
        <li><a href="settings.php">Einstellungen</a></li>
        <li><a href="profil.php">Profil</a></li>
        <?php if ($einkaufsoption == 'unverpackt'): ?>
            <li><a href="gefaessVerwaltung.php">Gefäßverwaltung</a></li>
        <?php endif; ?>
    </ul>
</nav>



Path: sql_create
Content:
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL, -- Speichern Sie hier Hashes, nicht die tatsächlichen Passwörter
    cookie_auth_token VARCHAR(255), -- Ein langes, zufälliges Token für die Authentifizierung via Cookie
    freundes_token VARCHAR(255) UNIQUE,
    einkaufsoption VARCHAR(255) DEFAULT 'ueblicheVerpackungsgroesse',
    is_temporary BOOLEAN NOT NULL DEFAULT 0,
    anzahl_personen_einstellung INT DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    current_editing_recipe_id INT DEFAULT NULL;
);

CREATE TABLE essenplan (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    datum DATE NOT NULL,
    anzahl_personen INT NOT NULL,
    rezept_id INT, 
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (rezept_id) REFERENCES rezepte(id)
);


CREATE TABLE zutaten (
    id INT AUTO_INCREMENT PRIMARY KEY,
    uebliche_haltbarkeit INT DEFAULT 7 COMMENT 'Haltbarkeit in Tagen',
    kategorie_id INT DEFAULT NULL,
    phd_kategorie_id INT,
    volumen DECIMAL(10, 2),
    einheit_id INT,   
    spezifischer_umrechnungsfaktor DECIMAL(10, 2),
    FOREIGN KEY (phd_kategorie_id) REFERENCES Planetary_Health_Diet_Categories(ID),
    FOREIGN KEY (kategorie_id) REFERENCES kategorien(id),
    FOREIGN KEY (einheit_id) REFERENCES einheiten(id)
);

CREATE TABLE kategorien (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    sortierreihenfolge INT NOT NULL
);



CREATE TABLE rezepte (
    id INT AUTO_INCREMENT PRIMARY KEY,
    titel VARCHAR(255) NOT NULL,
    beschreibung TEXT,
    zubereitungszeit INT,
    basis_personenanzahl INT DEFAULT 4

);


CREATE TABLE rezept_zutaten (
    rezept_id INT,
    zutat_id INT,
    menge DECIMAL(10, 2),
    einheit_id INT NOT NULL,
    FOREIGN KEY (einheit_id) REFERENCES einheiten(id),
    PRIMARY KEY (rezept_id, zutat_id),
    FOREIGN KEY (rezept_id) REFERENCES rezepte(id),
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);
CREATE TABLE einkaufsliste (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    zutat_id INT,
    menge VARCHAR(255),
    gekauft BOOLEAN DEFAULT FALSE,
    verbrauchsdatum DATE, -- Hinzugefügtes Feld für das Verbrauchsdatum
    gefaess_id INT DEFAULT NULL,
    FOREIGN KEY (gefaess_id) REFERENCES unverpackte_gefaesse(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE vorratsschrank (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    zutat_id INT,
    menge VARCHAR(255),
    verbrauchsdatum DATE, -- Hinzugefügtes Feld für das Verbrauchsdatum
    gefaess_id INT DEFAULT NULL,
    FOREIGN KEY (gefaess_id) REFERENCES unverpackte_gefaesse(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE zutaten_namen (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    zutat_id INT NOT NULL,
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE konventionen (
    id INT AUTO_INCREMENT PRIMARY KEY,
    single_name_id INT NOT NULL,
    plural_name_id INT,
    zutat_id INT NOT NULL,
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE freundschaftsanfragen (
    id INT AUTO_INCREMENT PRIMARY KEY,
    sender_id INT NOT NULL,
    empfaenger_id INT NOT NULL,
    status ENUM('pending', 'accepted', 'declined') NOT NULL,
    FOREIGN KEY (sender_id) REFERENCES users(id),
    FOREIGN KEY (empfaenger_id) REFERENCES users(id)
);

CREATE TABLE freunde (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id_1 INT NOT NULL,
    user_id_2 INT NOT NULL,
    FOREIGN KEY (user_id_1) REFERENCES users(id),
    FOREIGN KEY (user_id_2) REFERENCES users(id)
);

CREATE TABLE unverpackte_gefaesse (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    volumen DECIMAL(10,2) NOT NULL COMMENT 'Volumen in Litern oder Kilogramm',
    beschreibung TEXT,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE TABLE einheiten (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    umrechnungsfaktor_zu_basis DECIMAL(10, 2),
    basis_einheit_id INT NULL,
    volumen DECIMAL(10, 2),
    hat_spezifischen_umrechnungsfaktor BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (basis_einheit_id) REFERENCES einheiten(id)
);
-- Basiseinheiten einfügen
INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis) VALUES ('Gramm', 1), ('Liter', 1);
INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis, basis_einheit_id) VALUES ('Kilogramm', 1000, 1), ('Pfund', 453.59, 1), ('Unze', 28.35, 1);
INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis, basis_einheit_id) VALUES ('Milliliter', 0.001, 2), ('Teelöffel', 0.005, 2), ('Esslöffel', 0.015, 2), ('Tasse', 0.24, 2);

CREATE TABLE zutaten_saisonalitaet (
    id INT AUTO_INCREMENT PRIMARY KEY,
    zutat_id INT NOT NULL,
    saison_start DATE NOT NULL,
    saison_ende DATE NOT NULL,
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE Planetary_Health_Diet_Categories (
    ID INT PRIMARY KEY,
    Kategorie VARCHAR(255),
    Taegliche_Menge_g INT,
    Beispiele TEXT
);
INSERT INTO Planetary_Health_Diet_Categories (ID, Kategorie, Taegliche_Menge_g, Beispiele) VALUES
(1, 'Getreide (Vollkorn)', 232, 'Vollkornprodukte, unverarbeitete Mais-, Weizen-, Reis- oder Haferprodukte'),
(2, 'Hülsenfrüchte', 50, 'Linsen, Bohnen, Erbsen, Kichererbsen'),
(3, 'Gemüse', 300, 'Ein Mix aus verschiedenen Gemüsesorten'),
(4, 'Obst', 200, 'Äpfel, Bananen, Orangen, Beeren'),
(5, 'Nüsse und Samen', 50, ''),
(6, 'Fleisch (Rot und verarbeitet)', 14, 'Begrenzen auf rotes und verarbeitetes Fleisch'),
(7, 'Geflügel', 29, ''),
(8, 'Fisch', 28, ''),
(9, 'Milchprodukte', 250, 'Milch, Joghurt, Käse'),
(10, 'Eier', 13, 'Entspricht etwa 1,5 Eiern pro Woche'),
(11, 'Pflanzliche Öle', 40, 'Olivenöl, Rapsöl, Sonnenblumenöl'),
(12, 'Zucker', 31, ''),
(13, 'Stärkehaltiges Gemüse', 50, 'Kartoffeln, Süßkartoffeln');


