Path: ./http/Views/pages/rezepte.php
Content:
<?php
// Fehlerberichterstattung einschalten
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once '../../Utils/db_connect.php';

require_once '../templates/rezepte_post.php';
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Rezept Hinzufügen</title>
</head>
<body>
    <h2>Neues Rezept hinzufügen</h2>
    <?php include '../templates/rezepteFormular.php'; ?>

    <h2>Vorhandene Rezepte</h2>
    <table border="1">
        <tr>
            <th>Titel</th>
            <th>Autor</th>
            <th>Untertitel</th>
            <th>Zubereitungszeit</th>
            <th>Personenanzahl</th>
            <th>Bilder</th>
            <th>Zutaten</th>
        </tr>
        <?php
        $sql = "SELECT 
        r.id, 
        r.titel, 
        r.autor, 
        r.untertitel, 
        r.bilder, 
        r.beschreibung, 
        r.zubereitungszeit, 
        r.basis_personenanzahl, 
        zn.name AS zutaten_name, 
        rz.menge, 
        e.name AS einheit
    FROM 
        rezepte r
    LEFT JOIN 
        rezept_zutaten rz ON r.id = rz.rezept_id
    LEFT JOIN 
        zutaten z ON rz.zutat_id = z.id
    LEFT JOIN 
        zutaten_namen zn ON z.id = zn.zutat_id
    LEFT JOIN 
        einheiten e ON rz.einheit_id = e.id
    GROUP BY 
        r.id, rz.zutat_id
    ORDER BY 
        r.id, zn.name;
    ";
        $result = $conn->query($sql);

        $rezepte = [];
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                $rezeptId = $row['id'];
                if (!isset($rezepte[$rezeptId])) {
                    $rezepte[$rezeptId] = [
                        'titel' => $row['titel'],
                        'autor' => $row['autor'],
                        'untertitel' => $row['untertitel'],
                        'bilder' => $row['bilder'],
                        'beschreibung' => $row['beschreibung'],
                        'zubereitungszeit' => $row['zubereitungszeit'],
                        'basis_personenanzahl' => $row['basis_personenanzahl'],
                        'zutaten' => []
                    ];
                }
                if ($row['zutaten_name']) { // Überprüfen, ob der Eintrag eine Zutat hat
                    $rezepte[$rezeptId]['zutaten'][] = htmlspecialchars($row['zutaten_name']) . " " . htmlspecialchars($row['menge']) . " " . htmlspecialchars($row['einheit']);
                }
            }

            foreach ($rezepte as $rezept) {
                echo "<tr>";
                echo "<td>" . htmlspecialchars($rezept['titel']?? '') . "</td>";
                echo "<td>" . htmlspecialchars($rezept['autor']?? '') . "</td>";
                echo "<td>" . htmlspecialchars($rezept['untertitel']?? '') . "</td>";
                echo "<td>" . htmlspecialchars($rezept['zubereitungszeit']?? '') . " Minuten</td>";
                echo "<td>" . htmlspecialchars($rezept['basis_personenanzahl']?? '') . "</td>";
                echo "<td>";
                if ($rezept['bilder']) {
                    $bilder = explode(',', $rezept['bilder']);
                    foreach ($bilder as $bild) {
                        echo "<img src='" . htmlspecialchars($bild ?? '') . "' alt='Bild' height='100' /> ";
                    }
                }
                echo "</td>";
                echo "<td>" . implode(', ', $rezept['zutaten']?? '') . "</td>";
                echo "</tr>";
            }
        } else {
            echo "<tr><td colspan='7'>Keine Rezepte gefunden.</td></tr>";
        }
        ?>
    </table>
</body>
</html>


Path: ./http/Views/templates/rezepteFormular.php
Content:
<?php
    // Fehlerberichterstattung einschalten
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);

    // Verbindung zur Datenbank herstellen
    require_once '../../Utils/db_connect.php';

?>
    <form action="rezepte_post.php" method="post" enctype="multipart/form-data">
        <label for="titel">Titel:</label><br>
        <input type="text" id="titel" name="titel" required><br>

        <label for="untertitel">Untertitel:</label><br>
        <input type="text" id="untertitel" name="untertitel"><br>

        <label for="zubereitungszeit">Zubereitungszeit (in Minuten):</label><br>
        <input type="number" id="zubereitungszeit" name="zubereitungszeit" required><br>

        <label for="basis_personenanzahl">Basis Personenanzahl:</label><br>
        <input type="number" id="basis_personenanzahl" name="basis_personenanzahl" required><br>

        <label for="bilder">Bilder:</label><br>
        <input type="file" id="bilder" name="bilder"><br>

        <div id="zutatenContainer">
        </div>
        <br>

        <input type="submit" value="Rezept Hinzufügen">
    </form>

<Script src="../templates/formFunctions.js" ></Script>  
    <script defer>
    
    document.addEventListener('input', function(event) {
        if (event.target && event.target.name.match(/^zutaten\[\d+\]\[name\]$/)) {
            const zutatenName = event.target.value;
            const zutatBlockIndex = event.target.closest('.zutatBlock').dataset.index;
            const einheitenDropdown = document.getElementById(`einheit_id_${zutatBlockIndex}`);
            if (einheitenDropdown) {
                loadEinheiten(einheitenDropdown, zutatenName);
            }
        }
    }); 
    function addZutatBlock() {
        const container = document.getElementById('zutatenContainer');
        const newIndex = container.querySelectorAll('.zutatBlock').length;

        const zutatBlock = document.createElement('div');
        zutatBlock.classList.add('zutatBlock');
        zutatBlock.dataset.index = newIndex;

        zutatBlock.innerHTML = `
            <label>Zutatenname:</label>
            <input type="text" name="zutaten[${newIndex}][name]" required>

            <label>Menge:</label>
            <input type="text" name="zutaten[${newIndex}][menge]" required>

            <label>Einheit:</label>
            <select id="einheit_id_${newIndex}" name="zutaten[${newIndex}][einheit_id]">
                <!-- Optionen werden dynamisch geladen -->
            </select>


            <button type="button" class="removeZutat" style="display: none;">Entfernen</button>
        `;

        container.appendChild(zutatBlock);

        const inputs = zutatBlock.querySelectorAll('input');
        inputs.forEach(input => {
            input.addEventListener('input', handleInput);
        });

        const removeBtn = zutatBlock.querySelector('.removeZutat');
        removeBtn.addEventListener('click', function() {
            removeZutatBlock(zutatBlock);
        });
        // Hier, nachdem der zutatBlock dem DOM hinzugefügt wurde:
        loadEinheiten(document.getElementById(`einheit_id_${newIndex}`)); // Laden der Einheiten für das neu erstellte Dropdown
    }
    function handleInput(event) {
        const zutatBlock = event.target.closest('.zutatBlock');
        const index = parseInt(zutatBlock.dataset.index);
        const container = document.getElementById('zutatenContainer');
        const totalBlocks = container.querySelectorAll('.zutatBlock').length;
        const nextIndex = index + 1;

        if (index === totalBlocks - 1) {
            addZutatBlock(); // Fügt einen neuen Block hinzu, wenn im letzten Block getippt wird
        }

        // Entfernen-Button anzeigen, wenn ein Feld ausgefüllt wird
        const removeBtn = zutatBlock.querySelector('.removeZutat');
        if (event.target.value.trim() !== '') {
            removeBtn.style.display = 'inline';
        } else {
            // Prüfen, ob alle Felder im Block leer sind, bevor der Entfernen-Button versteckt wird
            const inputsFilled = Array.from(zutatBlock.querySelectorAll('input')).some(input => input.value.trim() !== '');
            if (!inputsFilled) {
                removeBtn.style.display = 'none';
            }
        }
    }
    function removeZutatBlock(block) {
        const container = document.getElementById('zutatenContainer');
        block.remove();

        // Neuzuordnung der Indizes und Aktualisierung der name-Attribute für verbleibende Blöcke
        const remainingBlocks = container.querySelectorAll('.zutatBlock');
        remainingBlocks.forEach((block, newIndex) => {
            block.dataset.index = newIndex;
            const inputs = block.querySelectorAll('input');
            const select = block.querySelector('select');

            inputs.forEach(input => {
                const name = input.name;
                const newName = name.replace(/\[\d+\]/, `[${newIndex}]`); // Ersetzen des Index im Namen
                input.name = newName;
            });

            if (select) {
                const name = select.name;
                const newName = name.replace(/\[\d+\]/, `[${newIndex}]`);
                select.name = newName;
                select.id = `einheit_id_${newIndex}`; // Aktualisiere auch die ID des select-Elements
            }
        });
    }
    document.addEventListener('DOMContentLoaded', function() {
        document.body.addEventListener('change', function(event) {
            if (event.target && event.target.matches("#zutatenName")) {
                const zutatenName = event.target.value;
                
                // Assuming your fetch logic here is correct and 'Controllers\ladeEinheiten.php' is accessible,
                // you might need to adjust the path to match your project structure.
                fetch('/Controllers/ladeEinheiten.php?zutatenName=' + encodeURIComponent(zutatenName))
                    .then(response => response.json())
                    .then(data => {
                        const einheitenDropdown = document.getElementById('einheit_id');
                        if (einheitenDropdown) { // Ensure the dropdown exists
                            einheitenDropdown.innerHTML = ''; // Clear existing options
                            data.forEach(einheit => {
                                const option = document.createElement('option');
                                option.value = einheit.id;
                                option.textContent = einheit.name;
                                einheitenDropdown.appendChild(option);
                            });
                        }
                    })
                    .catch(error => console.error('Error:', error));
            }
        });
    });
    document.addEventListener('DOMContentLoaded', function() {
        const addZutatBtn = document.getElementById('addZutat');
        addZutatBtn.addEventListener('click', function() {
            const newIndex = document.querySelectorAll('.zutatBlock').length - 1; // Holen des aktuellen Index
            const einheitenDropdown = document.getElementById(`einheit_id_${newIndex}`);
            loadEinheiten(einheitenDropdown); // Laden der Einheiten für das neue Dropdown
        });
    });
    document.addEventListener("DOMContentLoaded", function() {
        addZutatBlock(); // Initial ein Zutatenblock hinzufügen
    });
    function loadEinheiten(dropdown, zutatenName) {
        if (!dropdown || !zutatenName) return; // Sicherstellen, dass Dropdown und Zutatenname vorhanden sind

        fetch('/Controllers/ladeEinheiten.php?zutatenName=' + encodeURIComponent(zutatenName))
            .then(response => response.json())
            .then(data => {
                dropdown.innerHTML = ''; // Leeren der bestehenden Optionen
                data.forEach(einheit => {
                    const option = document.createElement('option');
                    option.value = einheit.id;
                    option.textContent = einheit.name;
                    dropdown.appendChild(option);
                });
            })
            .catch(error => console.error('Error:', error));
    }
    document.addEventListener("DOMContentLoaded", function() {
        // Verweise auf die relevanten DOM-Elemente
        const einheitDropdown = document.querySelector('.einheit_id');
        const umrechnungsfaktorFeld = document.querySelector('.umrechnungsfaktorFeld');
        const neueEinheitFormular = document.querySelector('.neueEinheitFormular');

        // Event-Listener für Änderungen an der Einheitsauswahl
        einheitDropdown.addEventListener('change', function() {
            const istGramm = einheitDropdown.selectedOptions[0].text === 'Gramm';
            
            // Anzeigen/Verbergen der relevanten Felder basierend auf der Auswahl
            umrechnungsfaktorFeld.style.display = istGramm ? 'none' : 'block';
            neueEinheitFormular.style.display = istGramm ? 'none' : 'block';

            // Anpassen der 'required'-Attribute basierend auf der Auswahl
            umrechnungsfaktorFeld.querySelectorAll('input').forEach(input => {
                input.required = !istGramm;
            });
        });
    });

// Initial das Laden der Einheiten für den ersten Block auslösen
    document.addEventListener('DOMContentLoaded', function() {
        const initialDropdown = document.getElementById('einheit_id_0');
        loadEinheiten(initialDropdown);
    });

</script>

Path: ./http/Views/templates/rezepte_post.php
Content:


Path: ./http/Views/pages/zutaten.php
Content:
<?php
    // Fehlerberichterstattung einschalten
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);

    // Verbindung zur Datenbank herstellen
    require_once '../../Utils/db_connect.php';

    require '../templates/zutaten_post.php';
    // Überprüfen, ob das Formular gesendet wurde
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        insert_into_Zutaten();
    }
    ?>

    <!DOCTYPE html>
    <html lang="de">
    <head>
        <meta charset="UTF-8">
        <title>Zutat Hinzufügen</title>
    </head>
    <body>
        <h2>Zutat Hinzufügen</h2>
        
        <form action=<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?> method="post">
        <?php require '../templates/zutatenFormular.php';?>
        <Script src="../templates/formFunctions.js"></Script>
        <h2>Vorhandene Zutaten</h2>
        <?php
$sql = "SELECT 
zutaten.id, 
IFNULL(GROUP_CONCAT(zutaten_namen.name SEPARATOR ', '), 'Kein Name vorhanden') AS names, 
zutaten.uebliche_haltbarkeit, 
zutaten.volumen, 
kategorien.name AS kategorie_name, 
Planetary_Health_Diet_Categories.Kategorie AS phd_kategorie_name, 
einheiten.name AS einheit_name
FROM 
zutaten 
LEFT JOIN zutaten_namen ON zutaten.id = zutaten_namen.zutat_id
LEFT JOIN kategorien ON zutaten.kategorie_id = kategorien.id
LEFT JOIN Planetary_Health_Diet_Categories ON zutaten.phd_kategorie_id = Planetary_Health_Diet_Categories.ID
LEFT JOIN einheiten ON zutaten.einheit_id = einheiten.id
GROUP BY 
zutaten.id 
ORDER BY    
names ASC";


if ($conn->error) {
    die("SQL-Abfrage fehlgeschlagen: " . $conn->error);
}
$result = $conn->query($sql);
if (!$result) {
    die("Fehler bei der Ausführung der Abfrage: " . $conn->error);
}

echo "Anzahl der gefundenen Zeilen: " . $result->num_rows;

if ($result->num_rows > 0) {
    echo "<table border='1'>";
    echo "<tr><th>Namen</th><th>Haltbarkeit (Tage)</th><th>Volumen</th><th>Kategorie</th><th>PHD Kategorie</th><th>Einheit</th></tr>";
    while ($row = $result->fetch_assoc()) {
        echo "<tr>";
        echo "<td>" . (isset($row['names']) ? htmlspecialchars($row['names']) : 'Kein Name vorhanden') . "</td>";
        echo "<td>" . (isset($row['uebliche_haltbarkeit']) ? htmlspecialchars($row['uebliche_haltbarkeit']) : 'N/A') . "</td>";
        echo "<td>" . (isset($row['volumen']) ? htmlspecialchars($row['volumen']) : 'N/A') . "</td>";
        echo "<td>" . (isset($row['kategorie_name']) ? htmlspecialchars($row['kategorie_name']) : 'Keine Kategorie') . "</td>";
        echo "<td>" . (isset($row['phd_kategorie_name']) ? htmlspecialchars($row['phd_kategorie_name']) : 'Keine PHD Kategorie') . "</td>";
        echo "<td>" . (isset($row['einheit_name']) ? htmlspecialchars($row['einheit_name']) : 'Keine Einheit') . "</td>";
        echo "</tr>";
    }
    echo "</table>";
} else {
    echo "Keine Zutaten gefunden.";
}

?>
 </body>
 </html>


Path: ./http/Views/templates/zutatenFormular.php
Content:
<?php
// Fehlerberichterstattung einschalten
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once '../../Utils/db_connect.php';

require '../templates/einheiten_post.php';

// Funktion, um Optionen für ein Dropdown-Menü zu generieren, erweitert um den speziellen Umrechnungsfaktor-Status
function generateOptions($tableName, $idColumn, $nameColumn, $isEinheiten = false) {
    global $conn;
    $options = '';
    $sql = $isEinheiten ? "SELECT $idColumn, $nameColumn, basis_einheit_id, hat_spezifischen_umrechnungsfaktor FROM $tableName ORDER BY $nameColumn ASC" : "SELECT $idColumn, $nameColumn FROM $tableName ORDER BY $nameColumn ASC";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            if ($isEinheiten) {
                $options .= "<option value='" . $row[$idColumn] . "' data-basis='" . $row['basis_einheit_id'] . "' data-spezifischer-umrechnungsfaktor='" . $row['hat_spezifischen_umrechnungsfaktor'] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
            } else {
                $options .= "<option value='" . $row[$idColumn] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
            }
        }
    }
    return $options;
}
?>
<form action=<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?> method="post">
    <label for="zutaten_name">Name:</label>
    <input type="text" class="zutaten_name" name="zutaten_name"><br><br>
    <div class="zutatenFormularContainer">
    
        <label for="existiertUnterAnderemNamen">Existiert die Zutat unter einem anderen Namen?</label>
        <input type="checkbox" class="existiertUnterAnderemNamen" name="existiertUnterAnderemNamen" onchange="toggleForm(this)" checked>
        
        <div class="alternativerNameContainer" style="display:block;">
            <label for="alternativerName">Anderer Name:</label>
            <input type="text" class="alternativerName" name="alternativerName"><br><br>
            <input type="submit" name="aktion_name" value="Zutat Unter Anderem Namen Hinzufügen">
        </div>

        <div class="restDesFormulars" style="display:none;">

            <label for="haltbarkeit">Haltbarkeit (in Tagen):</label>
            <input type="number" class="haltbarkeit" name="haltbarkeit" ><br><br>
      
      
            <label for="kategorie_id">Kategorie:</label>
            <select class="kategorie_id" name="kategorie_id" >
                <option value="">Bitte wählen</option>    
                <?php echo generateOptions('kategorien', 'id', 'name'); ?>
            </select><br><br>
            
            <label for="phd_kategorie_id">Planetary Health Diet Category:</label>
            <select class="phd_kategorie_id" name="phd_kategorie_id" >
                <option value="">Bitte wählen</option> 
                <?php echo generateOptions('Planetary_Health_Diet_Categories', 'ID', 'Kategorie'); ?>
            </select><br><br>
            
            <label for="einheit_id">Einheit:</label>
            <select class="einheit_id" name="einheit_id">
                <option value="">Bitte wählen</option>
                <?php echo generateOptions('einheiten', 'id', 'name', true); ?>
                <option value="neuHinzufuegen">Neu hinzufügen...</option>
            </select><br><br>
            
            <div class="neueEinheitFormular" style="display:none;"> 
                <?php require '../templates/einheitenFormular.html';?>
            </div>
            <div class="umrechnungsfaktorFeld" style="display: none;">
                <label for="umrechnungsfaktor">Umrechnungsfaktor:</label>
                <input type="number" class="umrechnungsfaktor" name="umrechnungsfaktor" step="0.01">
                <div> bei "spezieller Basis" ist die Referenz immer Gramm</div><br><br>
            </div>

            <div class="volumen_block" style="display:none;">
                <label for="volumen">Volumen:</label>
                <input type="text" class="volumen" name="volumen">
                Wichtig für PHD, da die Berechnung mit Gramm arbeitet<br><br>
            </div>      
        </div>
    </div>
    <input type="submit" value="Zutat Hinzufügen">   
</form>


Path: ./http/Views/templates/formFunctions.js
Content:
function toggleVisibility(container, show) {
    container.style.display = show ? 'block' : 'none';
    var inputs = container.querySelectorAll('input:not([type="submit"]), select');
    inputs.forEach(input => {
        input.required = show && !input.hasAttribute('data-optional');
        if (!show) input.value = ''; // Reset the value if hidden
    });
}

function toggleForm(checkbox) {
    var isChecked = checkbox.checked;
    var alternativerNameContainer = document.querySelector('.alternativerNameContainer');
    var restDesFormulars = document.querySelector('.restDesFormulars');

    toggleVisibility(alternativerNameContainer, isChecked);
    toggleVisibility(restDesFormulars, !isChecked);

    checkNeueEinheit(document.querySelector('.einheit_id').value);
}

document.addEventListener("DOMContentLoaded", function() {
    var checkbox = document.querySelector('.existiertUnterAnderemNamen');
    if (checkbox) {
        toggleForm(checkbox); // Initial state setup
    }
    
    var einheitDropdown = document.querySelector('.einheit_id');
    if (einheitDropdown) {
        einheitDropdown.addEventListener('change', function() {
            checkNeueEinheit(this.value);
        });
    }
});

function checkNeueEinheit(value) {
    var neueEinheitFormular = document.querySelector('.neueEinheitFormular');
    var umrechnungsfaktorFeld = document.querySelector('.umrechnungsfaktorFeld');
    var volumenBlock = document.querySelector('.volumen_block');

    toggleVisibility(neueEinheitFormular, value === "neuHinzufuegen");
    toggleVisibility(umrechnungsfaktorFeld, value === "speziell" || value === "neuHinzufuegen");
    toggleVisibility(volumenBlock, value === '2' || value === "neuHinzufuegen");
}

// No need to call checkBasisEinheit on DOMContentLoaded since it's not used in the initial toggleForm call.
function checkBasisEinheit(value) {
    var volumenBlock = document.querySelector('.volumen_block');
    toggleVisibility(volumenBlock, value === 'Liter');
}


