Path: ./http/Views/pages/zutaten.php
Content:
<?php
    // Fehlerberichterstattung einschalten
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);

    // Verbindung zur Datenbank herstellen
    require_once '../../Utils/db_connect.php';

    require '../templates/zutaten_post.php';
    // Überprüfen, ob das Formular gesendet wurde
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        insert_into_Zutaten();
    }
    ?>

    <!DOCTYPE html>
    <html lang="de">
    <head>
        <meta charset="UTF-8">
        <title>Zutat Hinzufügen</title>
    </head>
    <body>
        <h2>Zutat Hinzufügen</h2>
        <form action=<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?> method="post">
            <label for="zutaten_name">Name:</label>
            <input type="text" class="zutaten_name" name="zutaten_name" required><br><br>
        <?php require '../templates/zutatenFormular.php';?>
        <Script src="../templates/formFunctions.js"></Script>
        <h2>Vorhandene Zutaten</h2>
        <?php
$sql = "SELECT 
zutaten.id, 
IFNULL(GROUP_CONCAT(zutaten_namen.name SEPARATOR ', '), 'Kein Name vorhanden') AS names, 
zutaten.uebliche_haltbarkeit, 
zutaten.volumen, 
kategorien.name AS kategorie_name, 
Planetary_Health_Diet_Categories.Kategorie AS phd_kategorie_name, 
einheiten.name AS einheit_name
FROM 
zutaten 
LEFT JOIN zutaten_namen ON zutaten.id = zutaten_namen.zutat_id
LEFT JOIN kategorien ON zutaten.kategorie_id = kategorien.id
LEFT JOIN Planetary_Health_Diet_Categories ON zutaten.phd_kategorie_id = Planetary_Health_Diet_Categories.ID
LEFT JOIN einheiten ON zutaten.einheit_id = einheiten.id
GROUP BY 
zutaten.id 
ORDER BY    
names ASC";


if ($conn->error) {
    die("SQL-Abfrage fehlgeschlagen: " . $conn->error);
}
$result = $conn->query($sql);
if (!$result) {
    die("Fehler bei der Ausführung der Abfrage: " . $conn->error);
}

echo "Anzahl der gefundenen Zeilen: " . $result->num_rows;

if ($result->num_rows > 0) {
    echo "<table border='1'>";
    echo "<tr><th>Namen</th><th>Haltbarkeit (Tage)</th><th>Volumen</th><th>Kategorie</th><th>PHD Kategorie</th><th>Einheit</th></tr>";
    while ($row = $result->fetch_assoc()) {
        echo "<tr>";
        echo "<td>" . (isset($row['names']) ? htmlspecialchars($row['names']) : 'Kein Name vorhanden') . "</td>";
        echo "<td>" . (isset($row['uebliche_haltbarkeit']) ? htmlspecialchars($row['uebliche_haltbarkeit']) : 'N/A') . "</td>";
        echo "<td>" . (isset($row['volumen']) ? htmlspecialchars($row['volumen']) : 'N/A') . "</td>";
        echo "<td>" . (isset($row['kategorie_name']) ? htmlspecialchars($row['kategorie_name']) : 'Keine Kategorie') . "</td>";
        echo "<td>" . (isset($row['phd_kategorie_name']) ? htmlspecialchars($row['phd_kategorie_name']) : 'Keine PHD Kategorie') . "</td>";
        echo "<td>" . (isset($row['einheit_name']) ? htmlspecialchars($row['einheit_name']) : 'Keine Einheit') . "</td>";
        echo "</tr>";
    }
    echo "</table>";
} else {
    echo "Keine Zutaten gefunden.";
}

?>
 </body>
 </html>


Path: ./http/Views/templates/zutatenFormular.php
Content:
<?php
// Fehlerberichterstattung einschalten
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once '../../Utils/db_connect.php';

require '../templates/einheiten_post.php';

// Funktion, um Optionen für ein Dropdown-Menü zu generieren, erweitert um den speziellen Umrechnungsfaktor-Status
function generateOptions($tableName, $idColumn, $nameColumn, $isEinheiten = false) {
    global $conn;
    $options = '';
    $sql = $isEinheiten ? "SELECT $idColumn, $nameColumn, basis_einheit_id, hat_spezifischen_umrechnungsfaktor FROM $tableName ORDER BY $nameColumn ASC" : "SELECT $idColumn, $nameColumn FROM $tableName ORDER BY $nameColumn ASC";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
        while($row = $result->fetch_assoc()) {
            if ($isEinheiten) {
                $options .= "<option value='" . $row[$idColumn] . "' data-basis='" . $row['basis_einheit_id'] . "' data-spezifischer-umrechnungsfaktor='" . $row['hat_spezifischen_umrechnungsfaktor'] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
            } else {
                $options .= "<option value='" . $row[$idColumn] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
            }
        }
    }
    return $options;
}
?>
    <div class="zutatenFormularContainer">
    
        <label for="existiertUnterAnderemNamen">Existiert die Zutat unter einem anderen Namen?</label>
        <input type="checkbox" class="existiertUnterAnderemNamen" name="existiertUnterAnderemNamen" onchange="toggleForm(this)" checked>
        
        <div class="alternativerNameContainer" style="display:block;">
            <label for="alternativerName">Anderer Name:</label>
            <select class="alternativerName" name="alternativerName">
                <?php echo generateOptions('zutaten_namen', 'zutat_id', 'name'); // Passen Sie die Tabelle und Spaltennamen entsprechend an ?>
            </select><br><br>
            <input type="submit" name="aktion_name" value="Zutat Unter Anderem Namen Hinzufügen">
        </div>

        <div class="restDesFormulars" style="display:none;">

            <label for="haltbarkeit">Haltbarkeit (in Tagen):</label>
            <input type="number" class="haltbarkeit" name="haltbarkeit" ><br><br>
      
      
            <label for="kategorie_id">Kategorie:</label>
            <select class="kategorie_id" name="kategorie_id" >
                <option value="">Bitte wählen</option>    
                <?php echo generateOptions('kategorien', 'id', 'name'); ?>
            </select><br><br>
            
            <label for="phd_kategorie_id">Planetary Health Diet Category:</label>
            <select class="phd_kategorie_id" name="phd_kategorie_id" >
                <option value="">Bitte wählen</option> 
                <?php echo generateOptions('Planetary_Health_Diet_Categories', 'ID', 'Kategorie'); ?>
            </select><br><br>
            
            <label for="einheit_id">Einheit:</label>
            <select class="einheit_id" name="einheit_id">
                <option value="">Bitte wählen</option>
                <?php echo generateOptions('einheiten', 'id', 'name', true); ?>
                <option value="neuHinzufuegen">Neu hinzufügen...</option>
            </select><br><br>
            
            <div class="neueEinheitFormular" style="display:none;"> 
                <?php require '../templates/einheitenFormular.html';?>
            </div>
            <div class="umrechnungsfaktorFeld" style="display: none;">
                <label for="umrechnungsfaktor">Umrechnungsfaktor:</label>
                <input type="number" class="umrechnungsfaktor" name="umrechnungsfaktor" step="0.01">
                <div> bei "spezieller Basis" ist die Referenz immer Gramm</div><br><br>
            </div>

            <div class="volumen_block" style="display:none;">
                <label for="volumen">Volumen:</label>
                <input type="text" class="volumen" name="volumen">
                Wichtig für PHD, da die Berechnung mit Gramm arbeitet<br><br>
            </div>      
        </div>
    </div>
    <input type="submit" value="Zutat Hinzufügen">   
</form>


Path: ./http/Views/templates/formFunctions.js
Content:
document.addEventListener("DOMContentLoaded", function() {
    var checkbox = document.querySelector('.existiertUnterAnderemNamen');
    if (checkbox) {
        toggleForm(checkbox); // Initial state setup
    }
    
    var einheitDropdown = document.querySelector('.einheit_id');
    if (einheitDropdown) {  
        einheitDropdown.addEventListener('change', function() {
            checkNeueEinheit(this.value, this.options[this.selectedIndex].getAttribute('data-basis'));
        });
    }
    var BasiseinheitDropdown = document.querySelector('#basisEinheit');
    if (BasiseinheitDropdown) {
        BasiseinheitDropdown.addEventListener('change', function() {
            checkBasisEinheit(this.value);
        });
    }
});
function toggleForm(checkbox) {
    var isChecked = checkbox.checked;
    var alternativerNameContainer = document.querySelector('.alternativerNameContainer');
    var restDesFormulars = document.querySelector('.restDesFormulars');

    toggleVisibility(alternativerNameContainer, isChecked);
    toggleVisibility(restDesFormulars, !isChecked);
    if (!isChecked){
        checkNeueEinheit(document.querySelector('.einheit_id').value, document.querySelector('.einheit_id').getAttribute('data-basis'));
    }
}

function checkNeueEinheit(value,baseineheit) {
    var neueEinheitFormular = document.querySelector('.neueEinheitFormular');
    var umrechnungsfaktorFeld = document.querySelector('.umrechnungsfaktorFeld');
    var volumenBlock = document.querySelector('.volumen_block');

    toggleVisibility(umrechnungsfaktorFeld, value === "speziell");
    toggleVisibility(volumenBlock, value === '2' || baseineheit === '2');
    toggleVisibility(neueEinheitFormular, value === "neuHinzufuegen");
    if (value === "neuHinzufuegen"){
        checkBasisEinheit(document.querySelector('#basisEinheit').value)
    }
}

// No need to call checkBasisEinheit on DOMContentLoaded since it's not used in the initial toggleForm call.
function checkBasisEinheit(value) {
    var volumenBlock = document.querySelector('.volumen_block');
    toggleVisibility(volumenBlock, value === 'Liter');
}

function toggleVisibility(container, show) {
    if (container !== null) {
        container.style.display = show ? 'block' : 'none';
        var inputs = container.querySelectorAll('input:not([type="submit"]), select');
        inputs.forEach(input => {
            input.required = show && !input.hasAttribute('data-optional');
            if (!show) input.value = ''; // Reset the value if hidden
        });
    } else {
        console.warn('Attempted to toggle visibility of an element that does not exist.');
    }
}


Path: ./http/Views/templates/zutaten_post.php
Content:
<?php
// Fehlerberichterstattung einschalten
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once '../../Utils/db_connect.php';

require '../templates/einheiten_post.php';

// Überprüfen, ob das Formular gesendet wurde
function insert_into_Zutaten() {
    global $conn;   
    // Überprüfen, ob das Formular gesendet wurde und die Aktion "Zutat Unter Anderem Namen Hinzufügen" ist
    if (isset($_POST['aktion_name']) && $_POST['aktion_name'] === "Zutat Unter Anderem Namen Hinzufügen") {
        // Daten aus dem Formular holen
        $alternativerName = $_POST['alternativerName'];

        // Suche nach einer Zutat mit dem alternativen Namen
        $stmt = $conn->prepare("SELECT zutat_id FROM zutaten_namen WHERE name = ?");
        $stmt->bind_param("s", $alternativerName);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows > 0) {
            // Zutat existiert, also füge den neuen Namen hinzu
            $row = $result->fetch_assoc();
            $zutatId = $row['zutat_id'];

            // Neuen Namen zur zutaten_namen Tabelle hinzufügen
            $zutaten_name = $_POST['zutaten_name']; // Der "neue" Name der Zutat
            $stmt = $conn->prepare("INSERT INTO zutaten_namen (name, zutat_id) VALUES (?, ?)");
            $stmt->bind_param("si", $zutaten_name, $zutatId);
            if ($stmt->execute()) {
                echo "<p>Neuer Name erfolgreich hinzugefügt.</p>";
            } else {
                echo "<p>Fehler beim Hinzufügen des neuen Namens: " . $stmt->error . "</p>";
            }
        } else {
            // Zutat nicht gefunden
            echo "<p>Die Zutat unter dem Namen '$alternativerName' wurde nicht gefunden. Bitte überprüfen Sie den Namen und versuchen Sie es erneut.</p>";
        }   
        $stmt->close();
    }else{
        //zutaten_name : alternativerName : haltbarkeit : kategorie_id : phd_kategorie_id : einheit_id : name : einheit_umrechnungsfaktor : basisEinheit : umrechnungsfaktor : volumen
        foreach ($_POST as $a => $value) {
            echo $a . " : ";
        }
    
        if ($_POST['einheit_id'] === 'neuHinzufuegen') {
        
            // Führe die Funktion zum Hinzufügen der neuen Einheit aus und erhalte die neue Einheits-ID
            $einheit_id = insert_into_Eineheiten();
        }
        else{
            $einheit_id = $_POST['einheit_id'];
        }
        $hatSpezifischenUmrechnungsfaktor = $_POST['basisEinheit'] === 'speziell';
        $haltbarkeit = $_POST['haltbarkeit'] ?? null;
        $volumen = $_POST['volumen'] ?? null;
        $kategorie_id = $_POST['kategorie_id'] ?? null;
        $phd_kategorie_id = $_POST['phd_kategorie_id'] ?? null;
        $spezifischer_umrechnungsfaktor = ($hatSpezifischenUmrechnungsfaktor) ? $_POST['einheit_id'] === 'neuHinzufuegen' ? $_POST['einheit_umrechnungsfaktor']:$_POST['umrechnungsfaktor'] : null;

    // Prepared Statement zum Hinzufügen der Zutat vorbereiten
    $stmt = $conn->prepare("INSERT INTO zutaten (uebliche_haltbarkeit, volumen, kategorie_id, phd_kategorie_id, einheit_id, spezifischer_umrechnungsfaktor) VALUES (?, ?, ?, ?, ?, ?)");
    echo $haltbarkeit . " : " .  $volumen . " : " . $kategorie_id . " : " . $phd_kategorie_id . " : " . $einheit_id . " : " . $spezifischer_umrechnungsfaktor;
    // Parameter binden
    $stmt->bind_param("idiiid", $haltbarkeit, $volumen, $kategorie_id, $phd_kategorie_id, $einheit_id, $spezifischer_umrechnungsfaktor);

        // Versuchen, die Prepared Statement auszuführen
        if ($stmt->execute()) {
    if (empty($_POST['zutaten_name'])) {
        echo "<p>Name is required.</p>";
        // Handle the error appropriately - perhaps by not proceeding with the DB insert
    }
    $zutaten_name = $_POST['zutaten_name'];

    // Assuming $stmt->execute() was successful and $name is the name of the ingredient
    $zutatId = $conn->insert_id; // Retrieves the ID of the last inserted row
    $stmt = $conn->prepare("INSERT INTO zutaten_namen (name, zutat_id) VALUES (?, ?)");
    $stmt->bind_param("si", $zutaten_name, $zutatId);
    if (!$stmt->execute()) {
        echo "<p>Fehler beim Hinzufügen des Namens der Zutat: " . $stmt->error . "</p>";
    }

    echo "<p>Zutat erfolgreich hinzugefügt!</p>";
        } else {
    echo "<p>Fehler beim Hinzufügen der Zutat: " . $stmt->error . "</p>";
        }

        // Prepared Statement schließen
        $stmt->close();
    }
}
?>

