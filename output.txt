Path: ./http/Views/templates/zutatenFormular.php
Content:
<?php
// Fehlerberichterstattung einschalten
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once '../../Utils/db_connect.php';

require '../templates/einheiten_post.php';

// Funktion, um Optionen für ein Dropdown-Menü zu generieren, erweitert um den speziellen Umrechnungsfaktor-Status
function generateOptions($tableName, $idColumn, $nameColumn, $isEinheiten = false) {
    global $conn;
    $options = '';
    $sql = $isEinheiten ? "SELECT $idColumn, $nameColumn, basis_einheit_id, hat_spezifischen_umrechnungsfaktor FROM $tableName ORDER BY $nameColumn ASC" : "SELECT $idColumn, $nameColumn FROM $tableName ORDER BY $nameColumn ASC";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
 while($row = $result->fetch_assoc()) {
     if ($isEinheiten) {
  $options .= "<option value='" . $row[$idColumn] . "' data-basis='" . $row['basis_einheit_id'] . "' data-spezifischer-umrechnungsfaktor='" . $row['hat_spezifischen_umrechnungsfaktor'] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
     } else {
  $options .= "<option value='" . $row[$idColumn] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
     }
 }
    }
    return $options;
}
?>
     <form action= $action method="post">
     <label for="zutaten_name">Name:</label>
     <input type="text" id="zutaten_name" name="zutaten_name"><br><br>
     <div id="zutatenFormularContainer">
    
     <script>
        function toggleForm(checkbox) {
            var isChecked = checkbox.checked;
            var alternativerNameContainer = document.getElementById('alternativerNameContainer');
            var restDesFormulars = document.getElementById('restDesFormulars');
            
            // Sichtbarkeit umschalten
            alternativerNameContainer.style.display = isChecked ? 'block' : 'none';
            restDesFormulars.style.display = isChecked ? 'none' : 'block';

            // Setze oder entferne das 'required' Attribut basierend auf dem Zustand des Kontrollkästchens
            var inputsAlternative = alternativerNameContainer.getElementsByTagName('input');
            for (var i = 0; i < inputsAlternative.length; i++) {
        inputsAlternative[i].required = isChecked; // Diese Felder sind nur erforderlich, wenn der Container sichtbar ist
            }

            var inputsRest = restDesFormulars.getElementsByTagName('input');
            for (var i = 0; i < inputsRest.length; i++) {
        // Überprüfe, ob das Eingabefeld sichtbar ist, bevor du es als required markierst
        if (inputsRest[i].type !== 'submit' && inputsRest[i].id !== 'volumen') { // 'volumen' wird separat behandelt
            inputsRest[i].required = !isChecked; // Diese Felder sind nur erforderlich, wenn der Container sichtbar ist
        }
            }

            // Spezialfall für 'volumen', das nur erforderlich ist, wenn es sichtbar ist
            var volumenInput = document.getElementById('volumen');
            if (volumenInput.style.display !== 'none') {
        volumenInput.required = true;
            } else {
        volumenInput.required = false;
            }
            if (!checkbox){
        checkNeueEinheit(document.getElementById('einheit_id').value);
            }
        }
        window.onload = function() {
            toggleForm(document.getElementById('existiertUnterAnderemNamen'));
        }

     </script>
     
     <label for="existiertUnterAnderemNamen">Existiert ide zutat unter einem anderem Namen?</label>
     <input type="checkbox" id="existiertUnterAnderemNamen" name="existiertUnterAnderemNamen" onchange="toggleForm(this)" checked>
     
     <div id="alternativerNameContainer" style="display:block;">
        <label for="alternativerName">Anderer Name:</label>
        <input type="text" id="alternativerName" name="alternativerName"><br><br>
        <input type="submit" name="aktion_name" value="Zutat Unter Anderem Namen Hinzufügen">
     </div>

     <div id="restDesFormulars" style="display:none;">

    <label for="haltbarkeit">Haltbarkeit (in Tagen):</label>
    <input class="restDesFormulars" type="number" id="haltbarkeit" name="haltbarkeit" ><br><br>
  
  
    <label for="kategorie_id">Kategorie:</label>
    <select class="restDesFormulars" id="kategorie_id" name="kategorie_id" >
        <option value="">Bitte wählen</option>    
        <?php echo generateOptions('kategorien', 'id', 'name'); ?>
    </select><br><br>
    
    <label for="phd_kategorie_id">Planetary Health Diet Category:</label>
    <select class="restDesFormulars" id="phd_kategorie_id" name="phd_kategorie_id" >
        <option value="">Bitte wählen</option> 
        <?php echo generateOptions('Planetary_Health_Diet_Categories', 'ID', 'Kategorie'); ?>
    </select><br><br>
    <label for="einheit_id">einheit:</label>
    <select id="einheit_id" name="einheit_id">
        <option value="">Bitte wählen</option>
        <?php echo generateOptions('einheiten', 'id', 'name', true); ?>

        <option value="neuHinzufuegen">Neu hinzufügen...</option>
    </select><br><br>
    <div id="neueEinheitFormular" style="display:none;"> 
        <?php require '../templates/einheitenFormular.html';?>
    </div>
    <div id="umrechnungsfaktorFeld" style="display: none;">
        <label for="umrechnungsfaktor">Umrechnungsfaktor:</label>
        <input type="number" id="umrechnungsfaktor" name="umrechnungsfaktor" step="0.01" required>
        <div> bei "spezieler Bassis ist die referenc immer Gramm</div><br><br>
    </div>

    <div id="volumen_block" style="display:none;">
    <label for="volumen">Volumen:</label>
    <input class="restDesFormulars" type="text" id="volumen" name="volumen">
    wichtig für PHD da die berenung mit gramm arbeitet<br><br>
    </div>
      <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Bind change event listener to the units dropdown
            var einheitDropdown = document.getElementById('einheit_id');
            if (einheitDropdown) {
                einheitDropdown.addEventListener('change', handleEinheitChange);
            }

        // Initial check to set the correct state when the page loads
            if (einheitDropdown) {
                handleEinheitChange({target: einheitDropdown});
            }
            
            var basisEinheitDropdown = document.getElementById('basisEinheit');
            if (basisEinheitDropdown) {
                basisEinheitDropdown.addEventListener('change', handleBasisEinheitChange);
            }
    
        // Initial check for basisEinheitDropdown
            if (basisEinheitDropdown) {
                handleBasisEinheitChange({target: basisEinheitDropdown});
            }
        });

        function handleEinheitChange(event) {
            var selectedOption = event.target.options[event.target.selectedIndex];
            var umrechnungsfaktorField = document.getElementById('umrechnungsfaktorFeld');
            var umrechnungsfaktorInput = document.getElementById('umrechnungsfaktor');
            
            // Check if the selected unit requires a conversion factor
            if (selectedOption.dataset.spezifischerUmrechnungsfaktor === '1') {
        umrechnungsfaktorField.style.display = 'block';
        umrechnungsfaktorInput.required = true;
            } else {
        umrechnungsfaktorField.style.display = 'none';
        umrechnungsfaktorInput.required = false;
        umrechnungsfaktorInput.value = ''; // Clear the input if it's not required
            }
        }

        function handleBasisEinheitChange(event) {
            var selectedValue = event.target.value;
            var volumenBlock = document.getElementById('volumen_block');
            var volumenInput = document.getElementById('volumen');
            
            // Adjust visibility and required attribute for the volume input
            if (selectedValue === 'Liter') {
        volumenBlock.style.display = 'block';
        volumenInput.required = true;
            } else {
        volumenBlock.style.display = 'none';
        volumenInput.required = false;
        volumenInput.value = ''; // Clear the input if it's hidden
            }
        }// This function toggles the visibility of the new unit form and its inputs' required status
        function checkNeueEinheit(value) {
            var isNewUnitSelected = value === "neuHinzufuegen";
            var neueEinheitFormular = document.getElementById('neueEinheitFormular');
            var volumenBlock = document.getElementById('volumen_block');
            var volumenInput = document.getElementById('volumen');

            // Toggle the new unit form visibility
            neueEinheitFormular.style.display = isNewUnitSelected ? 'block' : 'none';

            // Set the required attribute for inputs in the new unit form based on its visibility
            var inputs = neueEinheitFormular.getElementsByTagName('input');
            for (var i = 0; i < inputs.length; i++) {
                inputs[i].required = isNewUnitSelected;
            }      

            // Adjust visibility and required attribute for the volumen input
            var selectedOption = document.querySelector('#einheit_id option:checked')
            var displayVolumen = 'none';
            if (value === '2' || 
                (isNewUnitSelected && document.getElementById('basisEinheit').value === 'Liter')|| 
                (selectedOption.getAttribute('data-basis') === '2')) {
                    displayVolumen = 'block';
            }
    
            volumenBlock.style.display = displayVolumen;
            volumenInput.required = displayVolumen === 'block';

            if (isNewUnitSelected)
            checkBasisEinheit(document.getElementById('basisEinheit').value);

            // Neuer Teil: Überprüfen, ob die ausgewählte Einheit einen speziellen Umrechnungsfaktor benötigt
            var selectedOption = document.querySelector('#einheit_id option:checked');
            if (selectedOption !== null) { // Check if selectedOption is not null
                var hatSpezifischenUmrechnungsfaktor = selectedOption.getAttribute('data-spezifischer-umrechnungsfaktor') === '1'; // Annahme: '1' bedeutet wahr
                // Sichtbarkeit und Required-Status für das Umrechnungsfaktor-Feld anpassen
                var umrechnungsfaktorFeld = document.getElementById('umrechnungsfaktorFeld'); // Stellen Sie sicher, dass Sie ein entsprechendes Feld im HTML-Markup haben
                umrechnungsfaktorFeld.style.display = hatSpezifischenUmrechnungsfaktor ? 'block' : 'none';
                umrechnungsfaktorFeld.required = hatSpezifischenUmrechnungsfaktor;
            } else {
                // Handle the case where no option is selected or exists
                document.getElementById('umrechnungsfaktorFeld').style.display = 'none';
                document.getElementById('umrechnungsfaktorFeld').required = false;
                }
        }
        // Event-Listener für die Auswahländerung hinzufügen
        document.getElementById('einheit_id').addEventListener('change', function() {
            checkNeueEinheit(this.value);
        });
        // Initialen Check ausführen
        checkNeueEinheit(document.getElementById('einheit_id').value);
        // This function updates the visibility of the volumen input based on the selected base unit
        
        function checkBasisEinheit(value) {
            var volumenBlock = document.getElementById('volumen_block');
            var volumenInput = document.getElementById('volumen');

            var displayVolumen = value === 'Liter' ? 'block' : 'none';
            volumenBlock.style.display = displayVolumen;
            volumenInput.required = displayVolumen === 'block';
   
            var info_speziel = document.getElementById('info_speziel');
            info_speziel.style.display = value === 'speziell' ?  "block" : 'none';            
            }
         </script>
        <input type="submit" value="Zutat Hinzufügen">         
    </div>
<!-- Your form elements here -->
</div>
</form>

Path: ./http/Views/templates/rezepteFormular.php
Content:
    <?php
    // Fehlerberichterstattung einschalten
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);

    // Verbindung zur Datenbank herstellen
    require_once '../../Utils/db_connect.php';

    // Funktion zum Überprüfen der Existenz einer Zutat und Rückgabe eines JSON-Objekts für die Autovervollständigung
    if(isset($_GET['action']) && $_GET['action'] == 'checkZutat' && !empty($_GET['zutatName'])) {
        $zutatName = $_GET['zutatName'];

        $stmt = $conn->prepare("SELECT id, name FROM zutaten_namen WHERE name LIKE ?");
        $searchTerm = "%" . $zutatName . "%";
        $stmt->bind_param("s", $searchTerm);
        $stmt->execute();
        $result = $stmt->get_result();

        $zutaten = [];
        while($row = $result->fetch_assoc()) {
            $zutaten[] = ['id' => $row['id'], 'name' => $row['name']];
        }

        echo json_encode($zutaten);
        exit;
    }
    ?>
    <form action="rezepte_post.php" method="post" enctype="multipart/form-data">
        <label for="titel">Titel:</label><br>
        <input type="text" id="titel" name="titel" required><br>

        <label for="untertitel">Untertitel:</label><br>
        <input type="text" id="untertitel" name="untertitel"><br>

        <label for="zubereitungszeit">Zubereitungszeit (in Minuten):</label><br>
        <input type="number" id="zubereitungszeit" name="zubereitungszeit" required><br>

        <label for="basis_personenanzahl">Basis Personenanzahl:</label><br>
        <input type="number" id="basis_personenanzahl" name="basis_personenanzahl" required><br>

        <label for="bilder">Bilder:</label><br>
        <input type="file" id="bilder" name="bilder"><br>

        <div id="zutatenContainer">
        </div>
        <br>

        <input type="submit" value="Rezept Hinzufügen">
    </form>

    <script>
document.addEventListener("DOMContentLoaded", function() {
    var zutatenNameInput = document.getElementById('zutaten_name');
    zutatenNameInput.addEventListener('blur', function() {
        var zutatenName = this.value;
        if (zutatenName.length > 0) {
            // Führen Sie eine AJAX-Anfrage durch, um zu überprüfen, ob der Name existiert
            fetch(`.Views/pages/rezepte.php?action=checkZutat&zutatName=${encodeURIComponent(zutatenName)}`)
            .then(response => response.json())
            .then(data => {
                // Annahme: Die API gibt ein leeres Array zurück, wenn keine Zutaten gefunden werden
                if (data.length > 0) {
                    // Zutat existiert, blenden Sie den relevanten Formularteil aus
                    document.getElementById('existiertUnterAnderemNamen').closest('form').querySelectorAll("input[type='submit']").forEach(function(submitBtn) {
                        submitBtn.closest('div').style.display = 'none';
                    });
                } else {
                    // Zutat existiert nicht, zeigen Sie den relevanten Formularteil an
                    document.getElementById('existiertUnterAnderemNamen').closest('form').querySelectorAll("input[type='submit']").forEach(function(submitBtn) {
                        submitBtn.closest('div').style.display = 'block';
                    });
                }
            });
        }
    });
});

function addZutatBlock() {
    const container = document.getElementById('zutatenContainer');
    const newIndex = container.querySelectorAll('.zutatBlock').length;

    // Erstellen des Zutatenblocks
    const newZutatBlock = document.createElement('div');
    newZutatBlock.classList.add('zutatBlock');
    container.appendChild(newZutatBlock);

    // Laden des Namensfeldes über zutatenFormular.php
    fetch('../templates/zutatenFormular.php')
    .then(response => response.text())
    .then(htmlContent => {
        // HTML für das Namensfeld setzen
        newZutatBlock.innerHTML = htmlContent;
        
        // HTML für das Mengenfeld direkt hinzufügen
        const mengeHTML = `
            <label>Menge:</label>
            <input type="text" name="zutaten[${newIndex}][menge]"><br><br>
        `;
        newZutatBlock.innerHTML += mengeHTML;

        // Event-Listener für das neue Block hinzufügen
        initInputListener(newZutatBlock, newIndex);
    })
    .catch(error => console.error('Fehler beim Laden des Zutatenblocks:', error));
}

function initInputListener(block, index) {
    const inputs = block.querySelectorAll('input');
    inputs.forEach(input => {
        input.addEventListener('input', function(event) {
            // Prüfen, ob es der erste Input ist und ob ein weiterer Block hinzugefügt werden soll
            const isInputFilled = event.target.value.trim() !== '';
            const alreadyAdded = block.dataset.added === "true";
            if (isInputFilled && !alreadyAdded) {
                addZutatBlock();
                block.dataset.added = "true"; // Markieren, dass ein neuer Block hinzugefügt wurde, um Doppelungen zu vermeiden
            }
        });
    });
}
</script>


