Path: ./http\index.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);


require_once './Utils/db_connect.php';
require_once './Utils/SessionManager.php';

checkUserAuthentication();


$sql = "SELECT is_temporary FROM users WHERE id = ?";
$stmt = $conn->prepare($sql);
$userId = $_SESSION['userId'];
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();
$user = $result->fetch_assoc();

if ($user['is_temporary']) {
    // Der Nutzer hat ein temporäres Profil
    $istTemporaer = true;
} else {
    $istTemporaer = false;
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include './templates/header.php'; ?>
    <title>Willkommen bei EatsElements</title>
</head>
<body>
    <header>
        <?php include_once './templates/navigation.php'; ?> <!-- Pfad entsprechend Ihrer Struktur anpassen -->
    </header>
    <main>
        <div class="welcome-container">
            <h1>Willkommen bei EatsElements</h1>
                <h2>Sie sind angemeldet als <?= htmlspecialchars($_SESSION['username']); ?></h2>
            <p>Entdecken Sie neue Rezepte, planen Sie Ihre Mahlzeiten und verwalten Sie Ihren Vorratsschrank mit Leichtigkeit.</p>
                <?php if ($istTemporaer): ?>
                <div>
                    <p><a href="login.html">Anmelden</a> für ein vollständiges Erlebnis.</p>
                    <p>Noch kein Konto? <a href="register.html">Registrieren Sie sich hier</a>.</p>
                </div>
            <?php else: ?>
                <p>Bereit, Ihr kulinarisches Abenteuer zu beginnen? Erkunden Sie unsere Rezepte oder planen Sie Ihre nächste Mahlzeit.</p>
            <?php endif; ?>
        </div>
    </main>
    <footer>
        <div class="footer-content">
            <p>&copy; <?= date("Y") ?> Transformations-Design. Alle Rechte vorbehalten.</p>
        </div>
    </footer>
</body>
</html>


Path: ./http\login.html
Content:
<!-- public/login.php -->
<!DOCTYPE html>
<html>
<head>    
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel='stylesheet' href='style.css'>
    <title>Login</title>
</head>
<body>
    <form id="loginForm" action="Controllers/Login.php" method="post">
        <h2>Login</h2>
        <input type="text" id="username" name="username" placeholder="Benutzername" required>
        <input type="password" id="password" name="password" placeholder="Passwort" required>
        <button type="submit">Einloggen</button>
        <p>Noch nicht registriert? <a href="register.php">Registrieren</a></p>
    </form>
    <script src="js/login.js"></script>
</body>
</html>


Path: ./http\register.html
Content:
<!DOCTYPE html>
<html>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel='stylesheet' href='style.css'>
    <title>Registrierung</title>
</head>
<body>
    <form id="registerForm" action="Controllers/register.php" method="post">
        <h2>Registrierung</h2>
        <input type="text" id="newUsername" name="username" placeholder="Benutzername" required>
        <input type="password" id="newPassword" name="password" placeholder="Passwort" required>
        <button type="submit">Registrieren</button>
    </form>
    <h1> ihr müsste keine mail adresse angeben, und bitte verwende nicht euer standart password</h1>
    <script src="js/register.js"></script>
</body>
</html>


Path: ./http\reset.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
require_once 'Utils/SessionManager.php';
require_once 'Utils/db_connect.php';
checkUserAuthentication();
$userId = $_SESSION['userId'];

if (isset($_SESSION['is_temp_user'])) {
    echo "Die Freunde-Seite ist für temporäre Profile nicht verfügbar.";
    exit; // Stoppt die Ausführung weiteren Codes
}
// Leere alle Tabellen außer 'users'
$tablesToReset = ['konventionen','zutaten_namen','rezept_zutaten', 'essenplan', 'einkaufsliste', 'vorratsschrank', 'rezepte','naehrstoffe', 'zutaten', 'kategorien'];
foreach ($tablesToReset as $table) {
    $conn->query("DELETE FROM `$table`"); // Verwende DELETE statt TRUNCATE
    $conn->query("ALTER TABLE `$table` AUTO_INCREMENT = 1"); // Setze den Auto-Increment-Wert zurück, falls gewünscht
}

// Weiterleitung zu test.php
header("Location: /test.php");
exit;
?>


Path: ./http\style.css
Content:
/* Grundlegende Stile für alle Geräte */

body {font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; /* Moderne, lesbare Schriftart */
    line-height: 1.6;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4; /* Hintergrundfarbe für einen leichteren Look */
}

nav ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    background-color: #333;
}

nav li {
    text-align: center; /* Zentriert die Navigationselemente auf allen Geräten */
}

nav li a {
    display: block;
    color: white;
    padding: 14px 16px;
    text-decoration: none;
}

nav li a:hover, nav li a:focus {
    background-color: #555; /* Dunkleres Grau für Hover-/Fokuseffekt */
}

/* Verbesserungen für Mobilgeräte */
@media (max-width: 600px) {
    nav ul {
        padding: 0;
    }

    nav li {
        display: block; /* Stapelt die Links auf kleinen Bildschirmen */
    }

    nav li a {
        text-align: left; /* Text linksbündig, mit Padding für Touch-Freundlichkeit */
        padding: 20px; /* Größeres Padding für leichteres Antippen */
    }

    .welcome-container {
        padding: 20px; /* Gibt dem Hauptinhalt etwas Raum */
        background-color: #fff; /* Heller Hintergrund für den Inhalt */
        margin: 20px; /* Fügt außen einen Margin hinzu, um nicht am Bildschirmrand zu kleben */
        box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Leichter Schatten für eine schwebende Optik */
    }

    body {
        font-size: 18px; /* Größere Schrift für bessere Lesbarkeit */
    }

    h1 {
        font-size: 24px; /* Größere Überschrift für mehr Aufmerksamkeit */
        margin-top: 0; /* Entfernt den oberen Margin der Überschrift für konsistenten Raum */
    }

    a {
        background-color: #007bff; /* Helle, auffällige Farbe für Links */
        color: white;
        padding: 10px 15px;
        border-radius: 5px; /* Abgerundete Ecken für einen modernen Look */
        margin-top: 10px; /* Abstand oben, um Links voneinander zu trennen */
        display: inline-block; /* Behält die Link-Struktur bei, ermöglicht Padding */
        text-decoration: none; /* Entfernt die Unterstreichung für eine saubere Optik */
    }

    a:hover, a:focus {
        background-color: #0056b3; /* Dunklere Farbe für Hover-/Fokuseffekt */
    }
}


Path: ./http\config\config.php
Content:
<?php
// Datenbankkonfiguration
define('DB_SERVER', 'db5015005409.hosting-data.io');
define('DB_USER', 'dbu942629');
define('DB_PASSWORD', 'LYpLxztKkL7HQW5rXYG2nDAxcwBFNgQMY8R8sM2E77vJB4AwM9');
define('DB_NAME', 'dbs12468479');
?>

Path: ./http\Controllers\AddToEinkaufsliste.php
Content:
<?php
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);
    require_once __DIR__ . '/../Utils/db_connect.php';
    require_once __DIR__ . '/../Utils/SessionManager.php';
    checkUserAuthentication();

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {
        if (empty($_POST['zutatenName']) || empty($_POST['menge'])) {
            exit('Fehler: Zutatenname oder Menge fehlt.');
        }
        $zutatenName = $_POST['zutatenName'];
        $menge = $_POST['menge'];
        $userId = $_SESSION['userId']; // Stellen Sie sicher, dass die Session gestartet wurde

        // Überprüfen, ob die Zutat bereits existiert
        $stmt = $conn->prepare("SELECT id FROM zutaten_namen WHERE name = ?");
        $stmt->bind_param("s", $zutatenName);
        $stmt->execute();
        $result = $stmt->get_result();
        if ($result->num_rows === 0) {  
            // Zutat existiert nicht, also füge sie ein
            $stmt = $conn->prepare("INSERT INTO zutaten (kategorie_id) VALUES (1)");
            $stmt->execute();
            $zutatId = $conn->insert_id;
            
            // Füge den Namen in zutaten_namen ein

            $stmt = $conn->prepare("INSERT INTO zutaten_namen (name, zutat_id) VALUES (?, ?)");
            $stmt->bind_param("si", $zutatenName, $zutatId);
            $stmt->execute();
        } else {
            // Zutat existiert, hole die zutat_id
            $zutat = $result->fetch_assoc();
            $zutatId = $zutat['id'];
        }

        // Füge die Zutat in die Einkaufsliste ein
        $stmt = $conn->prepare("INSERT INTO einkaufsliste (user_id, zutat_id, menge) VALUES (?, ?, ?)");
        $stmt->bind_param("iis", $userId, $zutatId, $menge);
        $stmt->execute();
        header("Location: /Views/pages/einkaufsliste.php");
    exit;
    }
?>


Path: ./http\Controllers\einladung_erstellen.php
Content:
<?php
require_once '../Utils/SessionManager.php';
checkAccess();
require_once '../Utils/db_connect.php';

$userId = $_SESSION['id'];

// Token des eingeloggten Benutzers abrufen
$sql = "SELECT freundes_token FROM users WHERE id = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();
if ($row = $result->fetch_assoc()) {
    $freundesToken = $row['freundes_token'];
    $einladungsLink = "https://noadscollective.de/freunde.php?token=" . $freundesToken;
} else {
    echo "Ein Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.";
    exit;
}
?>


Path: ./http\Controllers\login.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once __DIR__ . '/../Utils/db_connect.php';
require_once __DIR__ . '/../Utils/SessionManager.php';
checkUserAuthentication();

function sanitizeInput($data) {
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
}

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $username = sanitizeInput($_POST['username']);
    $password = sanitizeInput($_POST['password']);

    // Validate inputs
    if (empty($username) || empty($password)) {
        echo "Bitte Benutzername und Passwort eingeben.";
        exit;
    }

    // Prepare SQL statement to prevent SQL injection
    $sql = "SELECT id, username, password FROM users WHERE username = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("s", $username);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows === 1) {
        $user = $result->fetch_assoc();

        if (password_verify($password, $user['password'])) {
            // Set session variables
            $_SESSION['id'] = $user['id'];
            $_SESSION['username'] = $user['username'];
            $_SESSION['is_temporary'] = False;
        
            // Generate a random token for the cookie
            $cookieToken = bin2hex(random_bytes(25));
        
            // Set cookie for authentication
            setcookie('authToken', $cookieToken, time() + (86400 * 365), "/"); // 86400 = 1 day, adjust as needed
        
            // Update the cookie token in the database
            $updateSql = "UPDATE users SET cookie_auth_token = ? WHERE id = ?";
            $updateStmt = $conn->prepare($updateSql);
            $updateStmt->bind_param("si", $cookieToken, $user['id']);
            $updateStmt->execute();
            $updateStmt->close();
        
            // Redirect to the main page
            header("Location: /index.php");
            exit;
        } else {
            // Incorrect password
            echo "Falscher Benutzername oder Passwort.";
        }
    } else {
        echo "Falscher Benutzername oder Passwort.";
    }

    $stmt->close();
}
$conn->close();
?>


Path: ./http\Controllers\logout.php
Content:
<?php
session_start();
session_unset();
session_destroy();
setcookie('auth', '', time() - 3600, "/"); // Löscht das Auth-Cookie
header("Location: /login.html");
exit;
?>


Path: ./http\Controllers\MoveToPantry.php
Content:
<?php
require_once __DIR__ . '/../Utils/db_connect.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $itemId = $_POST['id'];

    // Artikel aus der Einkaufsliste abrufen
    $getItemStmt = $conn->prepare("SELECT user_id, zutat_id, menge, verbrauchsdatum FROM einkaufsliste WHERE id = ?");
    $getItemStmt->bind_param("i", $itemId);
    $getItemStmt->execute();
    $itemResult = $getItemStmt->get_result();
    $item = $itemResult->fetch_assoc();

    // Artikel in den Vorratsschrank einfügen
    $insertStmt = $conn->prepare("INSERT INTO vorratsschrank (user_id, zutat_id, menge, verbrauchsdatum) VALUES (?, ?, ?, ?)");
    $insertStmt->bind_param("iiss", $item['user_id'], $item['zutat_id'], $item['menge'], $item['verbrauchsdatum']);
    $insertStmt->execute();

    // Artikel aus der Einkaufsliste entfernen
    $deleteStmt = $conn->prepare("DELETE FROM einkaufsliste WHERE id = ?");
    $deleteStmt->bind_param("i", $itemId);
    $deleteStmt->execute();

    header("Location: /Views/pages/einkaufsliste.php?status=moved");
    exit;
}
?>


Path: ./http\Controllers\passwort_aendern_handler.php
Content:
<?php
require_once '../Utils/db_connect.php';
require_once '../Utils/SessionManager.php';
checkAccess();


if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $userId = $_SESSION['id'];
    $currentPassword = $_POST['currentPassword'];
    $newPassword = $_POST['newPassword'];

    // Überprüfe das aktuelle Passwort
    $stmt = $conn->prepare("SELECT password FROM users WHERE id = ?");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $result = $stmt->get_result();
    if ($user = $result->fetch_assoc()) {
        if (password_verify($currentPassword, $user['password'])) {
            // Aktualisiere das Passwort
            $newHashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);
            $updateStmt = $conn->prepare("UPDATE users SET password = ? WHERE id = ?");
            $updateStmt->bind_param("si", $newHashedPassword, $userId);
            if ($updateStmt->execute()) {
                echo "Passwort erfolgreich geändert.";
            } else {
                echo "Fehler beim Aktualisieren des Passworts.";
            }
        } else {
            echo "Das aktuelle Passwort ist falsch.";
        }
    } else {
        echo "Benutzer nicht gefunden.";
    }
}
?>


Path: ./http\Controllers\PlanRecipe.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../Utils/db_connect.php';
require_once '../Utils/SessionManager.php';
checkUserAuthentication();

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['rezept_id'], $_POST['datum'])) {
    $rezeptId = $_POST['rezept_id'];
    $datum = $_POST['datum'];
    $userId = $_SESSION['userId'];

    // Bereiten Sie die SQL-Anweisung vor, um das Rezept zum Essensplan hinzuzufügen
    $sql = "INSERT INTO essenplan (user_id, datum, rezept_id) VALUES (?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("isi", $userId, $datum, $rezeptId);

    if ($stmt->execute()) {
        // Hole die Zutaten des Rezepts
        $sqlZutaten = "SELECT zutat_id, menge FROM rezept_zutaten WHERE rezept_id = ?";
        $stmtZutaten = $conn->prepare($sqlZutaten);
        $stmtZutaten->bind_param("i", $rezeptId);
        $stmtZutaten->execute();
        $resultZutaten = $stmtZutaten->get_result();

        while ($zutat = $resultZutaten->fetch_assoc()) {
            $zutatId = $zutat['zutat_id'];
            $benotigteMenge = $zutat['menge'];

            // Überprüfe den Vorratsschrank
            $sqlVorrat = "SELECT id, menge, verbrauchsdatum FROM vorratsschrank WHERE zutat_id = ? AND user_id = ? ORDER BY verbrauchsdatum IS NULL, verbrauchsdatum ASC";
            $stmtVorrat = $conn->prepare($sqlVorrat);
            $stmtVorrat->bind_param("ii", $zutatId, $userId);
            $stmtVorrat->execute();
            $resultVorrat = $stmtVorrat->get_result();
            $verarbeitet = false;

            while (!$verarbeitet && $vorrat = $resultVorrat->fetch_assoc()) {
                $vorratMenge = $vorrat['menge'];
                if ($vorratMenge >= $benotigteMenge) {
                    // Menge im Vorrat ausreichend, aktualisiere oder setze Verbrauchsdatum
                    $neueMenge = $vorratMenge - $benotigteMenge;
                    $updateVorratSql = "UPDATE vorratsschrank SET verbrauchsdatum = COALESCE(verbrauchsdatum, ?) WHERE id = ?";
                    $updateVorratStmt = $conn->prepare($updateVorratSql);
                    $updateVorratStmt->bind_param("si", $datum, $vorrat['id']);
                    $updateVorratStmt->execute();
                    $verarbeitet = true;
                } else {
                    // Nicht genug Menge, setze Verbrauchsdatum und verringere die benötigte Menge
                    $benotigteMenge -= $vorratMenge;
                    $updateVorratSql = "UPDATE vorratsschrank SET verbrauchsdatum = COALESCE(verbrauchsdatum, ?) WHERE id = ?";
                    $updateVorratStmt = $conn->prepare($updateVorratSql);
                    $updateVorratStmt->bind_param("si", $datum, $vorrat['id']);
                    $updateVorratStmt->execute();
                }
            }

            // Falls nach Vorratsprüfung noch Menge benötigt wird, prüfe und aktualisiere die Einkaufsliste
            if ($benotigteMenge > 0 && !$verarbeitet) {
                $sqlEinkaufsliste = "SELECT id, menge FROM einkaufsliste WHERE zutat_id = ? AND user_id = ? AND verbrauchsdatum IS NULL";
                $stmtEinkaufsliste = $conn->prepare($sqlEinkaufsliste);
                $stmtEinkaufsliste->bind_param("ii", $zutatId, $userId);
                $stmtEinkaufsliste->execute();
                $resultEinkaufsliste = $stmtEinkaufsliste->get_result();

                if ($eintrag = $resultEinkaufsliste->fetch_assoc()) {
                    // Eintrag vorhanden, aktualisiere die Menge
                    $aktualisierteMenge = $eintrag['menge'] + $benotigteMenge;
                    $updateEinkaufslisteSql = "UPDATE einkaufsliste SET menge = ?, verbrauchsdatum = ? WHERE id = ?";
                    $updateEinkaufslisteStmt = $conn->prepare($updateEinkaufslisteSql);
                    $updateEinkaufslisteStmt->bind_param("isi", $aktualisierteMenge, $datum, $eintrag['id']);
                    $updateEinkaufslisteStmt->execute();
                } else {
                    // Kein Eintrag vorhanden, füge einen neuen Eintrag hinzu
                    $insertEinkaufslisteSql = "INSERT INTO einkaufsliste (user_id, zutat_id, menge, verbrauchsdatum) VALUES (?, ?, ?, ?)";
                    $insertEinkaufslisteStmt = $conn->prepare($insertEinkaufslisteSql);
                    $insertEinkaufslisteStmt->bind_param("iiis", $userId, $zutatId, $benotigteMenge, $datum);
                    $insertEinkaufslisteStmt->execute();
                }
            }

        }

        // Erfolg: Weiterleitung zurück zum Rezept-Detail oder einer Erfolgsmeldung
        header("Location: /Views/pages/rezept_detail.php?datum=" . urlencode($datum));
        exit();
    } else {
        // Fehlerbehandlung
        echo "Fehler beim Hinzufügen des Rezepts zum Essensplan.";
    }
}
?>



Path: ./http\Controllers\register.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once __DIR__ . '/../Utils/db_connect.php';
require_once __DIR__ . '/../Utils/SessionManager.php';
checkUserAuthentication();

echo $_SESSION['userId'];
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Hash das Passwort für die Speicherung
    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);

    if (isset($_SESSION['userId']) && $_SESSION['is_temporary'] == true) {
        // Das bestehende temporäre Profil wird aktualisiert
        $userId = $_SESSION['userId'];
        $sql = "UPDATE users SET username=?, password=?, is_temporary=0 WHERE id=?";
        $stmt = $conn->prepare($sql);
        
        if ($stmt->execute([$username, $hashedPassword, $userId])) {
            
            // Aktualisiere Session-Informationen
            $_SESSION['is_temporary'] = false;
            $_SESSION['username'] = $username;
            // Optional: Setze ein erfolgreiches Login-Flag oder führe eine Weiterleitung durch
            echo "Registrierung erfolgreich!";
            header('Location: /index.php'); // Weiterleitung zur Startseite
            exit;
        } else {
            echo "Fehler beim Aktualisieren des Profils.";
        }
    } else {
        echo "Keine gültige Benutzer-ID gefunden. Registrierung fehlgeschlagen.";
    }
}
?>



Path: ./http\Controllers\RemoveFriend.php
Content:
<?php
require_once 'Utils/SessionManager.php';
require_once 'Utils/db_connect.php';

if (!isUserLoggedIn()) {
    header("Location: login.html");
    exit;
}

$userId = $_SESSION['id'];
$friendId = $_POST['friendId'] ?? null; // Ersetzen Sie dies durch die tatsächliche Benutzer-ID des Freundes

if ($friendId) {
    // Freund-Beziehung entfernen
    $sql = "DELETE FROM freunde WHERE (user_id_1 = ? AND user_id_2 = ?) OR (user_id_1 = ? AND user_id_2 = ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("iiii", $userId, $friendId, $friendId, $userId);

    if ($stmt->execute()) {
        echo "Freund erfolgreich entfernt.";
    } else {
        echo "Fehler beim Entfernen des Freundes.";
    }
    $stmt->close();
} else {
    echo "Keine Freund-ID angegeben.";
}

$conn->close();
header("Location: freunde.php"); // Weiterleitung zur Freundeseite
exit;
?>


Path: ./http\Controllers\RemoveFromEinkaufsliste.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Require necessary utility files
require_once __DIR__ . '/../Utils/db_connect.php';
require_once __DIR__ . '/../Utils/SessionManager.php';

// Check user authentication
checkUserAuthentication();

// Check if the request method is POST and the required 'id' field is set
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['id'])) {
    $itemId = intval($_POST['id']);
    $userId = $_SESSION['userId']; // Assuming session starts in checkUserAuthentication()

    // Prepare SQL to delete the item from the einkaufsliste where it matches the itemId and belongs to the logged-in user
    $sql = "DELETE FROM einkaufsliste WHERE id = ? AND user_id = ?";
    $stmt = $conn->prepare($sql);

    // Bind parameters and execute statement
    if ($stmt->bind_param("ii", $itemId, $userId)) {
        if ($stmt->execute()) {
            // On successful execution, redirect back to the einkaufsliste page or wherever is appropriate
            header("Location: /Views/pages/einkaufsliste.php?status=removed");
            exit;
        } else {
            // Handle error in execution
            echo "Fehler beim Entfernen des Eintrags.";
        }
    } else {
        // Handle error in preparing statement
        echo "Fehler bei der Vorbereitung der Anfrage.";
    }

    // Close statement and connection
    $stmt->close();
    $conn->close();
} else {
    // Redirect or error message if not accessed correctly
    header("Location: /Views/pages/einkaufsliste.php?error=invalidaccess");
    exit;
}
?>


Path: ./http\Controllers\RespondToFriendRequest.php
Content:
<?php
require_once 'Utils/SessionManager.php';
require_once 'Utils/db_connect.php';

// Stellen Sie sicher, dass der Benutzer eingeloggt ist
if (!isUserLoggedIn()) {
    header("Location: /login.html");
    exit;
}

// Überprüfen, ob die erforderlichen Daten übergeben wurden
if (isset($_POST['request_id']) && isset($_POST['action'])) {
    $requestId = intval($_POST['request_id']);
    $action = $_POST['action'];

    // Verbindung zur Datenbank
    $conn = ...; // Ihre bestehende Datenbankverbindung

    if ($action === 'accept') {
        // Akzeptieren der Freundschaftsanfrage
        // Aktualisieren Sie zuerst den Status in der freundschaftsanfragen Tabelle
        $updateStmt = $conn->prepare("UPDATE freundschaftsanfragen SET status = 'accepted' WHERE id = ?");
        $updateStmt->bind_param("i", $requestId);
        $updateStmt->execute();

        // Dann fügen Sie die Freundschaft in die freunde Tabelle ein
        // Angenommen, Sie haben die Sender- und Empfänger-IDs in der Anfrage gespeichert
        $stmt = $conn->prepare("SELECT sender_id, empfaenger_id FROM freundschaftsanfragen WHERE id = ?");
        $stmt->bind_param("i", $requestId);
        $stmt->execute();
        $result = $stmt->fetch_assoc();

        $insertStmt = $conn->prepare("INSERT INTO freunde (user_id_1, user_id_2) VALUES (?, ?)");
        $insertStmt->bind_param("ii", $result['sender_id'], $result['empfaenger_id']);
        $insertStmt->execute();
    } elseif ($action === 'decline') {
        // Ablehnen der Freundschaftsanfrage
        $updateStmt = $conn->prepare("UPDATE freundschaftsanfragen SET status = 'declined' WHERE id = ?");
        $updateStmt->bind_param("i", $requestId);
        $updateStmt->execute();
    }

    // Weiterleitung oder Ausgabe
    header("Location: /freunde.php");
    exit;
} else {
    echo "Fehler: Daten fehlen.";
}
?>


Path: ./http\Controllers\SendFriendRequest.php
Content:
<?php
session_start();
require_once 'db_connect.php'; // Pfad zur Datenbankverbindung

// Überprüfen, ob der Benutzer eingeloggt ist
if (!isset($_SESSION['loggedin']) || $_SESSION['loggedin'] !== true) {
    exit('Sie müssen sich zuerst anmelden');
}

// Überprüfen, ob die Freund-ID gesetzt ist
if (!isset($_POST['friendId'])) {
    exit('Keine Freund-ID angegeben');
}

$userId = $_SESSION['id'];
$friendId = $_POST['friendId'];

// Überprüfen, ob bereits eine Freundschaftsanfrage besteht
$stmt = $conn->prepare("SELECT * FROM freundschaftsanfragen WHERE sender_id = ? AND empfaenger_id = ?");
$stmt->bind_param("ii", $userId, $friendId);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows > 0) {
    exit('Eine Freundschaftsanfrage besteht bereits.');
}

// Einfügen der Freundschaftsanfrage in die Datenbank
$insertStmt = $conn->prepare("INSERT INTO freundschaftsanfragen (sender_id, empfaenger_id, status) VALUES (?, ?, 'pending')");
$insertStmt->bind_param("ii", $userId, $friendId);

if ($insertStmt->execute()) {
    echo "Freundschaftsanfrage erfolgreich gesendet!";
} else {
    echo "Fehler: " . $conn->error;
}

$conn->close();
?>


Path: ./http\Controllers\ViewFriendRequests.php
Content:
<?php
require_once 'Utils/SessionManager.php'; // Stellen Sie sicher, dass dies zu Ihrer Session-Verwaltung passt

if (!isUserLoggedIn()) {
    header("Location: login.html"); // Umleitung zum Login, falls nicht eingeloggt
    exit;
}
$userId = $_SESSION['id']; // Angenommen, die Benutzer-ID wird in der Session gespeichert

require_once 'Utils/db_connect.php'; // Passen Sie dies an Ihren Pfad zur Datenbankverbindung an

$sql = "SELECT id, sender_id FROM freundschaftsanfragen WHERE empfaenger_id = ? AND status = 'pending'";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();

$anfragen = [];
while ($row = $result->fetch_assoc()) {
    $anfragen[] = $row;
}

?>

Path: ./http\Controllers\ViewFriends.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once 'Utils/SessionManager.php'; // Pfad anpassen
require_once 'Utils/db_connect.php'; // Pfad anpassen

// Stellen Sie sicher, dass der Benutzer eingeloggt ist
if (!isUserLoggedIn()) {
    header("Location: login.html");
    exit;
}

$userId = $_SESSION['id'];

// SQL-Abfrage, um Freunde des Benutzers zu finden
$sql = "SELECT u.id, u.username 
        FROM users u
        INNER JOIN freunde f ON u.id = f.user_id_1 OR u.id = f.user_id_2
        WHERE (f.user_id_1 = ? OR f.user_id_2 = ?) AND u.id != ?";

$stmt = $conn->prepare($sql);
$stmt->bind_param("iii", $userId, $userId, $userId);
$stmt->execute();
$result = $stmt->get_result();

$freunde = [];
while ($row = $result->fetch_assoc()) {
    $freunde[] = $row;
}

$conn->close();
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Freundesliste</title>
    <!-- Fügen Sie hier Ihren CSS-Link ein -->
</head>
<body>
    <header>
        <!-- Navigation und so weiter -->
    </header>
    <main>
        <h2>Meine Freunde</h2>
        <?php if (count($freunde) > 0): ?>
            <ul>
            <?php foreach ($freunde as $freund): ?>
                <li><?= htmlspecialchars($freund['username']) ?></li> <!-- Weitere Informationen anzeigen oder Aktionen ermöglichen -->
            <?php endforeach; ?>
            </ul>
        <?php else: ?>
            <p>Sie haben noch keine Freunde hinzugefügt.</p>
        <?php endif; ?>
    </main>
    <footer>
        <!-- Footer-Inhalt -->
    </footer>
</body>
</html>


Path: ./http\js\heutigesGericht.js
Content:
// Datei: heutigesGericht.js
var likeBtn = document.getElementById('likeBtn');
if (likeBtn) {
    likeBtn.addEventListener('click', function() {
        // Implementieren Sie Logik, um ein "Like" zu senden
    alert('Geliked!');
    });
}
var dislikeBtn = document.getElementById('dislikeBtn');
if (dislikeBtn) {
    dislikeBtn.addEventListener('click', function() {
     // Implementieren Sie Logik, um ein "Dislike" zu senden
     alert('Disliked!');
    });
}

function discardRecipe() {
    // Implementieren Sie Logik, um das Rezept zu verwerfen
    alert('Rezept verworfen');
}


Path: ./http\js\login.js
Content:
// Modified login.js
document.addEventListener('DOMContentLoaded', function() {
    var loginForm = document.getElementById('loginForm');

    loginForm.addEventListener('submit', function(e) {
        e.preventDefault();

        var username = document.getElementById('username').value;

        var password = document.getElementById('password').value;

        // Einfache Clientseitige Validierung
        if (!username || !password) {
            alert("Bitte Benutzername und Passwort eingeben.");
            return;
        }

        // Anmeldedaten an Server senden
        var xhr = new XMLHttpRequest();xhr.open('POST', 'Controllers/login.php', true);
        xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        xhr.onload = function() {
            // Antwort vom Server verarbeiten
            if (this.status == 200) {
                if (this.responseText.includes("Falsches Passwort") || this.responseText.includes("Benutzername existiert nicht")) {
                    alert(this.responseText);
                } else {
                    window.location.href = 'index.php'; // Weiterleitung zur Hauptseite
                }
            } else {
                alert("Es gab einen Fehler beim Senden der Anfrage.");
            }
        };

        xhr.send('username=' + encodeURIComponent(username) + '&password=' + encodeURIComponent(password));
    });
});



Path: ./http\js\register.js
Content:
document.addEventListener('DOMContentLoaded', function() {
    var registerForm = document.getElementById('registerForm');

    registerForm.addEventListener('submit', function(e) {
        e.preventDefault();

        // Validierung
        var username = document.getElementById('newUsername').value;
        var password = document.getElementById('newPassword').value;    
        var errorMessages = [];

        if (!username || username.length < 5) {
            errorMessages.push("Benutzername muss mindestens 5 Zeichen lang sein.");
        }

        if (!password || password.length < 8) {
            errorMessages.push("Passwort muss mindestens 8 Zeichen lang sein.");
        }

        // Zeige Fehlermeldungen an, falls vorhanden
        if (errorMessages.length > 0) {
            alert(errorMessages.join('\n'));
            return;
        }

        // Daten an Server senden
        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'Controllers/register.php', true);
        xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        xhr.onload = function() {
            if (this.responseText.includes("Registrierung erfolgreich!") || this.responseText.includes("Benutzername existiert nicht")) {
                window.location.href = 'index.php'; // Weiterleitung zur Hauptseite
            } else {
                alert(this.responseText);
            }
        };

        xhr.send('username=' + encodeURIComponent(username) + '&password=' + encodeURIComponent(password));
    });
});


Path: ./http\templates\header.php
Content:
<meta charset='UTF-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<link rel='stylesheet' href='style.css'>

Path: ./http\templates\navigation.php
Content:
<?php
// Füge die erforderlichen Includes ein, um auf die Benutzerdaten zugreifen zu können
require_once './Utils/db_connect.php';
require_once './Utils/SessionManager.php';

$einkaufsoption = ''; // Initialisiere die Variable

// Überprüfe, ob der Benutzer eingeloggt ist, und hole die Einkaufsoption
$sql = "SELECT einkaufsoption FROM users WHERE id = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();
if ($row = $result->fetch_assoc()) {
    $einkaufsoption = $row['einkaufsoption'];
}
?>

<nav>
    <ul>
        <li><a href="Views/pages/heutiges-gericht.php">Heutiges Gericht</a></li>
        <li><a href="Views/pages/essensplan.php">Essensplan</a></li>
        <li><a href="Views/pages/einkaufsliste.php">Einkaufsliste</a></li>
        <li><a href="Views/pages/vorratsschrank.php">Vorratsschrank</a></li>
        <li><a href="Views/pages/settings.php">Einstellungen</a></li>
        <?php if (!isset($_SESSION['is_temporary'])): ?>
            <li><a href="Views/pages/freunde.php">Freunde</a></li>
        <?php endif; ?>
        <li><a href="Views/pages/profil.php">Profil</a></li>
        <?php if ($einkaufsoption == 'unverpackt'): ?>
            <li><a href="Views/pages/gefaessVerwaltung.php">Gefäßverwaltung</a></li>
        <?php endif; ?>
    </ul>
</nav>


Path: ./http\Utils\db_connect.php
Content:
<?php
// Include your configuration file
require_once __DIR__ . '/../../config/config.php';


// Create a MySQL database connection
$conn = new mysqli(DB_SERVER, DB_USER, DB_PASSWORD, DB_NAME);

// Check the connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Use this $conn object in your other scripts to interact with the database
?>


Path: ./http\Utils\SessionManager.php
Content:
<?php
    require_once 'db_connect.php'; // Stellen Sie sicher, dass der Pfad korrekt ist
    $_SESSION['userId'] = 0;
    $_SESSION['username'] = "";
    $_SESSION['is_temporary'] = False;
    // Starten der Session
    function checkUserAuthentication() {    
        global $conn; // Stellen Sie sicher, dass $conn auf Ihre Datenbankverbindung verweist
        if (isset($_COOKIE['authToken'])) {
            $cookieToken = $_COOKIE['authToken'];
            $sql = "SELECT id,is_temporary,username FROM users WHERE cookie_auth_token = ?";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("s", $cookieToken);
            $stmt->execute();
            $result = $stmt->get_result();

            if ($result->num_rows === 1) {
                $user = $result->fetch_assoc();
                $_SESSION['userId'] = $user['id'];
                $_SESSION['username'] = $user['username'];
                $_SESSION['is_temporary'] = $user['is_temporary'];
                return true;
            }else{
                
            // Kein gültiger Authentifizierungs-Cookie gefunden, erstelle einen temporären Benutzer
            createTemporaryUserAndRedirect();
            return false;
            }
        }else{
            // Kein gültiger Authentifizierungs-Cookie gefunden, erstelle einen temporären Benutzer
            createTemporaryUserAndRedirect();
            return false;
        }

    }

    // Funktion, die aufgerufen wird, um Zugriff ohne Anmeldung zu ermöglichen
    function createTemporaryUserAndRedirect() {
        global $conn;

        // Erstelle einen temporären Benutzernamen
        $username = "anonym" . rand(1000, 9999);
        $isTemporary = True; // Markierung als temporärer Benutzer

        // Generiere ein zufälliges Token für die Authentifizierung
        $authToken = bin2hex(random_bytes(16));

        // Füge den temporären Benutzer in die Datenbank ein
        $stmt = $conn->prepare("INSERT INTO users (username, is_temporary, cookie_auth_token) VALUES (?, ?, ?)");
        $stmt->bind_param("sis", $username, $isTemporary, $authToken);

        if ($stmt->execute()) {
            $_SESSION['userId'] = $stmt->insert_id;
            $_SESSION['username'] = $username;
            $_SESSION['is_temporary'] = $isTemporary;

            // Setze die Authentifizierungs-Cookies
            setcookie('authToken', $authToken, time() + (86400 * 30*365), "/");// 1 jahr Gültigkeit
            // Leite zum Index weiter
            header("Location: /index.php");
            exit;
        } else {
            // Fehlerbehandlung, falls das Einfügen fehlschlägt
            echo "Fehler beim Erstellen eines temporären Benutzerkontos.";
            exit;
        }
    }

Path: ./http\Views\hidden\editRecipe.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
checkAccess();
require_once '../../Utils/db_connect.php';

$userId = $_SESSION['id'];
$recipeId = isset($_GET['recipeId']) ? intval($_GET['recipeId']) : null;

// Wenn recipeId vorhanden ist, überprüfe, ob sie mit der des Benutzers übereinstimmt
if ($recipeId !== null) {
    $stmt = $conn->prepare("SELECT current_editing_recipe_id FROM users WHERE id = ?");
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $result = $stmt->get_result();
    $user = $result->fetch_assoc();

    if ($recipeId != $user['current_editing_recipe_id']) {
        deleteRecipe($recipeId, $conn);
    
        // Kopiere das neue Rezept und erstelle eine neue ID
        $newRecipeId = copyRecipe($recipeId, $conn);
    
        // Aktualisiere die current_editing_recipe_id des Benutzers
        $updateStmt = $conn->prepare("UPDATE users SET current_editing_recipe_id = ? WHERE id = ?");
        $updateStmt->bind_param("ii", $newRecipeId, $userId);
        $updateStmt->execute();
    
        // Setze die neue recipeId für die weitere Verarbeitung
        $recipeId = $newRecipeId;
    }
    $zutatenStmt = $conn->prepare("
            SELECT z.name, rz.menge 
            FROM rezept_zutaten AS rz 
            JOIN zutaten AS z ON rz.zutat_id = z.id 
            WHERE rz.rezept_id = ?
        ");
    $zutatenStmt->bind_param("i", $recipeId);
    $zutatenStmt->execute();
        
    $zutatenResult = $zutatenStmt->get_result();
        
    while ($row = $zutatenResult->fetch_assoc()) {
        $zutaten[] = $row; // Füge jede Zutat zum Array hinzu
    }
}
        
// Funktion zum Kopieren eines Rezepts
function copyRecipe($recipeId, $conn) {
    // Schritt 1: Auslesen des originalen Rezepts
    $stmt = $conn->prepare("SELECT titel, beschreibung, zubereitungszeit FROM rezepte WHERE id = ?");
    $stmt->bind_param("i", $recipeId);
    $stmt->execute();
    $result = $stmt->get_result();
    if ($row = $result->fetch_assoc()) {
        // Schritt 2: Kopieren des Rezepts
        $insertStmt = $conn->prepare("INSERT INTO rezepte (titel, beschreibung, zubereitungszeit) VALUES (?, ?, ?)");
        $insertStmt->bind_param("ssi", $row['titel'], $row['beschreibung'], $row['zubereitungszeit']);
        $insertStmt->execute();

        // Schritt 3: Rückgabe der neuen recipeId
        $newRecipeId = $conn->insert_id;
        return $newRecipeId;
    } else {
        // Fehlerbehandlung, falls das Originalrezept nicht gefunden wurde
        echo "Originalrezept nicht gefunden.";
        exit;
    }
}

function deleteRecipe($recipeId, $conn) {
    // Lösche das Rezept aus der rezepte-Tabelle
    $deleteStmt = $conn->prepare("DELETE FROM rezepte WHERE id = ?");
    $deleteStmt->bind_param("i", $recipeId);

    if ($deleteStmt->execute()) {
        echo "Rezept erfolgreich gelöscht.";
    } else {
        echo "Fehler beim Löschen des Rezepts: " . $conn->error;
    }

    // Zusätzliche Schritte, um alle verknüpften Daten zu bereinigen
    // Beispiel: Löschen von Einträgen aus der rezept_zutaten-Tabelle
    $deleteIngredientsStmt = $conn->prepare("DELETE FROM rezept_zutaten WHERE rezept_id = ?");
    $deleteIngredientsStmt->bind_param("i", $recipeId);
    $deleteIngredientsStmt->execute();

    // Hier können weitere Bereinigungen für andere verknüpfte Tabellen hinzugefügt werden
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Rezept Bearbeiten</title>
    <link rel="stylesheet" href="../../css/styles.css">
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Rezept Bearbeiten</h2>
        <form action="../../Controllers/UpdateRecipe.php" method="post">
            <input type="hidden" name="recipeId" value="<?= $recipeId ?>">
            <label for="titel">Titel:</label>
            <input type="text" id="titel" name="titel" value="<?= htmlspecialchars($rezept['titel']) ?>" required>

            <label for="beschreibung">Beschreibung:</label>
            <textarea id="beschreibung" name="beschreibung" required><?= htmlspecialchars($rezept['beschreibung']) ?></textarea>

            <label for="zeit">Zubereitungszeit (in Minuten):</label>
            <input type="number" id="zeit" name="zeit" value="<?= $rezept['zubereitungszeit'] ?>" required>

            <h3>Zutaten:</h3>
            <table id="zutatenTable">
                <tr>
                    <th>Name</th>
                    <th>Menge</th>
                    <th>Aktion</th>
                </tr>
                <?php 
                $zutaten = []; // Initialize as an empty array
                foreach ($zutaten as $zutat): 
                ?>
                <tr>
                    <td><input type="text" name="zutatenName[]" value="<?= htmlspecialchars($zutat['name']) ?>"></td>
                    <td><input type="text" name="zutatenMenge[]" value="<?= htmlspecialchars($zutat['menge']) ?>"></td>
                    <td><button type="button" class="removeRow">Entfernen</button></td>
                </tr>
                <?php endforeach; ?>
                <tr>
                    <td><input type="text" name="zutatenName[]"></td>
                    <td><input type="text" name="zutatenMenge[]"></td>
                    <td><button type="button" class="removeRow">Entfernen</button></td>
                </tr>
            </table>
            <button type="button" id="addRow">Zutat hinzufügen</button>

            <button type="submit" name="save">Speichern</button>
            <button type="button" name="discard" onclick="window.location.href='heutiges-gericht.php'">Verwerfen</button>
        </form>
    </main>
    <footer>
        <p>&copy; 2024 Transforamtions-Design</p>
    </footer>

    <script>
        document.getElementById('addRow').addEventListener('click', function() {
            var table = document.getElementById('zutatenTable');
            var newRow = table.insertRow();
            var cell1 = newRow.insertCell(0);
            var cell2 = newRow.insertCell(1);
            var cell3 = newRow.insertCell(2);
            cell1.innerHTML = '<input type="text" name="zutatenName[]">';
            cell2.innerHTML = '<input type="text" name="zutatenMenge[]">';
            cell3.innerHTML = '<button type="button" class="removeRow">Entfernen</button>';
        });

        document.getElementById('zutatenTable').addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('removeRow')) {
                var row = e.target.closest('tr');
                row.parentNode.removeChild(row);
            }
        });
    </script>
</body>
</html>


Path: ./http\Views\pages\einheiten.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();


include '../templates/einheiten_post.php';
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['name'], $_POST['umrechnungsfaktor'], $_POST['basisEinheit'])) {
    insert_into_Eineheiten();
}

// Berechne die Anzahl der notwendigen Durchläufe für die paginierte Anzeige
$countSql = "SELECT COUNT(id) AS total FROM einheiten";
$countResult = $conn->query($countSql);
$countRow = $countResult->fetch_assoc();
$totalUnits = $countRow['total'];

$batchSize = 5; // Festlegung der Anzahl der Einheiten pro Batch
$loops = ceil($totalUnits / $batchSize); // Berechnung der Anzahl der Durchläufe
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Einheiten Verwaltung</title>
</head>
<body>
    <?php include '../templates/navigation.php'; ?>
    
    <main>
        <h2>Einheiten Verwaltung</h2>
        
        <h3>Einheit hinzufügen</h3>
        
            <form action="" method="post">
                <?php include '../templates/einheitenFormular.html';?>
                <input type="submit" value="Einheit Hinzufügen" id="einheitHinzufuegenButton">
            </form>

        <h3>Vorhandene Einheiten</h3>
        <table>
            <thead>
                    <tr>
                        <th>Name</th>
                        <th>Umrechnungsfaktor</th>
                        <th>Basis Einheit ID</th>
                        <th>hat_spezifischen_umrechnungsfaktor</th>
                    </tr>
                </thead>
            <tbody>
                <?php 
                for ($i = 0; $i < $loops; $i++) {
                    $offset = $i * $batchSize;
                    $sql = "SELECT id, name, umrechnungsfaktor_zu_basis, basis_einheit_id, hat_spezifischen_umrechnungsfaktor FROM einheiten ORDER BY name ASC LIMIT $offset, $batchSize";
                    $result = $conn->query($sql);

                    while ($row = $result->fetch_assoc()) {
                        // Ausgabe jedes Datensatzes
                        echo "<tr>";
                        echo "<td>" . htmlspecialchars($row['name']) . "</td>";
                        echo "<td>" . htmlspecialchars($row['umrechnungsfaktor_zu_basis']) . "</td>";
                        echo "<td>" . (is_null($row['basis_einheit_id']) ? 'NULL' : htmlspecialchars($row['basis_einheit_id'])) . "</td>";
                        echo "<td>" . (htmlspecialchars($row['hat_spezifischen_umrechnungsfaktor']) ? 'ja' : 'Nein') . "</td>";
                        echo "</tr>";
                    }
                }
                ?>
            </tbody>
        </table>

    </main>
    
    <?php include '../templates/footer.php'; ?>
</body>
</html>


Path: ./http\Views\pages\einkaufsliste.php
Content:
<?php 
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];

$heute = date("Y-m-d");
$sql = "SELECT e.id, zn.name, e.menge, e.verbrauchsdatum, k.name AS kategorie, k.id AS kategorie_id
        FROM einkaufsliste e
        JOIN zutaten z ON e.zutat_id = z.id
        JOIN zutaten_namen zn ON z.id = zn.zutat_id
        JOIN kategorien k ON z.kategorie_id = k.id
        WHERE e.user_id = ? AND (e.verbrauchsdatum IS NULL OR e.verbrauchsdatum <= DATE_ADD(CURDATE(), INTERVAL z.uebliche_haltbarkeit DAY))
        ORDER BY e.verbrauchsdatum ASC, k.id ASC;";


$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();

$einkaufsliste = [];
while ($row = $result->fetch_assoc()) {
    $einkaufsliste[] = [
        'name' => $row['name'],
        'menge' => $row['menge'],
        'verbrauchsdatum' => $row['verbrauchsdatum'],
        'kategorie' => $row['kategorie'],
        'id' => $row['id']
    ];
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Einkaufsliste</title>
</head>
<body>
    <header>
        <h1>main navigator page</h1>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Einkaufsliste</h2>
        <table>
            <tr>
                <th>Name</th>
                <th>Menge</th>
                <th>Geplantes Datum</th>
                <th>kategorie</th>
                <th>Aktion</th>
            </tr>
            <?php foreach ($einkaufsliste as $item): ?>
            <tr>
                <td><?= htmlspecialchars($item['name']) ?></td>
                <td><?= htmlspecialchars($item['menge']) ?></td>
                <td>
                    <?php if ($item['verbrauchsdatum']): ?>
                        <a href="rezept_detail.php?datum=<?= urlencode($item['verbrauchsdatum']) ?>">
                            <?= htmlspecialchars($item['verbrauchsdatum']) ?>
                        </a>
                    <?php else: ?>
                        <form method="post" action="/Controllers/RemoveFromEinkaufsliste.php">
                            <input type="hidden" name="id" value="<?= $item['id'] ?>">
                            <button type="submit">Entfernen</button>
                        </form>
                    <?php endif; ?>
                </td>
                
                <td><?= htmlspecialchars($item['kategorie']) ?></td>
                <td>
                    <form method="post" action="/Controllers/MoveToPantry.php">
                        <input type="hidden" name="id" value="<?= $item['id'] ?>">
                        <button type="submit">In Vorratsschrank verschieben</button>
                    </form>
                </td>
            </tr>
            <?php endforeach; ?>
        </table>

        <h3>Neuen Eintrag hinzufügen</h3>
        <form method="post" action="/Controllers/AddToEinkaufsliste.php">
            <input type="text" name="zutatenName" placeholder="Zutatenname" required>
            <input type="text" name="menge" placeholder="Menge" required>
            <button type="submit">Zutat hinzufügen</button>
        </form>

    </main>
    <footer>
        <p>&copy; 2024 Transforamtions-Design</p>
    </footer>
</body>
</html>


Path: ./http\Views\pages\essensplan.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];
$today = date("Y-m-d");
$twoWeeksLater = date("Y-m-d", strtotime("+14 days"));

// Modified SQL query to include recipe title
$sql = "SELECT e.datum, e.anzahl_personen, COALESCE(r.titel, 'Nicht geplant') AS titel
        FROM essenplan e
        LEFT JOIN rezepte r ON e.rezept_id = r.id
        WHERE e.user_id = ? AND e.datum BETWEEN ? AND ?
        ORDER BY e.datum ASC";

$stmt = $conn->prepare($sql);
$stmt->bind_param("iss", $userId, $today, $twoWeeksLater);
$stmt->execute();
$result = $stmt->get_result();

$essenspläne = [];  
while ($row = $result->fetch_assoc()) {
    $essenspläne[$row['datum']] = [
        'anzahl_personen' => $row['anzahl_personen'],
        'rezept' => $row['titel']
    ];
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Essensplan</title>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Essensplan für die nächsten 14 Tage</h2>
        <ul>
            <?php
            $startDate = new DateTime($today);
            $endDate = new DateTime($twoWeeksLater);
            $endDate = $endDate->modify('+1 day'); // Inkludiert das Enddatum

            $datumRange = new DatePeriod($startDate, new DateInterval('P1D'), $endDate);

            foreach ($datumRange as $datum) {
                $formattedDatum = $datum->format("Y-m-d");
                if (array_key_exists($formattedDatum, $essenspläne)) {
                    $plan = $essenspläne[$formattedDatum];
                    $anzahlPersonen = $plan['anzahl_personen'];
                    $rezeptTitel = $plan['rezept'];
                } else {
                    $anzahlPersonen = "Unbekannt";
                    $rezeptTitel = "Nicht geplant";
                }
                $link = "rezept_detail.php?datum=" . urlencode($formattedDatum);
                echo "<li><a href='" . htmlspecialchars($link) . "'>" . htmlspecialchars($formattedDatum) . ": " . htmlspecialchars($anzahlPersonen) . " Personen - " . htmlspecialchars($rezeptTitel) . "</a></li>";
            }
            ?>
        </ul>
    </main>
    <footer>
        <p>&copy; 2024 Transforamtions-Design</p>
    </footer>
</body>
</html>


Path: ./http\Views\pages\freunde.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];

if (isset($_SESSION['is_temp_user'])) {
    echo "Die Freunde-Seite ist für temporäre Profile nicht verfügbar.";
    exit; // Stoppt die Ausführung weiteren Codes
}
$eigenerToken = "";

// Hole den eigenen Freundes-Token
$sqlEigen = "SELECT freundes_token FROM users WHERE id = ?";
$stmtEigen = $conn->prepare($sqlEigen);
$stmtEigen->bind_param("i", $userId);
$stmtEigen->execute();
$resultEigen = $stmtEigen->get_result();
if ($eigenRow = $resultEigen->fetch_assoc()) {
    $eigenerToken = $eigenRow['freundes_token'];
}

// Generiere den Einladungslink und den QR-Code mit dem eigenen Token
$einladungsLink = "https://noadscollective.de/Views/pages/freunde.php?token=" . $eigenerToken;

// Überprüfe, ob ein Token-Parameter gesetzt und nicht der eigene Token ist
if (isset($_GET['token']) && $_GET['token'] !== $eigenerToken) {
    $freundesToken = $_GET['token'];

    // Finde den Benutzer mit dem gegebenen Freundes-Token
    $userSql = "SELECT id FROM users WHERE freundes_token = ?";
    $userStmt = $conn->prepare($userSql);
    $userStmt->bind_param("s", $freundesToken);
    $userStmt->execute();
    $userResult = $userStmt->get_result();

    if ($userResult->num_rows === 1) {
        $freund = $userResult->fetch_assoc();
        $freundId = $freund['id'];

        // Füge den Freund hinzu, wenn noch keine Beziehung besteht
        $checkSql = "SELECT id FROM freunde WHERE (user_id_1 = ? AND user_id_2 = ?) OR (user_id_1 = ? AND user_id_2 = ?)";
        $checkStmt = $conn->prepare($checkSql);
        $checkStmt->bind_param("iiii", $userId, $freundId, $freundId, $userId);
        $checkStmt->execute();
        $checkResult = $checkStmt->get_result();

        if ($checkResult->num_rows === 0) {
            $insertFreundeSql = "INSERT INTO freunde (user_id_1, user_id_2) VALUES (?, ?), (?, ?)";
            $insertFreundeStmt = $conn->prepare($insertFreundeSql);
            $insertFreundeStmt->bind_param("iiii", $userId, $freundId, $freundId, $userId);
            $insertFreundeStmt->execute();
            echo "Freundschaft erfolgreich hinzugefügt.";
        } else {
            echo "Ihr seid bereits Freunde.";
        }
    } else {
        echo "Ungültiger Freundes-Token.";
    }
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Freunde einladen</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script> <!-- QR Code JS Bibliothek -->
    <script>
        // Funktion zum Kopieren des Einladungslinks in die Zwischenablage
        function kopiereLink() {
            // Erstelle ein temporäres Input-Element
            var tempInput = document.createElement("input");
            tempInput.value = "Melde dich auf der Webseite an, dann können wir zusammen kochen  " + "<?= $einladungsLink; ?>"; // Setze den Einladungslink als Wert
            document.body.appendChild(tempInput); // Füge das Input-Element zum DOM hinzu
            tempInput.select(); // Wähle den Text im Input-Element aus
            document.execCommand("copy"); // Kopiere den ausgewählten Text in die Zwischenablage
            document.body.removeChild(tempInput); // Entferne das temporäre Input-Element
        }
    </script>
</head>
<body>
    
    <?php include '../templates/navigation.php'; ?>
    <h2>Freunde einladen</h2>
    <p>Teile diesen Link, um einen Freund einzuladen:</p>
    <button onclick="kopiereLink()">link kopieren</button>
    <div id="qrcode" style="margin-top: 20px;"></div>
    <script>
        new QRCode(document.getElementById("qrcode"), "<?= $einladungsLink; ?>");
    </script>
</body>
</html>


Path: ./http\Views\pages\gefaessVerwaltung.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];

// Hier kann Logik zur Verwaltung der Gefäße implementiert werden

?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Gefäßverwaltung</title>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Gefäßverwaltung</h2>
            <form id="gefaessForm" method="post">
                <label for="gefaessName">Name:</label>
                <input type="text" id="gefaessName" name="gefaessName" required>
                
                <label for="volumen">Volumen (in Litern oder Kilogramm):</label>
                <input type="number" id="volumen" name="volumen" step="0.01" required>
                
                <label for="beschreibung">Beschreibung (optional):</label>
                <textarea id="beschreibung" name="beschreibung"></textarea>
                
                <input type="hidden" id="gefaessId" name="gefaessId">
                <button type="submit">Speichern</button>
            </form>
            <div id="gefaessListe"></div>
    </main>
</body>
</html>


Path: ./http\Views\pages\heutiges-gericht.php
Content:
<?php
$today = date("Y-m-d");
header("Location: rezept_detail.php?datum=" . urlencode($today));
?>

Path: ./http\Views\pages\passwort_aendern.php
Content:
<?php
require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

// Passwort-Änderungslogik wird hier behandelt

?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Passwort ändern</title>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Passwort ändern</h2>
        <form action="/Controllers/passwort_aendern_handler.php" method="post">
            <label for="currentPassword">Aktuelles Passwort:</label>
            <input type="password" id="currentPassword" name="currentPassword" required>
            <label for="newPassword">Neues Passwort:</label>
            <input type="password" id="newPassword" name="newPassword" required>
            <button type="submit">Ändern</button>
        </form>
    </main>
    <footer>
        <p>&copy; 2024 Transforamtions-Design</p>
    </footer>
</body>
</html>


Path: ./http\Views\pages\profil.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Profil</title>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <h2>Profil</h2>
        <div>
            <?php if (isset($_SESSION['is_temp_user'])): ?>
                <p>Dies ist ein temporäres Profil. <a href="register.html">Registrieren</a> Sie sich, um Ihre Daten zu speichern und auf alle Funktionen zugreifen zu können.</p>
            <?php endif; ?>
            <button onclick="location.href='passwort_aendern.php'">Passwort ändern</button>
            <button onclick="location.href='/http/Controllers/logout.php'">Ausloggen</button>
            <!-- Weitere Profilaktionen hier hinzufügen -->
        </div>
    </main>
    <footer>
        <p>&copy; 2024 Transforamtions-Design</p>
    </footer>
</body>
</html>


Path: ./http\Views\pages\rezepte.php
Content:
<?php
// Fehlerberichterstattung einschalten
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once '../../Utils/db_connect.php';

require_once '../templates/rezepte_post.php';
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Rezept Hinzufügen</title>
</head>
<body>
    <h2>Neues Rezept hinzufügen</h2>
    <?php include '../templates/rezepteFormular.php'; ?>

    <h2>Vorhandene Rezepte</h2>
    <table border="1">
        <tr>
            <th>Titel</th>
            <th>Autor</th>
            <th>Untertitel</th>
            <th>Zubereitungszeit</th>
            <th>Personenanzahl</th>
            <th>Bilder</th>
            <th>Zutaten</th>
        </tr>
        <?php
        $sql = "SELECT 
        r.id, 
        r.titel, 
        r.autor, 
        r.untertitel, 
        r.bilder, 
        r.beschreibung, 
        r.zubereitungszeit, 
        r.basis_personenanzahl, 
        zn.name AS zutaten_name, 
        rz.menge, 
        e.name AS einheit
    FROM 
        rezepte r
    LEFT JOIN 
        rezept_zutaten rz ON r.id = rz.rezept_id
    LEFT JOIN 
        zutaten z ON rz.zutat_id = z.id
    LEFT JOIN 
        zutaten_namen zn ON z.id = zn.zutat_id
    LEFT JOIN 
        einheiten e ON rz.einheit_id = e.id
    GROUP BY 
        r.id, rz.zutat_id
    ORDER BY 
        r.id, zn.name;
    ";
        $result = $conn->query($sql);

        $rezepte = [];
        if ($result->num_rows > 0) {
            while ($row = $result->fetch_assoc()) {
                $rezeptId = $row['id'];
                if (!isset($rezepte[$rezeptId])) {
                    $rezepte[$rezeptId] = [
                        'titel' => $row['titel'],
                        'autor' => $row['autor'],
                        'untertitel' => $row['untertitel'],
                        'bilder' => $row['bilder'],
                        'beschreibung' => $row['beschreibung'],
                        'zubereitungszeit' => $row['zubereitungszeit'],
                        'basis_personenanzahl' => $row['basis_personenanzahl'],
                        'zutaten' => []
                    ];
                }
                if ($row['zutaten_name']) { // Überprüfen, ob der Eintrag eine Zutat hat
                    $rezepte[$rezeptId]['zutaten'][] = htmlspecialchars($row['zutaten_name']) . " " . htmlspecialchars($row['menge']) . " " . htmlspecialchars($row['einheit']);
                }
            }

            foreach ($rezepte as $rezept) {
                echo "<tr>";
                echo "<td>" . htmlspecialchars($rezept['titel']?? '') . "</td>";
                echo "<td>" . htmlspecialchars($rezept['autor']?? '') . "</td>";
                echo "<td>" . htmlspecialchars($rezept['untertitel']?? '') . "</td>";
                echo "<td>" . htmlspecialchars($rezept['zubereitungszeit']?? '') . " Minuten</td>";
                echo "<td>" . htmlspecialchars($rezept['basis_personenanzahl']?? '') . "</td>";
                echo "<td>";
                if ($rezept['bilder']) {
                    $bilder = explode(',', $rezept['bilder']);
                    foreach ($bilder as $bild) {
                        echo "<img src='" . htmlspecialchars($bild ?? '') . "' alt='Bild' height='100' /> ";
                    }
                }
                echo "</td>";
                echo "<td>" . implode(', ', $rezept['zutaten']?? '') . "</td>";
                echo "</tr>";
            }
        } else {
            echo "<tr><td colspan='7'>Keine Rezepte gefunden.</td></tr>";
        }
        ?>
    </table>
</body>
</html>


Path: ./http\Views\pages\rezeptsuche.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];

if ($_SERVER['REQUEST_METHOD'] == 'GET') {
    $searchCriteria = prepareSearchCriteria($_GET);
    $sqlQuery = buildSqlQuery($searchCriteria, $userId);
    $recipes = executeSearch($sqlQuery, $userId);
    displayRecipes($recipes);
} else{
    displaySearchForm();
}
function prepareSearchCriteria($getData) {
    return [
        'saisonalitaet' => isset($getData['saisonalitaet']),
        'unverplanteLebensmittel' => isset($getData['unverplanteLebensmittel']),
        'allergien' => $getData['allergien'] ?? '',
        'planetaryHealthDiet' => isset($getData['planetaryHealthDiet']),
        'suchbegriff' => $getData['suchbegriff'] ?? '',
        'sollEnthalten' => $getData['sollEnthalten'] ?? '',
    ];
}

function buildSqlQuery($criteria, $userId) {
    global $conn;
    $sqlBase = "SELECT r.*,";
    $sqlRelevanzFelder = ", (0"; // Start der gesamtrelevanz Berechnung
    $sqlEnd = " FROM rezepte r WHERE 1=1";
    $params = [];

    // Saisonalitätskriterium
    $sql_saisonalitaet = "";
    if ($criteria['saisonalitaet']) {
        $sqlRelevanzFelder .= " + CASE WHEN EXISTS (
            SELECT 1 FROM zutaten_saisonalitaet zs
            JOIN rezept_zutaten rz ON zs.zutat_id = rz.zutat_id
            WHERE rz.rezept_id = r.id
            AND CURRENT_DATE BETWEEN zs.saison_start AND zs.saison_ende
          ) THEN 1 ELSE 0 END";
        $sql_saisonalitaet = ", CASE WHEN EXISTS (
            SELECT 1 FROM zutaten_saisonalitaet zs
            JOIN rezept_zutaten rz ON zs.zutat_id = rz.zutat_id
            WHERE rz.rezept_id = r.id
            AND CURRENT_DATE BETWEEN zs.saison_start AND zs.saison_ende
          ) THEN 1 ELSE 0 END AS relevanz_saisonalitaet";
    }
    $sql_unverplanteLebensmittel = "";
    if ($criteria['unverplanteLebensmittel']) {
        echo "debug: 1"; // Debug-Statement 1
        // Schritt 1: Ermittle alle Lebensmittel im Vorratsschrank des Benutzers, die noch nicht in einem geplanten Essen verwendet werden.
        $vorratsQuery = "SELECT vs.zutat_id FROM vorratsschrank vs
                        WHERE vs.user_id = ?
                        AND vs.zutat_id NOT IN (
                            SELECT rz.zutat_id FROM essenplan e
                            JOIN rezept_zutaten rz ON e.rezept_id = rz.rezept_id
                            WHERE e.user_id = ? AND e.datum BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY)
                        )";
        $vorratsStmt = $conn->prepare($vorratsQuery);
        $vorratsStmt->bind_param("ii", $userId, $userId);
        
        $vorratsStmt->execute();
        $vorratsResult = $vorratsStmt->get_result();
        $unverplanteZutaten = [];
        while ($row = $vorratsResult->fetch_assoc()) {
            $unverplanteZutaten[] = $row['zutat_id'];
        }
        echo "debug: Unverplante Zutaten: "; // Debug-Statement 2
        print_r($unverplanteZutaten);

        if (!empty($unverplanteZutaten)) {
            $placeholders = implode(',', array_fill(0, count($unverplanteZutaten), '?')); // Erstellt eine kommagetrennte Liste von Platzhaltern
            // Bereite das dynamische SQL-Teil vor
            $sql_unverplanteLebensmittel = " + CASE WHEN r.id IN (
                        SELECT DISTINCT rz.rezept_id FROM rezept_zutaten rz
                        WHERE rz.zutat_id IN ($placeholders)
                    ) THEN 1 ELSE 0 END";
            // Füge die IDs der unverplanten Zutaten den Parametern für das Prepared Statement hinzu
            foreach ($unverplanteZutaten as $zutatId) {
                $params[] = $zutatId;
            }
        }
    }

    $sql_phdPriorisierung = "";
    if ($criteria['planetaryHealthDiet']){
        // Pseudo-Code, um die Logik darzustellen
        $phdDifferenz = berechnePhdDifferenz($userId); // Funktion, die Differenzen für jede Kategorie berechnet

        foreach ($phdDifferenz as $kategorieId => $differenz) {
            if ($differenz < 0) { // Zu wenig konsumiert
                $sql_phdPriorisierung .= " + CASE WHEN EXISTS (
                    SELECT 1 FROM rezept_zutaten rz
                    JOIN zutaten z ON rz.zutat_id = z.id
                    WHERE rz.rezept_id = r.id AND z.phd_kategorie_id = $kategorieId
                ) THEN ".abs($differenz)." ELSE 0 END";
            }
        }
    }         
    /*if (!empty($suchbegriff)) {
    }

    if (!empty($sollEnthalten)) {
        // Logik zur Berücksichtigung spezifischer Zutaten (benötigt spezifische Implementierung)
    }*/
    $sqlRelevanzFelder .= ") AS gesamtrelevanz"; // Ende der gesamtrelevanz Berechnung

    // Zusammenbau des finalen SQL-Queries
    $sql = $sqlBase . $sql_saisonalitaet . $sql_unverplanteLebensmittel . $sqlRelevanzFelder . $sqlEnd . " ORDER BY gesamtrelevanz DESC";
    echo $sql; // Debug: Print the final SQL query

    return ['query' => $sql, 'params' => $params];
}
function berechnePhdDifferenz($userId) {
    global $conn;
     // Ermittle die Anzahl der Tage in den letzten 30 Tagen, an denen der Benutzer Essen konsumiert hat
    $sqlTageMitKonsum = "SELECT COUNT(DISTINCT datum) AS tage_mit_konsum
                         FROM essenplan
                         WHERE user_id = ? AND datum BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE()";
    $stmtTageMitKonsum = $conn->prepare($sqlTageMitKonsum);
    $stmtTageMitKonsum->bind_param("i", $userId);
    $stmtTageMitKonsum->execute();
    $resultTageMitKonsum = $stmtTageMitKonsum->get_result();
    $rowTageMitKonsum = $resultTageMitKonsum->fetch_assoc();
    $tageMitKonsum = $rowTageMitKonsum['tage_mit_konsum'];

    // Berechne die Anzahl der Tage ohne Konsum
    $tageOhneKonsum = 30 - $tageMitKonsum;
    // SQL-Abfrage, um die Gesamtaufnahme pro PHD-Kategorie in den letzten 30 Tagen zu ermitteln
    $sql = "SELECT z.phd_kategorie_id, SUM(rz.menge) AS gesamt_menge
            FROM essenplan e
            JOIN rezept_zutaten rz ON e.rezept_id = rz.rezept_id
            JOIN zutaten z ON rz.zutat_id = z.id
            WHERE e.user_id = ? AND e.datum BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND CURDATE()
            GROUP BY z.phd_kategorie_id";

    $stmt = $conn->prepare($sql);
    $stmt->bind_param("i", $userId);
    $stmt->execute();
    $result = $stmt->get_result();

    $tatsaechlicheAufnahme = [];
    while ($row = $result->fetch_assoc()) {
        $tatsaechlicheAufnahme[$row['phd_kategorie_id']] = $row['gesamt_menge'];
    }

    // Hole die idealen Mengen für jede PHD-Kategorie
    $idealeMengen = getIdealePhdMengen(); // Diese Funktion müsste die idealen Mengen aus der Datenbank oder einem Array zurückgeben

    $differenzen = [];
    foreach ($idealeMengen as $kategorieId => $idealeMenge) {
        $tatsaechlich = $tatsaechlicheAufnahme[$kategorieId] ?? 0;
        // Berücksichtige die ideale Menge für Tage ohne Konsum
        $tatsaechlich += $tageOhneKonsum * $idealeMenge;
        $differenz = $tatsaechlich - ($idealeMenge * 30); // Umwandlung der Tagesmenge in eine 30-Tage-Menge
        $differenzen[$kategorieId] = $differenz;
    }

    return $differenzen;
}
function getIdealePhdMengen() {
    global $conn;
    $sql = "SELECT ID, Taegliche_Menge_g FROM Planetary_Health_Diet_Categories";
    $result = $conn->query($sql);

    $idealeMengen = [];
    while ($row = $result->fetch_assoc()) {
        $idealeMengen[$row['ID']] = $row['Taegliche_Menge_g'];
    }

    return $idealeMengen;
}
function executeSearch($sqlQueryDetails, $userId) {
    global $conn;
    $stmt = $conn->prepare($sqlQueryDetails['query']);
    // Assuming all parameters are integers, adjust as necessary
    if (!empty($sqlQueryDetails['params'])) {
        echo $sqlQueryDetails['query']; // To see the final query
        print_r($sqlQueryDetails['params']); // To verify parameters
        $types = str_repeat("i", count($sqlQueryDetails['params']));
        $stmt->bind_param($types, ...$sqlQueryDetails['params']);
    }
    $stmt->execute();
    $result = $stmt->get_result();
    $recipes = [];
    while ($row = $result->fetch_assoc()) {
        $recipes[] = $row;
    }
    return $recipes;
}
function displayRecipes($rezepte) {
?>
    <!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Rezeptsuche</title>
</head>
<body>
    <?php include '../templates/navigation.php'; ?>

    <main>
        <h2>Rezeptsuche</h2>
        <form action="rezeptsuche.php" method="get">
            <label for="saisonalitaet">Berücksichtige Saisonalität (noch keine Saisonalität tabelle):</label>
            <input type="checkbox" id="saisonalitaet" name="saisonalitaet" <?php echo (isset($_GET['saisonalitaet']) ? 'checked' : ''); ?>><br>

            <label for="unverplanteLebensmittel">Berücksichtige unverplante Lebensmittel(working):</label>
            <input type="checkbox" id="unverplanteLebensmittel" name="unverplanteLebensmittel" <?php echo (isset($_GET['unverplanteLebensmittel']) ? 'checked' : ''); ?>><br>

            <label for="allergien">Berücksichtige Allergien(Not implemntet jet):</label>
            <input type="text" id="allergien" name="allergien" placeholder="z.B. Nüsse, Gluten" value="<?php echo htmlspecialchars($_GET['allergien'] ?? ''); ?>"><br>

            <label for="planetaryHealthDiet">Berücksichtige Planetary Health Diet(Not implemntet jet):</label>
            <input type="checkbox" id="planetaryHealthDiet" name="planetaryHealthDiet" <?php echo (isset($_GET['planetaryHealthDiet']) ? 'checked' : ''); ?>><br>

            <label for="suchbegriff">Suchbegriff(mehr schelcht asl recht, aber es läuft):</label>
            <input type="text" id="suchbegriff" name="suchbegriff" placeholder="Suchbegriff eingeben" value="<?php echo htmlspecialchars($_GET['suchbegriff'] ?? ''); ?>"><br>

            <label for="sollEnthalten">Soll enthalten(Not implemntet jet):</label>
            <input type="text" id="sollEnthalten" name="sollEnthalten" placeholder="Zutat" value="<?php echo htmlspecialchars($_GET['sollEnthalten'] ?? ''); ?>"><br>

            <button type="submit">Suchen</button>
        </form>

    </main>
    <main>
        <h2>Suchergebnisse</h2>
        <?php if (!empty($rezepte)): ?>
            <ul>
                <?php foreach ($rezepte as $rezept): ?>
                    <li>
                        <h3><?= htmlspecialchars($rezept['titel']) ?></h3>
                        <p><?= htmlspecialchars($rezept['beschreibung']) ?></p>
                        <p>Relevanz: <?= htmlspecialchars($rezept['gesamtrelevanz']) ?></p>
                        <ul>
                            <li>Saisonalität: <?= isset($rezept['relevanz_saisonalitaet']) ? htmlspecialchars($rezept['relevanz_saisonalitaet']) : '0' ?></li>
                            <!-- Weitere Relevanzkriterien hier anzeigen -->
                        </ul>
                    </li>
                <?php endforeach; ?>
            </ul>
        <?php else: ?>
            <p>Keine Rezepte gefunden.</p>
        <?php endif; ?>
    </main>
</body>
</html>
<?php
}
function displaySearchForm() {
?>
    <!DOCTYPE html>
    <html lang="de">
    <head>
        <?php include '../templates/header.php'; ?>
        <title>Rezeptsuche</title>
    </head>
    <body>
        <?php include '../templates/navigation.php'; ?>

        <main>
            <h2>Rezeptsuche</h2>
            <form action="rezeptsuche.php" method="get">
            <label for="saisonalitaet">Berücksichtige Saisonalität (noch keine Saisonalität tabelle):</label>
            <input type="checkbox" id="saisonalitaet" name="saisonalitaet"><br>

            <label for="unverplanteLebensmittel">Berücksichtige unverplante Lebensmittel(working):</label>
            <input type="checkbox" id="unverplanteLebensmittel" name="unverplanteLebensmittel"><br>

            <label for="allergien">Berücksichtige Allergien(Not implemntet jet):</label>
            <input type="text" id="allergien" name="allergien" placeholder="z.B. Nüsse, Gluten"><br>

            <label for="planetaryHealthDiet">Berücksichtige Planetary Health Diet(Not implemntet jet):</label>
            <input type="checkbox" id="planetaryHealthDiet" name="planetaryHealthDiet"><br>

            <label for="suchbegriff">Suchbegriff(mehr schelcht asl recht, aber es läuft):</label>
            <input type="text" id="suchbegriff" name="suchbegriff" placeholder="Suchbegriff eingeben"><br>

            <label for="sollEnthalten">Soll enthalten(Not implemntet jet):</label>
            <input type="text" id="sollEnthalten" name="sollEnthalten" placeholder="Zutat"><br>

            <button type="submit">Suchen</button>
        </form>
        </main>

        <?php include '../templates/footer.php'; ?>
    </body>
    </html>
<?php
}
?>

Path: ./http\Views\pages\rezept_detail.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];
$datum = $_GET['datum'] ?? date("Y-m-d");
$rezept = null;
$zufallsRezepte = [];

// Versuche, ein Rezept für das gewählte Datum zu finden
$sql = "SELECT r.titel, r.beschreibung, e.rezept_id FROM essenplan e JOIN rezepte r ON e.rezept_id = r.id WHERE e.user_id = ? AND e.datum = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("is", $userId, $datum);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows > 0) {
    $rezept = $result->fetch_assoc();
} else {
    // Kein Rezept gefunden, hole drei zufällige Rezepte
    $zufallsRezepteSql = "SELECT id, titel FROM rezepte ORDER BY RAND() LIMIT 3";
    $resultZufallsRezepte = $conn->query($zufallsRezepteSql);
    while ($rezeptZufall = $resultZufallsRezepte->fetch_assoc()) {
        $zufallsRezepte[] = $rezeptZufall;
    }
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Rezept Details</title>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <?php if ($rezept): ?>
            <h2><?= htmlspecialchars($rezept['titel']); ?></h2>
            <!-- Vor dem Kochen -->
            <section>
                <h3>Vor dem Kochen</h3>
                <?php
                    $sqlAnzahlPersonen = "SELECT anzahl_personen FROM essenplan WHERE user_id = $userId AND datum = '$datum'";
                    $resultAnzahlPersonen = $conn->query($sqlAnzahlPersonen);
                    $rowAnzahlPersonen = $resultAnzahlPersonen->fetch_assoc();
                    $anzahlPersonen = $rowAnzahlPersonen['anzahl_personen'];

                    // Prepare the SQL statement with placeholders
                    $sqlZutaten = "SELECT zn.name, rz.menge, e.name AS einheit, 
                                        CASE 
                                            WHEN vs.id IS NULL THEN 'Einkaufen'
                                            WHEN DATE_ADD(vs.verbrauchsdatum, INTERVAL z.uebliche_haltbarkeit DAY) < CURDATE() THEN 'Abgelaufen'
                                            WHEN DATE_ADD(vs.verbrauchsdatum, INTERVAL z.uebliche_haltbarkeit DAY) >= CURDATE() THEN 'Im Vorratsschrank'
                                            ELSE 'Nichts'
                                        END AS status 
                                    FROM rezept_zutaten rz 
                                    JOIN zutaten_namen zn ON rz.zutat_id = zn.zutat_id 
                                    JOIN zutaten z ON zn.zutat_id = z.id
                                    LEFT JOIN einheiten e ON z.einkaufseinheit_id = e.id 
                                    LEFT JOIN vorratsschrank vs ON zn.zutat_id = vs.zutat_id AND vs.user_id = ? 
                                    WHERE rz.rezept_id = ?";

                    // Prepare the statement
                    $stmt = $conn->prepare($sqlZutaten);

                    // Bind parameters to the prepared statement
                    $stmt->bind_param("ii", $userId, $rezept['rezept_id']); // "ii" means both parameters are integers

                    // Execute the prepared statement
                    $stmt->execute();

                    // Get the result of the query
                    $resultZutaten = $stmt->get_result();

                    // Check if there are results
                    if ($resultZutaten->num_rows > 0) {
                    echo "<p>Zutatenliste und Verfügbarkeit:</p>";
                    echo "<ul>";
                    while ($zutat = $resultZutaten->fetch_assoc()) {
                    // Correctly concatenate and escape output to prevent XSS
                    echo "<li>" . htmlspecialchars($zutat['name']) . " - " . htmlspecialchars($zutat['menge']) . " " . htmlspecialchars($zutat['einheit']) . " (" . htmlspecialchars($zutat['status']) . ")</li>";
                    }
                    echo "</ul>";
                    } else {
                    echo "Keine Zutaten gefunden.";
                    }

                    // Close the statement
                    $stmt->close();
                ?>
                <form action="updatePersonenanzahl.php" method="post">
                    <input type="hidden" name="datum" value="<?= htmlspecialchars($datum); ?>">
                    <label for="anzahlPersonen">Anzahl Personen:</label>
                    <input type="number" id="anzahlPersonen" name="anzahlPersonen" value="<?= $anzahlPersonen; ?>" min="1">
                    <button type="submit">Aktualisieren</button>
                </form>

            </section>

            <!-- Während des Kochens -->
            <section>
                <h3>Während des Kochens</h3>
                <p>... Kochanweisungen und Details ...</p>
            </section>

            <!-- Nach dem Essen -->
            <section>
                <h3>Nach dem Essen</h3>
                <p>Reflektion und Planung:</p>
                <ul>
                    <li><a href="#">Wie hat es geschmeckt?(noch nicht implementiert)</a></li>
                    <li><a href="#">Noch Hunger?(noch nicht implementiert)</a></li>
                    <li><a href="#">Gibt es Reste?(noch nicht implementiert)</a>
                        <ul>
                            <li><a href="#">Für morgen aufheben(noch nicht implementiert)</a></li>
                            <li><a href="#">Dem Nachbarn geben(noch nicht implementiert)</a></li>
                        </ul>
                    </li>
                </ul>
            </section>
        <?php else: ?>
            <h2>Kein Rezept für das gewählte Datum gefunden</h2>
            <?php if (!empty($zufallsRezepte)): ?>
                <h3>Vielleicht interessieren Sie sich für:</h3>
                <ul>
                    <?php foreach ($zufallsRezepte as $rezeptZufall): ?>
                        <li><a href='rezept_detail.php?rezeptId=<?= $rezeptZufall['id'] ?>'><?= htmlspecialchars($rezeptZufall['titel']) ?></a></li>
                        <form action="/Controllers/PlanRecipe.php" method="post">
                            <input type="hidden" name="rezept_id" value="<?= $rezeptZufall['id'] ?>">
                            <input type="hidden" name="datum" value="<?= $datum ?>">
                            <button type="submit"> asuwahl</button>
                        </form>
                    <?php endforeach; ?>
                </ul>
            <?php endif; ?>
            <div>
                <a href='rezeptsuche.php'>Rezept suchen</a> | <a href='rezept_hinzufuegen.php'>Rezept hinzufügen</a>
            </div>
        <?php endif; ?>
    </main>
    <footer>
        <p>&copy; 2024 Transformations-Design</p>
    </footer>
</body>
</html>


Path: ./http\Views\pages\rezept_hinzufuegen.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];
$datum = $_GET['datum'] ?? date("Y-m-d");
$rezept = null;
$zufallsRezepte = [];

// Versuche, ein Rezept für das gewählte Datum zu finden
$sql = "SELECT r.titel, r.beschreibung, e.rezept_id FROM essenplan e JOIN rezepte r ON e.rezept_id = r.id WHERE e.user_id = ? AND e.datum = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("is", $userId, $datum);
$stmt->execute();
$result = $stmt->get_result();

if ($result->num_rows > 0) {
    $rezept = $result->fetch_assoc();
} else {
    // Kein Rezept gefunden, lege ein leeres Rezept an
    $leeresRezeptSql = "INSERT INTO rezepte (titel, beschreibung) VALUES ('Neues Rezept', '')";
    if ($conn->query($leeresRezeptSql) === TRUE) {
        $neueRezeptId = $conn->insert_id;
        
        // Füge das leere Rezept in den Essenplan ein
        $essenplanSql = "INSERT INTO essenplan (user_id, rezept_id, datum) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($essenplanSql);
        $stmt->bind_param("iis", $userId, $neueRezeptId, $datum);
        $stmt->execute();
        
        // Setze $rezept auf das neue, leere Rezept
        $rezept = ['titel' => 'Neues Rezept', 'beschreibung' => '', 'rezept_id' => $neueRezeptId];
    } else {
        echo "Fehler: " . $conn->error;
    }
}

// Update des Titels
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['titel'], $_POST['rezeptId'])) {
    $neuerTitel = trim($_POST['titel']);
    $rezeptId = $_POST['rezeptId'];
    $updateSql = "UPDATE rezepte SET titel = ? WHERE id = ?";
    $updateStmt = $conn->prepare($updateSql);
    $updateStmt->bind_param("si", $neuerTitel, $rezeptId);
    $updateStmt->execute();
    // Umleitung, um die Seite zu aktualisieren und den neuen Titel anzuzeigen
    header("Location: ".$_SERVER['PHP_SELF']."?datum=".$datum);
    exit;
}

?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Rezept Details</title>
    <script>
        // JavaScript-Funktion zum Bearbeiten des Titels
        function bearbeiteTitel(element) {
            var aktuellerText = element.innerHTML;
            element.innerHTML = '<input type="text" onblur="speichereTitel(this)" value="' + aktuellerText + '">';
            element.firstChild.focus();
        }

        function speichereTitel(inputElement) {
            var neuerTitel = inputElement.value;
            var form = document.createElement('form');
            form.method = 'POST';
            form.style.display = 'none';

            var titelInput = document.createElement('input');
            titelInput.type = 'hidden';
            titelInput.name = 'titel';
            titelInput.value = neuerTitel;

            var rezeptIdInput = document.createElement('input');
            rezeptIdInput.type = 'hidden';
            rezeptIdInput.name = 'rezeptId';
            rezeptIdInput.value = '<?= $rezept ? $rezept['rezept_id'] : ''; ?>';

            form.appendChild(titelInput);
            form.appendChild(rezeptIdInput);

            document.body.appendChild(form);
            form.submit();
        }
    </script>
</head>
<body>
    <header>
        <?php include '../templates/navigation.php'; ?>
    </header>
    <main>
        <?php if ($rezept): ?>
            <h2><?= htmlspecialchars($rezept['titel']); ?></h2>
            <!-- Vor dem Kochen -->
            <section>   
                <h3>Vor dem Kochen</h3>
                <?php
                    $sqlAnzahlPersonen = "SELECT anzahl_personen FROM essenplan WHERE user_id = $userId AND datum = '$datum'";
                    $resultAnzahlPersonen = $conn->query($sqlAnzahlPersonen);
                    $rowAnzahlPersonen = $resultAnzahlPersonen->fetch_assoc();
                    $anzahlPersonen = $rowAnzahlPersonen['anzahl_personen'];

                    // Prepare the SQL statement with placeholders
                    $sqlZutaten = "SELECT zn.name, rz.menge, e.name AS einheit, 
                                        CASE 
                                            WHEN vs.id IS NULL THEN 'Einkaufen'
                                            WHEN DATE_ADD(vs.verbrauchsdatum, INTERVAL z.uebliche_haltbarkeit DAY) < CURDATE() THEN 'Abgelaufen'
                                            WHEN DATE_ADD(vs.verbrauchsdatum, INTERVAL z.uebliche_haltbarkeit DAY) >= CURDATE() THEN 'Im Vorratsschrank'
                                            ELSE 'Nichts'
                                        END AS status 
                                    FROM rezept_zutaten rz 
                                    JOIN zutaten_namen zn ON rz.zutat_id = zn.zutat_id 
                                    JOIN zutaten z ON zn.zutat_id = z.id
                                    LEFT JOIN einheiten e ON z.einkaufseinheit_id = e.id 
                                    LEFT JOIN vorratsschrank vs ON zn.zutat_id = vs.zutat_id AND vs.user_id = ? 
                                    WHERE rz.rezept_id = ?";


                    // Prepare the statement
                    $stmt = $conn->prepare($sqlZutaten);

                    // Bind parameters to the prepared statement
                    $stmt->bind_param("ii", $userId, $rezept['rezept_id']); // "ii" means both parameters are integers

                    // Execute the prepared statement
                    $stmt->execute();

                    // Get the result of the query
                    $resultZutaten = $stmt->get_result();

                    // Check if there are results
                    if ($resultZutaten->num_rows > 0) {
                    echo "<p>Zutatenliste und Verfügbarkeit:</p>";
                    echo "<ul>";
                    while ($zutat = $resultZutaten->fetch_assoc()) {
                    // Correctly concatenate and escape output to prevent XSS
                    echo "<li>" . htmlspecialchars($zutat['name']) . " - " . htmlspecialchars($zutat['menge']) . " " . htmlspecialchars($zutat['einheit']) . " (" . htmlspecialchars($zutat['status']) . ")</li>";
                    }
                    echo "</ul>";
                    } else {
                    echo "Keine Zutaten gefunden.";
                    }

                    // Close the statement
                    $stmt->close();
                ?>
                <form action="updatePersonenanzahl.php" method="post">
                    <input type="hidden" name="datum" value="<?= htmlspecialchars($datum); ?>">
                    <label for="anzahlPersonen">Anzahl Personen:</label>
                    <input type="number" id="anzahlPersonen" name="anzahlPersonen" value="<?= $anzahlPersonen; ?>" min="1">
                    <button type="submit">Aktualisieren</button>
                </form>

            </section>

            <!-- Während des Kochens -->
            <section>
                <h3>Während des Kochens</h3>
                <p>... Kochanweisungen und Details ...</p>
            </section>

            <!-- Nach dem Essen -->
            <section>
                <h3>Nach dem Essen</h3>
                <p>Reflektion und Planung:</p>
                <ul>
                    <li><a href="#">Wie hat es geschmeckt?(noch nicht implementiert)</a></li>
                    <li><a href="#">Noch Hunger?(noch nicht implementiert)</a></li>
                    <li><a href="#">Gibt es Reste?(noch nicht implementiert)</a>
                        <ul>
                            <li><a href="#">Für morgen aufheben(noch nicht implementiert)</a></li>
                            <li><a href="#">Dem Nachbarn geben(noch nicht implementiert)</a></li>
                        </ul>
                    </li>
                </ul>
            </section>
        <?php endif; ?>
    </main>
    <footer>
        <p>&copy; 2024 Transformations-Design</p>
    </footer>
</body>
</html>


Path: ./http\Views\pages\settings.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];
$aktuelleEinkaufsoption = '';

// Abfrage der aktuellen Einkaufsoption
$sql = "SELECT einkaufsoption FROM users WHERE id = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();
if ($row = $result->fetch_assoc()) {
    $aktuelleEinkaufsoption = $row['einkaufsoption'];
}

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['einkaufsOption'])) {
    $auswahl = $_POST['einkaufsOption'];

    // SQL-Anweisung zum Aktualisieren der Einkaufsoption des Benutzers
    $sql = "UPDATE users SET einkaufsoption = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("si", $auswahl, $userId);
    if ($stmt->execute()) {
        echo "<p>Ihre Auswahl wurde erfolgreich gespeichert.</p>";
    } else {
        echo "<p>Fehler beim Speichern Ihrer Auswahl.</p>";
    }
}
// Überprüfen, ob das Formular abgesendet wurde
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['anzahlPersonen'])) {
    $anzahlPersonen = intval($_POST['anzahlPersonen']);
    $userId = $_SESSION['userId']; // Stellen Sie sicher, dass der Benutzer eingeloggt ist und Sie die Benutzer-ID haben

    // Aktualisieren der Anzahl der Personen in der Datenbank
    // Hinweis: Sie müssen eine neue Spalte in der Tabelle `users` oder eine neue Einstellungstabelle erstellen, um diese Einstellung zu speichern, wenn Sie dies noch nicht getan haben
    $sql = "UPDATE users SET anzahl_personen_einstellung = ? WHERE id = ?";
    $stmt = $conn->prepare($sql);
    if ($stmt->bind_param("ii", $anzahlPersonen, $userId)) {
        if (!$stmt->execute()) {
            echo "Fehler beim Aktualisieren der Anzahl der Personen.";
        }
    }
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Einstellungen</title>
</head>
<body>
    <?php include '../templates/navigation.php'; ?>

    <main>
        <h2>Einstellungen</h2>
        <h3>Anzahl der Personen für Rezepte</h3>
            <form action="settings.php" method="post">
                <label for="anzahlPersonen">Anzahl Personen:</label>
                <input type="number" id="anzahlPersonen" name="anzahlPersonen" min="1" value="2" required> <!-- Angenommener Standardwert -->
                <button type="submit">Speichern</button>
            </form>
        <h2>Einstlungen, die noch nichts tun :)</h2>
        <form action="settings.php" method="post">
            <label>Wählen Sie Ihre bevorzugte Einkaufsmethode:</label>
            <div>
                <input type="radio" id="perfekteMenge" name="einkaufsOption" value="perfekteMenge" <?php echo ($aktuelleEinkaufsoption == 'perfekteMenge') ? 'checked' : ''; ?>>
                <label for="perfekteMenge">Perfekte Menge verwenden</label>
            </div>
            <div>
                <input type="radio" id="ueblicheVerpackungsgroesse" name="einkaufsOption" value="ueblicheVerpackungsgroesse" <?php echo ($aktuelleEinkaufsoption == 'ueblicheVerpackungsgroesse') ? 'checked' : ''; ?>>
                <label for="ueblicheVerpackungsgroesse">Übliche Verpackungsgröße verwenden</label>
            </div>
            <div>
                <input type="radio" id="unverpackt" name="einkaufsOption" value="unverpackt" <?php echo ($aktuelleEinkaufsoption == 'unverpackt') ? 'checked' : ''; ?>>
                <label for="unverpackt">Unverpackt - Größe von Gefäßen berücksichtigen</label>
            </div>
            <button type="submit">Auswahl speichern</button>
        </form>
    </main>

    <?php include '../templates/footer.php'; ?>
</body>
</html>



Path: ./http\Views\pages\updatePersonenanzahl.php
Content:
<?php
require_once '.-/../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['anzahlPersonen'], $_POST['datum'])) {
    $anzahlPersonen = $_POST['anzahlPersonen'];
    $datum = $_POST['datum'];
    $userId = $_SESSION['userId'];

    $sql = "UPDATE essenplan SET anzahl_personen = ? WHERE user_id = ? AND datum = ?";
    $stmt = $conn->prepare($sql);
    if ($stmt->bind_param("iis", $anzahlPersonen, $userId, $datum) && $stmt->execute()) {
        // Erfolg
        header("Location: rezept_detail.php?datum=" . urlencode($datum));
    } else {
        // Fehler
        echo "Fehler beim Aktualisieren der Anzahl der Personen.";
    }
    $stmt->close();
    $conn->close();
}
?>


Path: ./http\Views\pages\vorratsschrank.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/SessionManager.php';
require_once '../../Utils/db_connect.php';
checkUserAuthentication();

$userId = $_SESSION['userId'];

$sql = "SELECT vs.id, zn.name, vs.menge, vs.verbrauchsdatum 
        FROM vorratsschrank vs
        JOIN zutaten_namen zn ON vs.zutat_id = zn.zutat_id
        WHERE vs.user_id = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();

$Voratschrank = [];
while ($row = $result->fetch_assoc()) {
    $Voratschrank[] = [
        'name' => $row['name'],
        'menge' => $row['menge'],
        'verbrauchsdatum' => $row['verbrauchsdatum'],
        'id' => $row['id']
    ];
}
?>

<!DOCTYPE html>
<html lang="de">
<head>
    <?php include '../templates/header.php'; ?>
    <title>Vorratsschrank</title>
</head>
<body>
    <?php include '../templates/navigation.php'; ?>
    <main>
        <h2>Vorratsschrank</h2>
        <table>
            <tr>
                <th>Zutat</th>
                <th>Menge</th>
                <th>geplantes Verbauchs datum</th>
                <th>Aktion</th>
            </tr>
            <?php foreach ( $Voratschrank as $item): ?>
            <tr>
                <td><?= htmlspecialchars($item['name']) ?></td>
                <td><?= htmlspecialchars($item['menge']) ?></td>
                <td>
                    <?php if ($item['verbrauchsdatum']): ?>
                        <a href="rezept_detail.php?datum=<?= urlencode($item['verbrauchsdatum']) ?>">
                            <?= htmlspecialchars($item['verbrauchsdatum']) ?>
                        </a>
                    <?php else: ?>
                        <form method="post" action="Controllers/Inteligent_verplanen.php">
                            <input type="hidden" name="id" value="<?= $item['id'] ?>">
                            <button type="submit">Inteligent verplanen</button>
                        </form>
                    <?php endif; ?>
                </td>
            </tr>
            <?php endforeach; ?>
        </table>
    </main>
    <footer>
        <!-- Footer-Inhalt -->
    </footer>
</body>
</html>

Path: ./http\Views\pages\zutaten.php
Content:
<?php
    // Fehlerberichterstattung einschalten
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);

    // Verbindung zur Datenbank herstellen
    require_once '../../Utils/db_connect.php';

    require '../templates/zutaten_post.php';
    // Überprüfen, ob das Formular gesendet wurde
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        insert_into_Zutaten();
    }
    ?>

    <!DOCTYPE html>
    <html lang="de">
    <head>
        <meta charset="UTF-8">
        <title>Zutat Hinzufügen</title>
    </head>
    <body>
        <h2>Zutat Hinzufügen</h2>
        
        <form action=<?php echo htmlspecialchars($_SERVER["PHP_SELF"]); ?> method="post">
    <Script src="../templates/formFunctions.js"></Script>
        <?php require '../templates/zutatenFormular.php';?>
        <h2>Vorhandene Zutaten</h2>
        <?php
// Vorhandene Zutaten auflisten mit Anpassungen
$sql = "SELECT zutaten.id, 
               GROUP_CONCAT(zutaten_namen.name SEPARATOR ', ') AS names, 
               zutaten.uebliche_haltbarkeit, 
               zutaten.volumen, 
               kategorien.name AS kategorie_name, 
               Planetary_Health_Diet_Categories.Kategorie AS phd_kategorie_name, 
               einheiten.name AS einheit_name
        FROM zutaten 
        JOIN zutaten_namen ON zutaten.id = zutaten_namen.zutat_id
        JOIN kategorien ON zutaten.kategorie_id = kategorien.id
        JOIN Planetary_Health_Diet_Categories ON zutaten.phd_kategorie_id = Planetary_Health_Diet_Categories.ID
        JOIN einheiten ON zutaten.einheit_id = einheiten.id
        GROUP BY zutaten.id
        ORDER BY names ASC";

$result = $conn->query($sql);

if ($result->num_rows > 0) {
    echo "<table border='1'>";
    echo "<tr><th>Namen</th><th>Haltbarkeit (Tage)</th><th>Volumen</th><th>Kategorie</th><th>PHD Kategorie</th><th>Einheit</th></tr>";
    while ($row = $result->fetch_assoc()) {
        echo "<tr><td>" . htmlspecialchars($row['names']) . "</td><td>" . htmlspecialchars($row['uebliche_haltbarkeit']) . "</td><td>" . htmlspecialchars($row['volumen'] ?? '') . "</td><td>" . htmlspecialchars($row['kategorie_name']) . "</td><td>" . htmlspecialchars($row['phd_kategorie_name']) . "</td><td>" . htmlspecialchars($row['einheit_name']) . "</td></tr>";
    }
    echo "</table>";
} else {
    echo "Keine Zutaten gefunden.";
}
?>
 </body>
 </html>


Path: ./http\Views\templates\einheitenFormular.html
Content:
<label for="name">Name:</label>
    <input type="text" id="name" name="name" ><br><br>
    
    <label for="einheit_umrechnungsfaktor">Umrechnungsfaktor:</label>
    <input type="number" id="einheit_umrechnungsfaktor" name="einheit_umrechnungsfaktor" step="0.01" >
    <div id="info_speziel"> bei "spezieler Bassis ist die referenc immer Gramm</div><br><br>
    
    <label for="basisEinheit">Basis Einheit:</label>
    <select id="basisEinheit" name="basisEinheit">
        <option value="">Bitte wählen</option>     
        <option value="Liter">Liter</option>
        <option value="Gramm">Gramm</option>
        <option value="speziell">speziell</option>
    </select><br><br>

Path: ./http\Views\templates\einheitenFormular.php
Content:
<label for="name">Name:</label>
    <input type="text" id="name" name="name" ><br><br>
    
    <label for="einheit_umrechnungsfaktor">Umrechnungsfaktor:</label>
    <input type="number" id="einheit_umrechnungsfaktor" name="einheit_umrechnungsfaktor" step="0.01" >
    <div id="info_speziel"> bei "spezieler Bassis ist die referenc immer Gramm</div><br><br>
    
    <label for="basisEinheit">Basis Einheit:</label>
    <select id="basisEinheit" name="basisEinheit">
        <option value="">Bitte wählen</option>     
        <option value="Liter">Liter</option>
        <option value="Gramm">Gramm</option>
        <option value="speziell">speziell</option>
    </select><br><br>

Path: ./http\Views\templates\einheiten_post.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once '../../Utils/db_connect.php';

if ($conn->connect_error) {
    die("Verbindung fehlgeschlagen: " . $conn->connect_error);
} else {
    echo "Verbindung erfolgreich hergestellt.<br />";
}

if (!function_exists('insert_into_Eineheiten')) {
    
// Add new unit
function insert_into_Eineheiten(){
    global $conn;
    global $_POST;
    $name = $_POST['name'] ?? ''; // Verwenden Sie den Null-Coalescing-Operator, um sicherzustellen, dass $name nicht NULL ist.
    $umrechnungsfaktor = $_POST['einheit_umrechnungsfaktor'] ?? null;
    $basisEinheit = $_POST['basisEinheit'] ?? '';

    echo "Name: $name, Umrechnungsfaktor: $umrechnungsfaktor, BasisEinheit: $basisEinheit<br />";

    $basisEinheitId = null;
    $hatSpezifischenUmrechnungsfaktor = false;

    // Determine basisEinheitId and hatSpezifischenUmrechnungsfaktor based on basisEinheit selection
    if ($basisEinheit == 'Gramm') {
        $basisEinheitId = 1; // Ensure this ID exists in your database
        echo "BasisEinheit ist Gramm. BasisEinheitId: $basisEinheitId<br />";
    } elseif ($basisEinheit == 'Liter') {
        $basisEinheitId = 2; // Ensure this ID exists in your database
        echo "BasisEinheit ist Liter. BasisEinheitId: $basisEinheitId<br />";
    } elseif ($basisEinheit == 'speziell') {
        $hatSpezifischenUmrechnungsfaktor = true;
        $basisEinheitId = NULL;
        $umrechnungsfaktor = NULL;
        echo "BasisEinheit ist speziell. Spezifischer Umrechnungsfaktor: $hatSpezifischenUmrechnungsfaktor<br />";
    }

    $insertSql = "INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis, basis_einheit_id, hat_spezifischen_umrechnungsfaktor) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($insertSql);

    if (!$stmt) {
        echo "Fehler beim Vorbereiten des Statements: " . $conn->error . "<br />";
        return;
    }

    $stmt->bind_param("sdii", $name, $umrechnungsfaktor, $basisEinheitId, $hatSpezifischenUmrechnungsfaktor);

    if ($stmt->execute()) {
        echo "<p>Einheit erfolgreich hinzugefügt!</p>";
        // Gib die ID der neu eingefügten Einheit zurück
        return $conn->insert_id;
    } else {
        echo "<p>Fehler beim Hinzufügen der Einheit: " . $stmt->error . "</p>";
        return NULL; // Rückgabe von null im Fehlerfall
    }
}
}
?>


Path: ./http\Views\templates\footer.php
Content:


Path: ./http\Views\templates\formFunctions.js
Content:
function toggleForm(checkbox) {
    var isChecked = checkbox.checked;
    var alternativerNameContainer = document.getElementById('alternativerNameContainer');
    var restDesFormulars = document.getElementById('restDesFormulars');
    
    // Sichtbarkeit umschalten
    alternativerNameContainer.style.display = isChecked ? 'block' : 'none';
    restDesFormulars.style.display = isChecked ? 'none' : 'block';

    // Setze oder entferne das 'required' Attribut basierend auf dem Zustand des Kontrollkästchens
    var inputsAlternative = alternativerNameContainer.getElementsByTagName('input');
    for (var i = 0; i < inputsAlternative.length; i++) {
inputsAlternative[i].required = isChecked; // Diese Felder sind nur erforderlich, wenn der Container sichtbar ist
    }

    var inputsRest = restDesFormulars.getElementsByTagName('input');
    for (var i = 0; i < inputsRest.length; i++) {
// Überprüfe, ob das Eingabefeld sichtbar ist, bevor du es als required markierst
if (inputsRest[i].type !== 'submit' && inputsRest[i].id !== 'volumen') { // 'volumen' wird separat behandelt
    inputsRest[i].required = !isChecked; // Diese Felder sind nur erforderlich, wenn der Container sichtbar ist
}
    }

    // Spezialfall für 'volumen', das nur erforderlich ist, wenn es sichtbar ist
    var volumenInput = document.getElementById('volumen');
    if (volumenInput.style.display !== 'none') {
volumenInput.required = true;
    } else {
volumenInput.required = false;
    }
    if (!checkbox){
checkNeueEinheit(document.getElementById('einheit_id').value);
    }
}
window.onload = function() {
    toggleForm(document.getElementById('existiertUnterAnderemNamen'));
}
document.addEventListener("DOMContentLoaded", function() {
    // Bind change event listener to the units dropdown
    var einheitDropdown = document.getElementById('einheit_id');
    if (einheitDropdown) {
        einheitDropdown.addEventListener('change', handleEinheitChange);
    }

// Initial check to set the correct state when the page loads
    if (einheitDropdown) {
        handleEinheitChange({target: einheitDropdown});
    }
    
    var basisEinheitDropdown = document.getElementById('basisEinheit');
    if (basisEinheitDropdown) {
        basisEinheitDropdown.addEventListener('change', handleBasisEinheitChange);
    }

// Initial check for basisEinheitDropdown
    if (basisEinheitDropdown) {
        handleBasisEinheitChange({target: basisEinheitDropdown});
    }
});

function handleEinheitChange(event) {
    var selectedOption = event.target.options[event.target.selectedIndex];
    var umrechnungsfaktorField = document.getElementById('umrechnungsfaktorFeld');
    var umrechnungsfaktorInput = document.getElementById('umrechnungsfaktor');
    
    // Check if the selected unit requires a conversion factor
    if (selectedOption.dataset.spezifischerUmrechnungsfaktor === '1') {
umrechnungsfaktorField.style.display = 'block';
umrechnungsfaktorInput.required = true;
    } else {
umrechnungsfaktorField.style.display = 'none';
umrechnungsfaktorInput.required = false;
umrechnungsfaktorInput.value = ''; // Clear the input if it's not required
    }
}

function handleBasisEinheitChange(event) {
    var selectedValue = event.target.value;
    var volumenBlock = document.getElementById('volumen_block');
    var volumenInput = document.getElementById('volumen');
    
    // Adjust visibility and required attribute for the volume input
    if (selectedValue === 'Liter') {
volumenBlock.style.display = 'block';
volumenInput.required = true;
    } else {
volumenBlock.style.display = 'none';
volumenInput.required = false;
volumenInput.value = ''; // Clear the input if it's hidden
    }
}// This function toggles the visibility of the new unit form and its inputs' required status
function checkNeueEinheit(value) {
    var isNewUnitSelected = value === "neuHinzufuegen";
    var neueEinheitFormular = document.getElementById('neueEinheitFormular');
    var volumenBlock = document.getElementById('volumen_block');
    var volumenInput = document.getElementById('volumen');

    // Toggle the new unit form visibility
    neueEinheitFormular.style.display = isNewUnitSelected ? 'block' : 'none';

    // Set the required attribute for inputs in the new unit form based on its visibility
    var inputs = neueEinheitFormular.getElementsByTagName('input');
    for (var i = 0; i < inputs.length; i++) {
        inputs[i].required = isNewUnitSelected;
    }      

    // Adjust visibility and required attribute for the volumen input
    var selectedOption = document.querySelector('#einheit_id option:checked')
    var displayVolumen = 'none';
    if (value === '2' || 
        (isNewUnitSelected && document.getElementById('basisEinheit').value === 'Liter')|| 
        (selectedOption.getAttribute('data-basis') === '2')) {
            displayVolumen = 'block';
    }

    volumenBlock.style.display = displayVolumen;
    volumenInput.required = displayVolumen === 'block';

    if (isNewUnitSelected)
    checkBasisEinheit(document.getElementById('basisEinheit').value);

    // Neuer Teil: Überprüfen, ob die ausgewählte Einheit einen speziellen Umrechnungsfaktor benötigt
    var selectedOption = document.querySelector('#einheit_id option:checked');
    if (selectedOption !== null) { // Check if selectedOption is not null
        var hatSpezifischenUmrechnungsfaktor = selectedOption.getAttribute('data-spezifischer-umrechnungsfaktor') === '1'; // Annahme: '1' bedeutet wahr
        // Sichtbarkeit und Required-Status für das Umrechnungsfaktor-Feld anpassen
        var umrechnungsfaktorFeld = document.getElementById('umrechnungsfaktorFeld'); // Stellen Sie sicher, dass Sie ein entsprechendes Feld im HTML-Markup haben
        umrechnungsfaktorFeld.style.display = hatSpezifischenUmrechnungsfaktor ? 'block' : 'none';
        umrechnungsfaktorFeld.required = hatSpezifischenUmrechnungsfaktor;
    } else {
        // Handle the case where no option is selected or exists
        document.getElementById('umrechnungsfaktorFeld').style.display = 'none';
        document.getElementById('umrechnungsfaktorFeld').required = false;
        }
}
// Event-Listener für die Auswahländerung hinzufügen
document.getElementById('einheit_id').addEventListener('change', function() {
    checkNeueEinheit(this.value);
});
// Initialen Check ausführen
checkNeueEinheit(document.getElementById('einheit_id').value);
// This function updates the visibility of the volumen input based on the selected base unit

function checkBasisEinheit(value) {
    var volumenBlock = document.getElementById('volumen_block');
    var volumenInput = document.getElementById('volumen');

    var displayVolumen = value === 'Liter' ? 'block' : 'none';
    volumenBlock.style.display = displayVolumen;
    volumenInput.required = displayVolumen === 'block';

    var info_speziel = document.getElementById('info_speziel');
    info_speziel.style.display = value === 'speziell' ?  "block" : 'none';            
    }

Path: ./http\Views\templates\header.php
Content:
<meta charset='UTF-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<link rel='stylesheet' href='../../style.css'>

Path: ./http\Views\templates\navigation.php
Content:
<?php
// Füge die erforderlichen Includes ein, um auf die Benutzerdaten zugreifen zu können
require_once '../../Utils/db_connect.php';
require_once '../../Utils/SessionManager.php';

global $conn;

$einkaufsoption = ''; // Initialisiere die Variable

// Überprüfe, ob der Benutzer eingeloggt ist, und hole die Einkaufsoption

$userId = $_SESSION['userId'];
$sql = "SELECT einkaufsoption FROM users WHERE id = ?";
$stmt = $conn->prepare($sql);
$stmt->bind_param("i", $userId);
$stmt->execute();
$result = $stmt->get_result();
if ($row = $result->fetch_assoc()) {
    $einkaufsoption = $row['einkaufsoption'];
}
?>

<nav>
    <ul>
        <li><a href="heutiges-gericht.php">Heutiges Gericht</a></li>
        <li><a href="essensplan.php">Essensplan</a></li>
        <li><a href="einkaufsliste.php">Einkaufsliste</a></li>
        <li><a href="vorratsschrank.php">Vorratsschrank</a></li>
        <?php if (!isset($_SESSION['is_temporary'])): ?>
            <li><a href="freunde.php">Freunde</a></li>
        <?php endif; ?>
        <li><a href="settings.php">Einstellungen</a></li>
        <li><a href="profil.php">Profil</a></li>
        <?php if ($einkaufsoption == 'unverpackt'): ?>
            <li><a href="gefaessVerwaltung.php">Gefäßverwaltung</a></li>
        <?php endif; ?>
    </ul>
</nav>



Path: ./http\Views\templates\rezepteFormular.php
Content:
    <?php
    // Fehlerberichterstattung einschalten
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);

    // Verbindung zur Datenbank herstellen
    require_once '../../Utils/db_connect.php';

    // Funktion zum Überprüfen der Existenz einer Zutat und Rückgabe eines JSON-Objekts für die Autovervollständigung
    if(isset($_GET['action']) && $_GET['action'] == 'checkZutat' && !empty($_GET['zutatName'])) {
        $zutatName = $_GET['zutatName'];

        $stmt = $conn->prepare("SELECT id, name FROM zutaten_namen WHERE name LIKE ?");
        $searchTerm = "%" . $zutatName . "%";
        $stmt->bind_param("s", $searchTerm);
        $stmt->execute();
        $result = $stmt->get_result();

        $zutaten = [];
        while($row = $result->fetch_assoc()) {
            $zutaten[] = ['id' => $row['id'], 'name' => $row['name']];
        }

        echo json_encode($zutaten);
        exit;
    }
    ?>
    <form action="rezepte_post.php" method="post" enctype="multipart/form-data">
        <label for="titel">Titel:</label><br>
        <input type="text" id="titel" name="titel" required><br>

        <label for="untertitel">Untertitel:</label><br>
        <input type="text" id="untertitel" name="untertitel"><br>

        <label for="zubereitungszeit">Zubereitungszeit (in Minuten):</label><br>
        <input type="number" id="zubereitungszeit" name="zubereitungszeit" required><br>

        <label for="basis_personenanzahl">Basis Personenanzahl:</label><br>
        <input type="number" id="basis_personenanzahl" name="basis_personenanzahl" required><br>

        <label for="bilder">Bilder:</label><br>
        <input type="file" id="bilder" name="bilder"><br>

        <div id="zutatenContainer">
        </div>
        <br>

        <input type="submit" value="Rezept Hinzufügen">
    </form>

<Script src="../templates/formFunctions.js" ></Script>
    <script defer>
document.addEventListener("DOMContentLoaded", function() {
    var zutatenNameInput = document.getElementById('zutaten_name');
    if (zutatenNameInput) { // Überprüfen, ob das Element existiert
        zutatenNameInput.addEventListener('blur', function() {
            var zutatenName = this.value;
    console.log("Geprüfter Zutatenname:", zutatenName); // Debug: Überprüften Namen anzeigen

    if (zutatenName.length > 0) {
        let url = `./Views/rezepte.php?action=checkZutat&zutatName=${encodeURIComponent(zutatenName)}`;
        console.log("Anfrage-URL:", url); // Debug: Anfrage-URL anzeigen

        fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log("Antwort-Daten:", data); // Debug: Antwort-Daten anzeigen

            if (data.length > 0) {
                document.getElementById('existiertUnterAnderemNamen').closest('form').querySelectorAll("input[type='submit']").forEach(function(submitBtn) {
                    submitBtn.closest('div').style.display = 'none';
                });
                console.log("Zutat existiert. Formular wird ausgeblendet."); // Debug: Bestätigung des Ausblendens
            } else {
                document.getElementById('existiertUnterAnderemNamen').closest('form').querySelectorAll("input[type='submit']").forEach(function(submitBtn) {
                    submitBtn.closest('div').style.display = 'block';
                });
                console.log("Zutat existiert nicht. Formular wird eingeblendet."); // Debug: Bestätigung des Einblendens
            }
        })
        .catch(error => {
            console.error('Fehler beim Abrufen der Daten:', error);
        });
    } else {
        console.error("Element mit der ID 'zutaten_name' wurde nicht gefunden.");
    }
    });
    }addZutatBlock();
});
function addZutatBlock() {
    const container = document.getElementById('zutatenContainer');
    const newIndex = container.querySelectorAll('.zutatBlock').length;

    // Erstellen des Zutatenblocks
    const newZutatBlock = document.createElement('div');
    newZutatBlock.classList.add('zutatBlock');
    container.appendChild(newZutatBlock);

    // Laden des HTML-Contents über zutatenFormular.php
    fetch('../templates/zutatenFormular.php')
    .then(response => response.text())
    .then(htmlContent => {
        // HTML-Content anpassen, um eindeutige Namen für die Inputs zu setzen
        const modifiedHtmlContent = htmlContent.replace(/name="zutaten_name"/g, `name="zutaten[${newIndex}][name]"`)
                                               .replace(/id="zutaten_name"/g, `id="zutaten_name_${newIndex}"`)
                                               .replace(/for="zutaten_name"/g, `for="zutaten_name_${newIndex}"`);
        
        // HTML für das angepasste Namensfeld setzen
        newZutatBlock.innerHTML = modifiedHtmlContent;
        
        // HTML für das Mengenfeld direkt hinzufügen
        const mengeHTML = `
            <label for="zutaten_${newIndex}_menge">Menge:</label>
            <input type="text" id="zutaten_${newIndex}_menge" name="zutaten[${newIndex}][menge]"><br><br>
        `;
        newZutatBlock.innerHTML += mengeHTML;

        // Event-Listener für das neue Block hinzufügen
        initInputListener(newZutatBlock, newIndex);
    })
    .catch(error => console.error('Fehler beim Laden des Zutatenblocks:', error));
}


function initInputListener(block, index) {
    const inputs = block.querySelectorAll('input');
    inputs.forEach(input => {
        input.addEventListener('input', function(event) {
            // Prüfen, ob es der erste Input ist und ob ein weiterer Block hinzugefügt werden soll
            const isInputFilled = event.target.value.trim() !== '';
            const alreadyAdded = block.dataset.added === "true";
            if (isInputFilled && !alreadyAdded) {
                addZutatBlock();
                block.dataset.added = "true"; // Markieren, dass ein neuer Block hinzugefügt wurde, um Doppelungen zu vermeiden
            }
        });
    });
}
</script>


Path: ./http\Views\templates\rezepte_post.php
Content:


Path: ./http\Views\templates\zutatenFormular.php
Content:
<?php
// Fehlerberichterstattung einschalten
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once '../../Utils/db_connect.php';

require '../templates/einheiten_post.php';

// Funktion, um Optionen für ein Dropdown-Menü zu generieren, erweitert um den speziellen Umrechnungsfaktor-Status
function generateOptions($tableName, $idColumn, $nameColumn, $isEinheiten = false) {
    global $conn;
    $options = '';
    $sql = $isEinheiten ? "SELECT $idColumn, $nameColumn, basis_einheit_id, hat_spezifischen_umrechnungsfaktor FROM $tableName ORDER BY $nameColumn ASC" : "SELECT $idColumn, $nameColumn FROM $tableName ORDER BY $nameColumn ASC";
    $result = $conn->query($sql);
    if ($result->num_rows > 0) {
 while($row = $result->fetch_assoc()) {
     if ($isEinheiten) {
  $options .= "<option value='" . $row[$idColumn] . "' data-basis='" . $row['basis_einheit_id'] . "' data-spezifischer-umrechnungsfaktor='" . $row['hat_spezifischen_umrechnungsfaktor'] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
     } else {
  $options .= "<option value='" . $row[$idColumn] . "'>" . htmlspecialchars($row[$nameColumn]) . "</option>";
     }
 }
    }
    return $options;
}
?>
     <form action= $action method="post">
     <label for="zutaten_name">Name:</label>
     <input type="text" id="zutaten_name" name="zutaten_name"><br><br>
     <div id="zutatenFormularContainer">
     
     <label for="existiertUnterAnderemNamen">Existiert ide zutat unter einem anderem Namen?</label>
     <input type="checkbox" id="existiertUnterAnderemNamen" name="existiertUnterAnderemNamen" onchange="toggleForm(this)" checked>
     
     <div id="alternativerNameContainer" style="display:block;">
        <label for="alternativerName">Anderer Name:</label>
        <input type="text" id="alternativerName" name="alternativerName"><br><br>
        <input type="submit" name="aktion_name" value="Zutat Unter Anderem Namen Hinzufügen">
     </div>

     <div id="restDesFormulars" style="display:none;">

    <label for="haltbarkeit">Haltbarkeit (in Tagen):</label>
    <input class="restDesFormulars" type="number" id="haltbarkeit" name="haltbarkeit" ><br><br>
  
  
    <label for="kategorie_id">Kategorie:</label>
    <select class="restDesFormulars" id="kategorie_id" name="kategorie_id" >
        <option value="">Bitte wählen</option>    
        <?php echo generateOptions('kategorien', 'id', 'name'); ?>
    </select><br><br>
    
    <label for="phd_kategorie_id">Planetary Health Diet Category:</label>
    <select class="restDesFormulars" id="phd_kategorie_id" name="phd_kategorie_id" >
        <option value="">Bitte wählen</option> 
        <?php echo generateOptions('Planetary_Health_Diet_Categories', 'ID', 'Kategorie'); ?>
    </select><br><br>
    <label for="einheit_id">einheit:</label>
    <select id="einheit_id" name="einheit_id">
        <option value="">Bitte wählen</option>
        <?php echo generateOptions('einheiten', 'id', 'name', true); ?>

        <option value="neuHinzufuegen">Neu hinzufügen...</option>
    </select><br><br>
    <div id="neueEinheitFormular" style="display:none;"> 
        <?php require '../templates/einheitenFormular.html';?>
    </div>
    <div id="umrechnungsfaktorFeld" style="display: none;">
        <label for="umrechnungsfaktor">Umrechnungsfaktor:</label>
        <input type="number" id="umrechnungsfaktor" name="umrechnungsfaktor" step="0.01" required>
        <div> bei "spezieler Bassis ist die referenc immer Gramm</div><br><br>
    </div>

    <div id="volumen_block" style="display:none;">
    <label for="volumen">Volumen:</label>
    <input class="restDesFormulars" type="text" id="volumen" name="volumen">
    wichtig für PHD da die berenung mit gramm arbeitet<br><br>
    </div>
        <input type="submit" value="Zutat Hinzufügen">         
    </div>
<!-- Your form elements here -->
</div>
</form>

Path: ./http\Views\templates\zutaten_post.php
Content:
<?php
// Fehlerberichterstattung einschalten
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Verbindung zur Datenbank herstellen
require_once '../../Utils/db_connect.php';

require '../templates/einheiten_post.php';

// Überprüfen, ob das Formular gesendet wurde
function insert_into_Zutaten() {
    // Überprüfen, ob das Formular gesendet wurde und die Aktion "Zutat Unter Anderem Namen Hinzufügen" ist
    if (isset($_POST['aktion_name']) && $_POST['aktion_name'] === "Zutat Unter Anderem Namen Hinzufügen") {
 // Daten aus dem Formular holen
 $alternativerName = $_POST['alternativerName'];

 // Suche nach einer Zutat mit dem alternativen Namen
 $stmt = $conn->prepare("SELECT zutat_id FROM zutaten_namen WHERE name = ?");
 $stmt->bind_param("s", $alternativerName);
 $stmt->execute();
 $result = $stmt->get_result();

 if ($result->num_rows > 0) {
     // Zutat existiert, also füge den neuen Namen hinzu
     $row = $result->fetch_assoc();
     $zutatId = $row['zutat_id'];

     // Neuen Namen zur zutaten_namen Tabelle hinzufügen
     $zutaten_name = $_POST['zutaten_name']; // Der "neue" Name der Zutat
     $stmt = $conn->prepare("INSERT INTO zutaten_namen (name, zutat_id) VALUES (?, ?)");
     $stmt->bind_param("si", $zutaten_name, $zutatId);
     if ($stmt->execute()) {
  echo "<p>Neuer Name erfolgreich hinzugefügt.</p>";
     } else {
  echo "<p>Fehler beim Hinzufügen des neuen Namens: " . $stmt->error . "</p>";
     }
 } else {
     // Zutat nicht gefunden
     echo "<p>Die Zutat unter dem Namen '$alternativerName' wurde nicht gefunden. Bitte überprüfen Sie den Namen und versuchen Sie es erneut.</p>";
 }
    
 $stmt->close();
    }else{
 //zutaten_name : alternativerName : haltbarkeit : kategorie_id : phd_kategorie_id : einheit_id : name : einheit_umrechnungsfaktor : basisEinheit : umrechnungsfaktor : volumen
 foreach ($_POST as $a => $value) {
     echo $a . " : ";
 }
 
 if ($_POST['einheit_id'] === 'neuHinzufuegen') {
  
     // Führe die Funktion zum Hinzufügen der neuen Einheit aus und erhalte die neue Einheits-ID
     $einheit_id = insert_into_Eineheiten();
 }
 else{
     $einheit_id = $_POST['einheit_id'];
 }
 $hatSpezifischenUmrechnungsfaktor = $_POST['basisEinheit'] === 'speziell';
 $haltbarkeit = $_POST['haltbarkeit'] ?? null;
 $volumen = $_POST['volumen'] ?? null;
 $kategorie_id = $_POST['kategorie_id'] ?? null;
 $phd_kategorie_id = $_POST['phd_kategorie_id'] ?? null;
 $spezifischer_umrechnungsfaktor = ($hatSpezifischenUmrechnungsfaktor) ? $_POST['einheit_id'] === 'neuHinzufuegen' ? $_POST['einheit_umrechnungsfaktor']:$_POST['umrechnungsfaktor'] : null;

 // Prepared Statement zum Hinzufügen der Zutat vorbereiten
 $stmt = $conn->prepare("INSERT INTO zutaten (uebliche_haltbarkeit, volumen, kategorie_id, phd_kategorie_id, einheit_id, spezifischer_umrechnungsfaktor) VALUES (?, ?, ?, ?, ?, ?)");
 echo $haltbarkeit . " : " .  $volumen . " : " . $kategorie_id . " : " . $phd_kategorie_id . " : " . $einheit_id . " : " . $spezifischer_umrechnungsfaktor;
 // Parameter binden
 $stmt->bind_param("idiiid", $haltbarkeit, $volumen, $kategorie_id, $phd_kategorie_id, $einheit_id, $spezifischer_umrechnungsfaktor);

     // Versuchen, die Prepared Statement auszuführen
     if ($stmt->execute()) {
  if (empty($_POST['zutaten_name'])) {
      echo "<p>Name is required.</p>";
      // Handle the error appropriately - perhaps by not proceeding with the DB insert
  }
  $zutaten_name = $_POST['zutaten_name'];

  // Assuming $stmt->execute() was successful and $name is the name of the ingredient
  $zutatId = $conn->insert_id; // Retrieves the ID of the last inserted row
  $stmt = $conn->prepare("INSERT INTO zutaten_namen (name, zutat_id) VALUES (?, ?)");
  $stmt->bind_param("si", $zutaten_name, $zutatId);
  if (!$stmt->execute()) {
      echo "<p>Fehler beim Hinzufügen des Namens der Zutat: " . $stmt->error . "</p>";
  }

  echo "<p>Zutat erfolgreich hinzugefügt!</p>";
     } else {
  echo "<p>Fehler beim Hinzufügen der Zutat: " . $stmt->error . "</p>";
     }

     // Prepared Statement schließen
     $stmt->close();
 }
    }
?>

