Path: test.php
Content:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once 'Utils/db_connect.php';

// Schritt 1: Überprüfen, ob Rezepte vorhanden sind
$sql = "SELECT COUNT(*) FROM rezepte";
$result = $conn->query($sql);
$row = $result->fetch_row();

if ($row[0] == 0) {
    // Schritt 2: Füge Kategorien hinzu, falls noch nicht vorhanden (Optional, falls nicht bereits manuell hinzugefügt)
    $kategorienSql = "INSERT INTO kategorien (name, sortierreihenfolge) VALUES
    ('unbekannte zutat', 11),
    ('Obst & Gemüse', 1),
    ('Backwaren', 2),
    ('Fleisch & Fisch', 3),
    ('Milchprodukte & Eier', 4),
    ('Tiefkühlkost', 5),
    ('Konserven & Trockenwaren', 6),
    ('Getränke', 7),
    ('Süßwaren & Snacks', 8),
    ('Gesundheit & Schönheit', 9),
    ('Haushaltswaren', 10)
    ON DUPLICATE KEY UPDATE name=VALUES(name);"; // Verhindert Duplikate, wenn Skript erneut ausgeführt wird.
    $conn->query($kategorienSql);

    // Verbindung zur Datenbank herstellen

    $zutatenListe = [
        [
            'name' => 'Äpfel',
            'kategorie' => 'Obst & Gemüse',
            'haltbarkeit' => 30,
            'phd_kategorie' => 4, // Obst
            'naehrstoffe' => [
                'kalorien' => 52,
                'proteine' => 0.26,
                'fette' => 0.17,
                'kohlenhydrate' => 13.81,
                'ballaststoffe' => 2.4,
                'zucker' => 10.39
            ]
        ],
        ['name' => 'Brokkoli', 'kategorie' => 'Obst & Gemüse', 'haltbarkeit' => 15, 'phd_kategorie' => 3], // Gemüse
        ['name' => 'Karotten', 'kategorie' => 'Obst & Gemüse', 'haltbarkeit' => 30, 'phd_kategorie' => 3], // Gemüse
        ['name' => 'Römersalat', 'kategorie' => 'Obst & Gemüse', 'haltbarkeit' => 7, 'phd_kategorie' => 3], // Gemüse
        ['name' => 'Croutons', 'kategorie' => 'Backwaren', 'haltbarkeit' => 60, 'phd_kategorie' => 1], // Getreide (Vollkorn), Annahme basierend auf dem primären Getreideprodukt
        ['name' => 'Caesar-Dressing', 'kategorie' => 'Konserven & Trockenwaren', 'haltbarkeit' => 90, 'phd_kategorie' => 11], // Pflanzliche Öle, typischerweise basierend auf der Ölbasis im Dressing
        ['name' => 'Linsen', 'kategorie' => 'Konserven & Trockenwaren', 'haltbarkeit' => 365, 'phd_kategorie' => 2], // Hülsenfrüchte
        ['name' => 'Zwiebel', 'kategorie' => 'Obst & Gemüse', 'haltbarkeit' => 30, 'phd_kategorie' => 3], // Gemüse
        ['name' => 'Sellerie', 'kategorie' => 'Obst & Gemüse', 'haltbarkeit' => 21, 'phd_kategorie' => 3], // Gemüse
        ['name' => 'Gemüsebrühe', 'kategorie' => 'Konserven & Trockenwaren', 'haltbarkeit' => 365, 'phd_kategorie' => 3], // Gemüse, Annahme basierend auf dem primären Inhalt
        ['name' => 'Tofu', 'kategorie' => 'Gesundheit & Schönheit', 'haltbarkeit' => 60, 'phd_kategorie' => 2], // Hülsenfrüchte, Tofu wird aus Sojabohnen hergestellt
        ['name' => 'Tomatensoße', 'kategorie' => 'Konserven & Trockenwaren', 'haltbarkeit' => 365, 'phd_kategorie' => 3], // Gemüse
        ['name' => 'Knoblauch', 'kategorie' => 'Obst & Gemüse', 'haltbarkeit' => 60, 'phd_kategorie' => 3], // Gemüse
        ['name' => 'Pasta', 'kategorie' => 'Konserven & Trockenwaren', 'haltbarkeit' => 365, 'phd_kategorie' => 1], // Getreide (Vollkorn), Annahme basierend auf Getreidebasis
        ['name' => 'Zucchini', 'kategorie' => 'Obst & Gemüse', 'haltbarkeit' => 30, 'phd_kategorie' => 3], // Gemüse
        ['name' => 'Aubergine', 'kategorie' => 'Obst & Gemüse', 'haltbarkeit' => 30, 'phd_kategorie' => 3], // Gemüse
        ['name' => 'Paprika', 'kategorie' => 'Obst & Gemüse', 'haltbarkeit' => 30, 'phd_kategorie' => 3], // Gemüse
        ['name' => 'Thymian', 'kategorie' => 'Konserven & Trockenwaren', 'haltbarkeit' => 180, 'phd_kategorie' => 3], // Gemüse, Kräuter fallen oft unter diese Kategorie
        ['name' => 'Mehl', 'kategorie' => 'Backwaren', 'haltbarkeit' => 365, 'phd_kategorie' => 1], // Getreide (Vollkorn), Annahme basierend auf dem primären Getreideprodukt
        ['name' => 'Milch', 'kategorie' => 'Milchprodukte & Eier', 'haltbarkeit' => 10, 'phd_kategorie' => 9], // Milchprodukte
        ['name' => 'Butter', 'kategorie' => 'Milchprodukte & Eier', 'haltbarkeit' => 30, 'phd_kategorie' => 9], // Milchprodukte
        ['name' => 'Salz', 'kategorie' => 'Konserven & Trockenwaren', 'haltbarkeit' => 1095, 'phd_kategorie' => null], // Salz passt nicht direkt in eine PHD-Kategorie
        // Zuvor begonnene Zutaten mit ergänzten PHD-Kategorien
        ['name' => 'Vollkornbrot', 'kategorie' => 'Backwaren', 'haltbarkeit' => 7, 'phd_kategorie' => 1,'naehrstoffe' => [
            'kalorien' => 247,
            'proteine' => 13,
            'fette' => 3.4,
            'kohlenhydrate' => 41,
            'ballaststoffe' => 7,
            'zucker' => 6
        ]], // Getreide (Vollkorn)
        ['name' => 'Hühnchenbrust', 'kategorie' => 'Fleisch & Fisch', 'haltbarkeit' => 10, 'phd_kategorie' => 7,'naehrstoffe' => [
            'kalorien' => 165,
            'proteine' => 31,
            'fette' => 3.6,
            'kohlenhydrate' => 0,
            'ballaststoffe' => 0,
            'zucker' => 0
        ]], // Geflügel
        ['name' => 'Joghurt', 'kategorie' => 'Milchprodukte & Eier', 'haltbarkeit' => 15, 'phd_kategorie' => 9,'naehrstoffe' => [
            'kalorien' => 59,
            'proteine' => 10,
            'fette' => 0.4,
            'kohlenhydrate' => 3.6,
            'ballaststoffe' => 0,
            'zucker' => 3.6
        ]], // Milchprodukte
        ['name' => 'Tikka Masala Paste', 'kategorie' => 'Konserven & Trockenwaren', 'haltbarkeit' => 180, 'phd_kategorie' => 11,'naehrstoffe' => [
            'kalorien' => 150,
            'proteine' => 2,
            'fette' => 8,
            'kohlenhydrate' => 18,
            'ballaststoffe' => 2,
            'zucker' => 12
        ]], // Pflanzliche Öle, angenommen aufgrund der Ölbasis in der Paste
        ['name' => 'Tomaten', 'kategorie' => 'Obst & Gemüse', 'haltbarkeit' => 10, 'phd_kategorie' => 3,'naehrstoffe' => [
            'kalorien' => 18,
            'proteine' => 0.88,
            'fette' => 0.2,
            'kohlenhydrate' => 3.89,
            'ballaststoffe' => 1.2,
            'zucker' => 2.63
        ]], // Gemüse
        ['name' => 'Sahne', 'kategorie' => 'Milchprodukte & Eier', 'haltbarkeit' => 10, 'phd_kategorie' => 9,'naehrstoffe' => [
            'kalorien' => 342,
            'proteine' => 2.9,
            'fette' => 36,
            'kohlenhydrate' => 2.7,
            'ballaststoffe' => 0,
            'zucker' => 2.7
        ]], // Milchprodukte
        ['name' => 'Ei', 'kategorie' => 'Milchprodukte & Eier', 'haltbarkeit' => 21, 'phd_kategorie' => 10,'naehrstoffe' => [
            'kalorien' => 155,
            'proteine' => 13,
            'fette' => 11,
            'kohlenhydrate' => 1.1,
            'ballaststoffe' => 0,
            'zucker' => 1.1
        ]], // Eier
        ['name' => 'Speck', 'kategorie' => 'Fleisch & Fisch', 'haltbarkeit' => 14, 'phd_kategorie' => 6,'naehrstoffe' => [
            'kalorien' => 541,
            'proteine' => 37,
            'fette' => 42,
            'kohlenhydrate' => 1.4,
            'ballaststoffe' => 0,
            'zucker' => 0
        ]], // Fleisch (Rot und verarbeitet)
        ['name' => 'Spaghetti', 'kategorie' => 'Konserven & Trockenwaren', 'haltbarkeit' => 365, 'phd_kategorie' => 1,'naehrstoffe' => [
            'kalorien' => 158,
            'proteine' => 5.8,
            'fette' => 0.9,
            'kohlenhydrate' => 31,
            'ballaststoffe' => 1.8,
            'zucker' => 0.8
        ]], // Getreide (Vollkorn)
        ['name' => 'Parmesan', 'kategorie' => 'Milchprodukte & Eier', 'haltbarkeit' => 60, 'phd_kategorie' => 9,'naehrstoffe' => [
            'kalorien' => 431,
            'proteine' => 38,
            'fette' => 29,
            'kohlenhydrate' => 4.1,
            'ballaststoffe' => 0,
            'zucker' => 0.9
        ]], // Milchprodukte
        ['name' => 'Kokosmilch', 'kategorie' => 'Konserven & Trockenwaren', 'haltbarkeit' => 180, 'phd_kategorie' => 11,'naehrstoffe' => [
            'kalorien' => 230,
            'proteine' => 2.3,
            'fette' => 24,
            'kohlenhydrate' => 6,
            'ballaststoffe' => 2.2,
            'zucker' => 3.3
        ]], // Pflanzliche Öle, angenommen aufgrund der Fettbasis
        ['name' => 'Currypaste', 'kategorie' => 'Konserven & Trockenwaren', 'haltbarkeit' => 180, 'phd_kategorie' => 11,'naehrstoffe' => [
            'kalorien' => 325,
            'proteine' => 3.8,
            'fette' => 17,
            'kohlenhydrate' => 40,
            'ballaststoffe' => 9.8,
            'zucker' => 29
        ]] // Pflanzliche Öle, angenommen aufgrund der Ölbasis in der Paste
        // Beachten Sie, dass einige Zutaten möglicherweise keiner spezifischen PHD-Kategorie zugeordnet werden können, wie z.B. Salz.
    ];
    
    
    foreach ($zutatenListe as $zutat) {
        // Ermittle die kategorie_id basierend auf dem Kategorienamen
        $kategorieStmt = $conn->prepare("SELECT id FROM kategorien WHERE name = ?");
        $kategorieStmt->bind_param("s", $zutat['kategorie']);
        $kategorieStmt->execute();
        $result = $kategorieStmt->get_result();
        if ($row = $result->fetch_assoc()) {
            $kategorie_id = $row['id'];

            $insertStmtZutaten = $conn->prepare("INSERT INTO zutaten (kategorie_id, uebliche_haltbarkeit, phd_kategorie_id) VALUES (?, ?, ?)");
            $insertStmtZutaten->bind_param("iii", $kategorie_id, $zutat['haltbarkeit'], $zutat['phd_kategorie']);
            $insertStmtZutaten->execute();
            $zutatId = $conn->insert_id;// Holt die ID der gerade eingefügten Zutat

            $insertStmtNamen = $conn->prepare("INSERT INTO zutaten_namen (name, zutat_id) VALUES (?, ?)");
            $insertStmtNamen->bind_param("si", $zutat['name'], $zutatId);
            $insertStmtNamen->execute();

        }
        // Neuer Code zum Einfügen der Nährstoffdaten
        $insertStmtNaehrstoffe = $conn->prepare("INSERT INTO naehrstoffe (zutat_id, kalorien, proteine, fette, kohlenhydrate, ballaststoffe, zucker) VALUES (?, ?, ?, ?, ?, ?, ?)");
        $insertStmtNaehrstoffe->bind_param("idddddd", $zutatId, $zutat['naehrstoffe']['kalorien'], $zutat['naehrstoffe']['proteine'], $zutat['naehrstoffe']['fette'], $zutat['naehrstoffe']['kohlenhydrate'], $zutat['naehrstoffe']['ballaststoffe'], $zutat['naehrstoffe']['zucker']);
        $insertStmtNaehrstoffe->execute();
    }


    // Schritt 2.1: Keine Rezepte vorhanden, füge Beispielrezepte ein
    $beispielRezepte = [
        [
        "titel" => "Chicken Tikka Masala",
        "beschreibung" => "Beliebtes indisches Gericht mit cremiger Tomatensoße.",
        "zubereitungszeit" => 40,
        "zutaten" => [
            ["name" => "Hühnerbrust","menge" =>  "500g"],
            ["name" => "Joghurt", "menge" =>  "100ml"],
            ["name" => "Tikka Masala Paste", "menge" =>  "3 EL"],
            ["name" => "Tomaten", "menge" =>  "400g"],
            ["name" => "Sahne", "menge" =>  "100ml"]
        ]
        ],[
            "titel" => "Spaghetti Carbonara",
            "beschreibung" => "Klassisches italienisches Pasta-Gericht mit Speck und Sahnesoße.",
            "zubereitungszeit" => 20,
            "zutaten" => [
                ["name" => "Ei", "menge" =>  "2 Stück"],
                ["name" => "Speck", "menge" =>  "100g"],
                ["name" => "Spaghetti","menge" =>   "200g"],
                ["name" => "Parmesan","menge" =>   "50g"]
            ]
        ],
        [
            "titel" => "Gemüsecurry",
            "beschreibung" => "Würziges und gesundes Gemüsecurry mit Reis.",
            "zubereitungszeit" => 30,
            "zutaten" => [
                ["name" => "Kokosmilch","menge" =>   "250ml"],
                ["name" => "Currypaste","menge" =>   "2 EL"],
                ["name" => "Brokkoli","menge" =>   "1 Kopf"],
                ["name" => "Karotten","menge" =>   "2 Stück"]
            ]
        ],
        [
            "titel" => "Caesar Salad",
            "beschreibung" => "Klassischer Caesar Salad mit knusprigen Croutons und Parmesan.",
            "zubereitungszeit" => 15,
            "zutaten" => [
                ["name" => "Römersalat","menge" =>   "1 Kopf"],
                ["name" => "Croutons","menge" =>   "100g"],
                ["name" => "Parmesan","menge" =>   "30g"],
                ["name" => "Caesar-Dressing","menge" =>   "50ml"]
            ]
        ],[
        
        "titel" => "Linsensuppe",
        "beschreibung" => "Herzhafte Linsensuppe, perfekt für kalte Tage.",
        "zubereitungszeit" => 45,
        "zutaten" => [
            ["name" => "Linsen","menge" =>   "200g"],
            ["name" => "Zwiebel","menge" =>   "1 Stück"],
            ["name" => "Karotten","menge" =>   "2 Stück"],
            ["name" => "Sellerie","menge" =>   "1 Stange"],
            ["name" => "Gemüsebrühe","menge" =>   "1 Liter"]
        ]
    ],[
        "titel" => "Vegane Bolognese",
        "beschreibung" => "Pflanzenbasierte Version des italienischen Klassikers.",
        "zubereitungszeit" => 30,
        "zutaten" => [
            ["name" => "Tofu","menge" =>   "200g"],
            ["name" => "Tomatensoße","menge" =>   "500ml"],
            ["name" => "Zwiebel","menge" =>   "1 Stück"],
            ["name" => "Knoblauch","menge" =>   "2 Zehen"],
            ["name" => "Pasta","menge" =>   "300g"]
        ]
    ],[
        "titel" => "Ratatouille",
        "beschreibung" => "Französisches Gemüsegericht, bunt und aromatisch.",
        "zubereitungszeit" => 60,
        "zutaten" => [
            ["name" => "Zucchini","menge" =>   "2 Stück"],
            ["name" => "Aubergine","menge" =>   "1 Stück"],
            ["name" => "Paprika","menge" =>   "2 Stück"],
            ["name" => "Tomaten","menge" =>   "3 Stück"],
            ["name" => "Thymian","menge" =>   "1 Zweig"]
        ]
    ],[
        "titel" => "Pfannkuchen",
        "beschreibung" => "Einfache und leckere Pfannkuchen, süß oder herzhaft.",
        "zubereitungszeit" => 20,
        "zutaten" => ["name" => 
            ["name" => "Mehl","menge" =>   "250g"],
            ["name" => "Eier","menge" =>   "2 Stück"],
            ["name" => "Milch","menge" =>   "500ml"],
            ["name" => "Butter","menge" =>   "Zum Braten"],
            ["name" => "Salz","menge" =>   "1 Prise"]
        ]
    ]
    ];

    $stmtRezept = $conn->prepare("INSERT INTO rezepte (titel, beschreibung, zubereitungszeit) VALUES (?, ?, ?)");
    $stmtCheckZutat = $conn->prepare("SELECT zutat_id FROM zutaten_namen WHERE name = ?");
    $stmtZutaten = $conn->prepare("INSERT INTO rezept_zutaten (rezept_id, zutat_id, menge, einheit_id) VALUES (?, ?, ?, ?)");
    $stmtCheckExisting = $conn->prepare("SELECT COUNT(*) FROM rezept_zutaten WHERE rezept_id = ? AND zutat_id = ?");
    
    foreach ($beispielRezepte as $rezept) {
        $stmtRezept->bind_param("ssi", $rezept['titel'], $rezept['beschreibung'], $rezept['zubereitungszeit']);
        $stmtRezept->execute();
        $rezeptId = $stmtRezept->insert_id;
    
        foreach ($rezept['zutaten'] as $zutat) {
            $stmtCheckZutat->bind_param("s", $zutat['name']);
            $stmtCheckZutat->execute();
            $result = $stmtCheckZutat->get_result();
            if ($result->num_rows > 0) {
                $row = $result->fetch_assoc();
                $zutatId = $row['zutat_id'];
                
                echo $zutat['menge'] . "  : ";
                $eingabe = $zutat['menge'];
                // Überprüfen, ob die Eingabe nur aus Zahlen besteht
                if (is_numeric($eingabe)) {
                    $quantity  = $eingabe;
                    $einheitName  = "";
                } elseif (is_string($eingabe)) { // Überprüfen, ob die Eingabe nur aus Buchstaben besteht
                    // Hier könnte zusätzlich geprüft werden, ob es sich tatsächlich nur um Wörter handelt,
                    // z.B. durch einen regulären Ausdruck, der sicherstellt, dass keine Zahlen enthalten sind.
                    if (preg_match('/^[a-zA-ZäöüÄÖÜß\s]+$/', $eingabe)) {
                        $quantity  = -1;
                        $einheitName  = $eingabe;
                    } else {
                        // Falls die Eingabe sowohl Buchstaben als auch Zahlen enthält
                        echo "Die Eingabe enthält sowohl Buchstaben als auch Zahlen.\n";
                        preg_match('/^(\d+)\s*(.*)$/', $zutat['menge'], $matches);
                        $quantity = (int)$matches[1];
                        $einheitName = trim($matches[2]);// Oder eine Fehlerbehandlung nach Bedarf
                    }
                } else {
                    // Falls die Eingabe weder reine Zahlen noch reine Wörter enthält
                    echo "Ungültige Eingabe.\n";
                    $quantity  = -1;
                    $einheitName  = ""; // Oder eine Fehlerbehandlung nach Bedarf
                }
                
                echo $quantity . " + " . $einheitName. "</br>";
                // SQL-Abfrage, um die einheit_id zu ermitteln
                $stmtEinheit = $conn->prepare("SELECT id FROM einheiten WHERE name = ?");
                $stmtEinheit->bind_param("s", $einheitName);
                $stmtEinheit->execute();
                $resultEinheit = $stmtEinheit->get_result();

                if ($resultEinheit->num_rows > 0) {
                    // Einheit existiert, benutze existierende einheit_id
                    $rowEinheit = $resultEinheit->fetch_assoc();
                    $einheitId = $rowEinheit['id'];
                } else {
                    // Optional: Einheit existiert nicht, füge sie ein und benutze neue einheit_id
                    // Dies hängt von deiner Anforderung ab, ob du neue Einheiten automatisch hinzufügen möchtest
                    $stmtEinheitInsert = $conn->prepare("INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis) VALUES (?, ?)");
                    $umrechnungsfaktorZuBasis = 1; // Standardwert oder berechne basierend auf Einheit
                    $stmtEinheitInsert->bind_param("sd", $einheitName, $umrechnungsfaktorZuBasis);
                    $stmtEinheitInsert->execute();
                    $einheitId = $stmtEinheitInsert->insert_id;
                }
                $stmtCheckExisting->bind_param("ii", $rezeptId, $zutatId);
                $stmtCheckExisting->execute();
                $result = $stmtCheckExisting->get_result(); // Correct variable for fetching result
                $row = $result->fetch_array(); // Fetching the row directly as an array
                if ($row[0] == 0) { // Assuming COUNT(*) returns 0 if not exists
                    $stmtZutaten->bind_param("iiii", $rezeptId, $zutatId, $quantity, $einheitId);
                    $stmtZutaten->execute();
                }
            }
            // It's good practice to free each result set as soon as you're done with it
            if(isset($result) && $result instanceof mysqli_result) {
                $result->free();
                unset($result); // Entfernen Sie die Referenz, um doppelte Freigaben zu verhindern
            }
            
        }
        
    }
} else {
    echo "Es sind bereits Rezepte in der Datenbank vorhanden.";
}

$stmtRezept->close();   
$stmtCheckZutat->close();
$stmtZutaten->close();
$conn->close();
?>


Path: sql_create
Content:
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL, -- Speichern Sie hier Hashes, nicht die tatsächlichen Passwörter
    cookie_auth_token VARCHAR(255), -- Ein langes, zufälliges Token für die Authentifizierung via Cookie
    freundes_token VARCHAR(255) UNIQUE,
    einkaufsoption VARCHAR(255) DEFAULT 'ueblicheVerpackungsgroesse',
    is_temporary BOOLEAN NOT NULL DEFAULT 0,
    anzahl_personen_einstellung INT DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    current_editing_recipe_id INT DEFAULT NULL;
);

CREATE TABLE essenplan (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    datum DATE NOT NULL,
    anzahl_personen INT NOT NULL,
    rezept_id INT, 
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (rezept_id) REFERENCES rezepte(id)
);


CREATE TABLE zutaten (
    id INT AUTO_INCREMENT PRIMARY KEY,
    uebliche_haltbarkeit INT DEFAULT 7 COMMENT 'Haltbarkeit in Tagen',
    kategorie_id INT DEFAULT NULL,
    phd_kategorie_id INT,
    volumen DECIMAL(10, 2),
    einheit_id INT,   
    spezifischer_umrechnungsfaktor DECIMAL(10, 2),
    FOREIGN KEY (phd_kategorie_id) REFERENCES Planetary_Health_Diet_Categories(ID),
    FOREIGN KEY (kategorie_id) REFERENCES kategorien(id),
    FOREIGN KEY (einheit_id) REFERENCES einheiten(id)
);

CREATE TABLE kategorien (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    sortierreihenfolge INT NOT NULL
);



CREATE TABLE rezepte (
    id INT AUTO_INCREMENT PRIMARY KEY,
    titel VARCHAR(255) NOT NULL,
    beschreibung TEXT,
    zubereitungszeit INT,
    basis_personenanzahl INT DEFAULT 4

);


CREATE TABLE rezept_zutaten (
    rezept_id INT,
    zutat_id INT,
    menge DECIMAL(10, 2),
    einheit_id INT NOT NULL,
    FOREIGN KEY (einheit_id) REFERENCES einheiten(id),
    PRIMARY KEY (rezept_id, zutat_id),
    FOREIGN KEY (rezept_id) REFERENCES rezepte(id),
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);
CREATE TABLE einkaufsliste (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    zutat_id INT,
    menge VARCHAR(255),
    gekauft BOOLEAN DEFAULT FALSE,
    verbrauchsdatum DATE, -- Hinzugefügtes Feld für das Verbrauchsdatum
    gefaess_id INT DEFAULT NULL,
    FOREIGN KEY (gefaess_id) REFERENCES unverpackte_gefaesse(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE vorratsschrank (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    zutat_id INT,
    menge VARCHAR(255),
    verbrauchsdatum DATE, -- Hinzugefügtes Feld für das Verbrauchsdatum
    gefaess_id INT DEFAULT NULL,
    FOREIGN KEY (gefaess_id) REFERENCES unverpackte_gefaesse(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE zutaten_namen (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    zutat_id INT NOT NULL,
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE konventionen (
    id INT AUTO_INCREMENT PRIMARY KEY,
    single_name_id INT NOT NULL,
    plural_name_id INT,
    zutat_id INT NOT NULL,
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE freundschaftsanfragen (
    id INT AUTO_INCREMENT PRIMARY KEY,
    sender_id INT NOT NULL,
    empfaenger_id INT NOT NULL,
    status ENUM('pending', 'accepted', 'declined') NOT NULL,
    FOREIGN KEY (sender_id) REFERENCES users(id),
    FOREIGN KEY (empfaenger_id) REFERENCES users(id)
);

CREATE TABLE freunde (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id_1 INT NOT NULL,
    user_id_2 INT NOT NULL,
    FOREIGN KEY (user_id_1) REFERENCES users(id),
    FOREIGN KEY (user_id_2) REFERENCES users(id)
);

CREATE TABLE unverpackte_gefaesse (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    volumen DECIMAL(10,2) NOT NULL COMMENT 'Volumen in Litern oder Kilogramm',
    beschreibung TEXT,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE TABLE einheiten (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    umrechnungsfaktor_zu_basis DECIMAL(10, 2),
    basis_einheit_id INT NULL,
    volumen DECIMAL(10, 2),
    hat_spezifischen_umrechnungsfaktor BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (basis_einheit_id) REFERENCES einheiten(id)
);
-- Basiseinheiten einfügen
INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis) VALUES ('Gramm', 1), ('Liter', 1);
INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis, basis_einheit_id) VALUES ('Kilogramm', 1000, 1), ('Pfund', 453.59, 1), ('Unze', 28.35, 1);
INSERT INTO einheiten (name, umrechnungsfaktor_zu_basis, basis_einheit_id) VALUES ('Milliliter', 0.001, 2), ('Teelöffel', 0.005, 2), ('Esslöffel', 0.015, 2), ('Tasse', 0.24, 2);

CREATE TABLE zutaten_saisonalitaet (
    id INT AUTO_INCREMENT PRIMARY KEY,
    zutat_id INT NOT NULL,
    saison_start DATE NOT NULL,
    saison_ende DATE NOT NULL,
    FOREIGN KEY (zutat_id) REFERENCES zutaten(id)
);

CREATE TABLE Planetary_Health_Diet_Categories (
    ID INT PRIMARY KEY,
    Kategorie VARCHAR(255),
    Taegliche_Menge_g INT,
    Beispiele TEXT
);
INSERT INTO Planetary_Health_Diet_Categories (ID, Kategorie, Taegliche_Menge_g, Beispiele) VALUES
(1, 'Getreide (Vollkorn)', 232, 'Vollkornprodukte, unverarbeitete Mais-, Weizen-, Reis- oder Haferprodukte'),
(2, 'Hülsenfrüchte', 50, 'Linsen, Bohnen, Erbsen, Kichererbsen'),
(3, 'Gemüse', 300, 'Ein Mix aus verschiedenen Gemüsesorten'),
(4, 'Obst', 200, 'Äpfel, Bananen, Orangen, Beeren'),
(5, 'Nüsse und Samen', 50, ''),
(6, 'Fleisch (Rot und verarbeitet)', 14, 'Begrenzen auf rotes und verarbeitetes Fleisch'),
(7, 'Geflügel', 29, ''),
(8, 'Fisch', 28, ''),
(9, 'Milchprodukte', 250, 'Milch, Joghurt, Käse'),
(10, 'Eier', 13, 'Entspricht etwa 1,5 Eiern pro Woche'),
(11, 'Pflanzliche Öle', 40, 'Olivenöl, Rapsöl, Sonnenblumenöl'),
(12, 'Zucker', 31, ''),
(13, 'Stärkehaltiges Gemüse', 50, 'Kartoffeln, Süßkartoffeln');


